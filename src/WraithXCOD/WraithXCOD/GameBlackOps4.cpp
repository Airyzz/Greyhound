#include "stdafx.h"

// The class we are implementing
#include "GameBlackOps4.h"

// We need the CoDAssets class
#include "CoDAssets.h"
#include "CoDRawImageTranslator.h"
#include "CoDXPoolParser.h"

// We need the following WraithX classes
#include "Strings.h"
#include "FileSystems.h"
#include "MemoryReader.h"
#include "SettingsManager.h"
#include "HalfFloats.h"

// -- Initialize Asset Name Cache

WraithNameIndex GameBlackOps4::AssetNameCache = WraithNameIndex();

// -- Initialize Decryption Table

uint32_t* DecryptionTable = new uint32_t[4370]
{
	0x05F2A974, 0x20C10FC2, 0x19786F28, 0x063A6FA3, 0x364491C9, 0x022D825F, 0x13CCD31D, 0x0EDD9C6F,
	0x37CAC4BB, 0x1F528A55, 0x29068152, 0x23961118, 0x0090AA5B, 0x16BECD1D, 0x2C37B1F7, 0x259DBD1F,
	0x2F75347D, 0x2A8E0AE9, 0x064556F5, 0x35CE65EB, 0x196CD4CC, 0x147C40C3, 0x2C3AB2F7, 0x2D60379E,
	0x34353500, 0x1882C88F, 0x3B6717F5, 0x0A4B4D36, 0x34155779, 0x17443D09, 0x0DD7BB9B, 0x293A0308,
	0x37284A3C, 0x25CA3BEC, 0x0DF04865, 0x2CC438D1, 0x0C77B0E0, 0x239472CD, 0x0FF94A29, 0x0CE55414,
	0x02BBE375, 0x27584E2A, 0x2FFDE8EF, 0x3409AAC1, 0x103963C0, 0x23958C40, 0x219F46DD, 0x02E9CD91,
	0x3B800C3D, 0x283B0B80, 0x35A90919, 0x2D679675, 0x13405B55, 0x0B5F78DF, 0x05492422, 0x35338AEB,
	0x326EDC4A, 0x17298428, 0x3A5ABF0B, 0x3A2CD747, 0x0EE5E0F3, 0x1ABB6537, 0x21FE3179, 0x1EF3B903,
	0x1680CE05, 0x208E3D9E, 0x389B10B1, 0x30906484, 0x07BEB0DF, 0x3378AA4D, 0x263DCEFF, 0x3B9938E7,
	0x31880C9A, 0x2CBBE425, 0x11583CA7, 0x35B4CA76, 0x32DEEF49, 0x179E4642, 0x0408AC3B, 0x345D3D12,
	0x0975CA5D, 0x07674F55, 0x3593F3C1, 0x294EE29A, 0x2F1E8902, 0x2B9AB010, 0x050D49CB, 0x1837D52B,
	0x2CFD1588, 0x1261BCD9, 0x1E34BC11, 0x244C4F6D, 0x221B2AE7, 0x1CE3163F, 0x0059A73B, 0x13459AB8,
	0x026EE364, 0x1764E904, 0x08970797, 0x05161905, 0x2C632EE2, 0x2287E2E9, 0x2025DF1D, 0x0A333309,
	0x3B6269E4, 0x0F86C3FA, 0x3A771827, 0x3A913A14, 0x3B255446, 0x0F8FF428, 0x1F2E75DA, 0x01927BC3,
	0x13F64F2F, 0x06C2BF16, 0x284E0C21, 0x0AD242D4, 0x0A23A2D1, 0x2BC420F0, 0x337F9A35, 0x240B55D3,
	0x0348BFC7, 0x218D7D5D, 0x27F3E8A1, 0x139A7D51, 0x0D17C947, 0x08B7A7BB, 0x10627B3F, 0x30C3213E,
	0x2B9FCF20, 0x116572FB, 0x0B8A5E91, 0x1864C99E, 0x357FC678, 0x0E7D7193, 0x0C36939B, 0x05B371FE,
	0x1EADED39, 0x2D751D52, 0x02B04408, 0x0DCD66D0, 0x338ADE06, 0x2BF48336, 0x28D02746, 0x0F6ED14A,
	0x143E412D, 0x1742D3E7, 0x2A3705CA, 0x1BB4B598, 0x17C98CA2, 0x26B8718D, 0x029954AD, 0x0AFB50E4,
	0x0F0555DE, 0x23099108, 0x215F8569, 0x00F71FE8, 0x2037B74C, 0x2907F232, 0x015FB0E8, 0x2F83D4B3,
	0x04746A33, 0x1955C46D, 0x36C53AF7, 0x3B519332, 0x27C924FF, 0x36CF08D2, 0x02C8AEA6, 0x0145DD88,
	0x00F84D57, 0x2F27997C, 0x1EA779C3, 0x25812F47, 0x39E29C87, 0x2885435C, 0x296B19BD, 0x1571E5C9,
	0x1CD5F912, 0x06278FF0, 0x2FE1C571, 0x38CCA06A, 0x0E31BC2D, 0x08111933, 0x0989EDC4, 0x0BF44C9B,
	0x024F47F6, 0x0CD16DE0, 0x136FD93E, 0x2A5994D9, 0x05ECA197, 0x1B2F1B38, 0x14BDA4BD, 0x2AD842E1,
	0x325162E1, 0x16AC8095, 0x13BB4A92, 0x20C3C0C7, 0x0CD3F4C3, 0x03EC1876, 0x012F834A, 0x0EF13DDB,
	0x072F48D9, 0x0A093AD1, 0x01558242, 0x2B7B7B8F, 0x387350B5, 0x315C0792, 0x2D1BAE70, 0x2BCAAAC0,
	0x1D52437F, 0x0B650D18, 0x38CCB2E3, 0x19F49E4F, 0x1DCAF4F7, 0x275A774D, 0x2CCBDA08, 0x20B3E24A,
	0x31B17645, 0x0B6A37C8, 0x15C9B127, 0x15014E14, 0x253EC5C2, 0x0CA24D2A, 0x0BC3C0BA, 0x316F718A,
	0x050BC3E6, 0x29D98604, 0x2649771C, 0x1794D6CA, 0x0C8C50D6, 0x16271416, 0x35AEAAB8, 0x08843EDE,
	0x17B969D5, 0x1125C876, 0x2EF491E4, 0x0CA233A8, 0x2EBEBE14, 0x228998A8, 0x0C3D5C92, 0x03C24950,
	0x2C62502E, 0x0BA8454F, 0x237E587D, 0x10A41956, 0x2F44B708, 0x19A4FD46, 0x1A7D5AED, 0x26080FDB,
	0x12939A36, 0x2B7851FC, 0x18794CDF, 0x0DEDF845, 0x0B84E9BD, 0x16CEA5C7, 0x34D89284, 0x355EE2DB,
	0x15D0B412, 0x062CBC1A, 0x123AD89B, 0x0457A7B7, 0x17EBDDD4, 0x0DF9A1A9, 0x19710655, 0x0A0D61CF,
	0x0DF37852, 0x30982B47, 0x142D5218, 0x18629552, 0x0292D58C, 0x3991CFC4, 0x35383A64, 0x23A93C02,
	0x21ED70B0, 0x03CEE3EE, 0x0144C8A3, 0x37884E31, 0x13E1A03F, 0x1B9984E0, 0x3B3D62C8, 0x165BB971,
	0x36D563C4, 0x27EEEF65, 0x0F4323D9, 0x2B91648C, 0x091AAEE7, 0x05CB1014, 0x31A42217, 0x264B9EDF,
	0x252D23B5, 0x177D7447, 0x1AE6A82F, 0x32055618, 0x26B2ED7B, 0x2ACABFCC, 0x1E1ECC34, 0x12602AF5,
	0x1A8EE77A, 0x2F338CD6, 0x2CA791D1, 0x12728971, 0x2E8F6DE7, 0x20D89728, 0x1763511B, 0x12719C93,
	0x38CFCAE0, 0x02E88AAF, 0x1A43244C, 0x19F1B9DD, 0x07D1B3F9, 0x017EC8A4, 0x0B981466, 0x2E908650,
	0x0ED1826A, 0x2CE2C4E0, 0x02340567, 0x26B520E3, 0x290A21E0, 0x09AD2601, 0x377D2D81, 0x2726C209,
	0x2FDA114C, 0x2AD30158, 0x2E9E3BE2, 0x13A9FD25, 0x07FB6786, 0x0D7F3C9B, 0x3793A12D, 0x2BB4F869,
	0x3478BF3B, 0x24D803EC, 0x24A146BF, 0x295DCC46, 0x1CD62125, 0x219252C4, 0x307AA615, 0x054D1830,
	0x33DA6271, 0x3950F3DC, 0x14A228AA, 0x244D5CCF, 0x067565C8, 0x1F8ED0C2, 0x3B27F87D, 0x313C1584,
	0x3B95B8D2, 0x3ABA8C57, 0x3562735D, 0x1C281CE3, 0x2DB3DDF0, 0x1A9C85CA, 0x197C828D, 0x00AF2051,
	0x02B6ACB0, 0x1C844466, 0x1F0723DD, 0x2C0FD6A9, 0x145770FD, 0x0E3C810D, 0x27CBEF89, 0x19385A09,
	0x0C830374, 0x1CBF0562, 0x095991F3, 0x2C563976, 0x349090F4, 0x082D0D39, 0x36F06815, 0x2F5FF61F,
	0x0C389137, 0x25A18FAA, 0x39AE5D42, 0x17179160, 0x11671704, 0x376654D5, 0x063195D0, 0x06709D23,
	0x1C63BD39, 0x14027B7B, 0x0B67F49A, 0x2E868C0E, 0x2B554457, 0x3B812975, 0x16B36523, 0x373AF430,
	0x1582549A, 0x088C57E9, 0x1C7B906F, 0x24C0D509, 0x08CC9AF7, 0x18C404FB, 0x0777D11F, 0x1E87514B,
	0x0C83775E, 0x387EFB9D, 0x12608A4F, 0x100C8F02, 0x27362003, 0x0060F748, 0x2A54CDE8, 0x0E10A281,
	0x1CCC9030, 0x2F5E71FA, 0x0303EB7D, 0x32E319AD, 0x22A8479C, 0x39768216, 0x17812395, 0x2EF21E9E,
	0x1C1747B8, 0x0811A636, 0x2C8FF372, 0x2D0E6081, 0x01A850EF, 0x0075F1A4, 0x013D4A3F, 0x189131AC,
	0x33EB5A56, 0x214AE72C, 0x00164CB3, 0x01D93673, 0x05610F10, 0x372AB815, 0x247620F4, 0x09E2A17B,
	0x1E10003D, 0x09290D06, 0x1E629269, 0x24A3D6EF, 0x2F666487, 0x238FCE2B, 0x075AF5D2, 0x022E00C8,
	0x3B61D710, 0x20B43ECA, 0x1F7AB66B, 0x39D695D6, 0x1AF7F487, 0x15B0702C, 0x01E5A98A, 0x3844F5AF,
	0x2ED4EB2A, 0x289B82DD, 0x2FBA0F1F, 0x032D3934, 0x015C9F5F, 0x2418B52A, 0x0C86C8C0, 0x027D9817,
	0x17582BCF, 0x0181B469, 0x2BF8B247, 0x18A4ECA7, 0x1C33A639, 0x1B26D25C, 0x2378907B, 0x1EBE7209,
	0x37A4A07C, 0x0A325774, 0x3A159904, 0x30538E84, 0x361594EF, 0x1A735A87, 0x0CE4B0FC, 0x184CA359,
	0x1D602B92, 0x3A33A57D, 0x204DD99E, 0x2FEF666C, 0x0FD98A90, 0x1B9D04D5, 0x165E230A, 0x16845DEB,
	0x278642BF, 0x273D95DE, 0x393E88C5, 0x26D5BD9A, 0x2563696F, 0x0C46D1C9, 0x094F3090, 0x2A3D89E2,
	0x361EEB9B, 0x179ECBCD, 0x3AC4DACF, 0x1D87496A, 0x37A4BE23, 0x2312D525, 0x35CCAFD2, 0x0604836F,
	0x16820B22, 0x0551CD08, 0x01905B80, 0x151683F2, 0x05D6B60B, 0x3809923F, 0x156E40E6, 0x0720E557,
	0x15BEDED6, 0x1162C3AC, 0x1F95D9C9, 0x02DC03BB, 0x32FD2B9B, 0x2DBD8F19, 0x07CA181C, 0x22582E83,
	0x231D805B, 0x151B1613, 0x2E1EE699, 0x38E9409F, 0x1C6A8850, 0x319E2189, 0x21C65652, 0x1AA18EBD,
	0x142A5E02, 0x332198BC, 0x0112DA1B, 0x39DD1DB9, 0x27D3A9BA, 0x1ACFA7B0, 0x08C5F0D3, 0x09BF36AD,
	0x2362EEA1, 0x36230BB8, 0x229218CE, 0x1FC3FD79, 0x343EF948, 0x3A88CC26, 0x0618165E, 0x253F5384,
	0x09A6FC36, 0x15818F84, 0x0DA3EC7B, 0x0A67062E, 0x38A4C5A1, 0x14B72785, 0x1C84BEC1, 0x0B4A1730,
	0x0A13A1F5, 0x0F8CE08B, 0x364C1217, 0x2A824376, 0x350AF4B1, 0x1CFF4AEA, 0x35B1389B, 0x08813C44,
	0x09A1EA62, 0x3869E70D, 0x2A127C5E, 0x0DA57C60, 0x1F04C8C5, 0x17C50E45, 0x1AAEB957, 0x2418DEA3,
	0x12184313, 0x0B817F53, 0x2974D227, 0x0E685103, 0x18B2DE3E, 0x01661AE7, 0x3A0C5E98, 0x1BA9DECC,
	0x14E8227E, 0x266EADBD, 0x106A44E9, 0x23BC8B46, 0x1D64A902, 0x3AE130AD, 0x26A4D35B, 0x08CB1EB6,
	0x0AD1CA74, 0x297D9023, 0x2451E498, 0x37702DBE, 0x3687129B, 0x0AA9E16D, 0x05E61D9B, 0x3A1A4348,
	0x30B65596, 0x00FA264B, 0x0C2C6B94, 0x33AA53AE, 0x069BF69C, 0x27814C2E, 0x184976DD, 0x23C2FACA,
	0x1E098118, 0x1945AA6A, 0x22DD568F, 0x04E47202, 0x1EF35EAD, 0x2773E918, 0x0A288D3F, 0x23052475,
	0x226633DF, 0x336117D6, 0x204F996A, 0x0B1B70FA, 0x2FC09A6E, 0x1C50F472, 0x3326C5F2, 0x348BA223,
	0x2B1D9F92, 0x2EFF77DB, 0x26BFA729, 0x0C71D4DE, 0x00372583, 0x1BD42D27, 0x1FDE7FAD, 0x38ECEA02,
	0x36BA7FA6, 0x2DAC4E58, 0x2F842564, 0x39C51977, 0x3B316C96, 0x37E99C79, 0x0F5D8194, 0x1816BE92,
	0x2DB4772C, 0x3485376E, 0x0A1F4CAE, 0x021B3C7D, 0x2AA8B8E5, 0x024A6874, 0x10B2EC97, 0x1AAD44E1,
	0x0D8E4AE6, 0x038702CD, 0x1BB77688, 0x22F8C9F0, 0x2F396BD2, 0x266A6E6C, 0x241B8B30, 0x01F6D3C5,
	0x0C3E07FF, 0x39D52002, 0x00CD06D1, 0x0FC9BB03, 0x1E366534, 0x142321A9, 0x2DC55D96, 0x16773724,
	0x1722C7FA, 0x39206196, 0x15D97B73, 0x1C5DF15A, 0x0AC2896B, 0x0C688141, 0x2A7EC935, 0x2D72E0B9,
	0x37410B38, 0x1D4E6AFE, 0x3967B473, 0x0F961498, 0x13EB7357, 0x304D0408, 0x0E25E819, 0x32597D34,
	0x206F4ED0, 0x0AB3E51C, 0x2A3CA194, 0x1A96C17C, 0x24BDE18C, 0x15DBC462, 0x004BB1A3, 0x389F7305,
	0x256103E0, 0x1C3196D6, 0x0FDF290E, 0x08C67675, 0x25D0F33F, 0x1492BE7F, 0x182B0513, 0x0ACA016C,
	0x28DA8AD3, 0x2AED4FED, 0x24783E19, 0x2E828660, 0x070F2EAE, 0x0A989512, 0x187E05F3, 0x1B3056A3,
	0x2816A72D, 0x2F3CD948, 0x0B96A303, 0x25FFE0E5, 0x1B476024, 0x0285F168, 0x1E54C306, 0x30D04F6B,
	0x372A5A36, 0x18BDAEFA, 0x383CB89C, 0x3404E1C5, 0x12F1C11E, 0x072A2EF5, 0x04511DFC, 0x2DA72F3B,
	0x134B55D0, 0x20B6A208, 0x03920610, 0x0524F008, 0x35EB5C5D, 0x082CF041, 0x2B162790, 0x13451048,
	0x0E2C4144, 0x0EAAEA2E, 0x14939F3A, 0x29DDBD88, 0x3B2F0E8C, 0x29DB724E, 0x0C2939C7, 0x1CD677FB,
	0x0A55D1CF, 0x21F82EAD, 0x0652B24E, 0x30F01D5F, 0x0CAFC570, 0x11D412CE, 0x1C1CC234, 0x257D3079,
	0x24ADBEFD, 0x14CE406B, 0x30AD1FE7, 0x18712805, 0x307ED5E8, 0x1D1BAF37, 0x34BF1AB9, 0x1CE614B2,
	0x29E0BBA7, 0x08CF5534, 0x22ED7F26, 0x0D58DB19, 0x053F2851, 0x23228076, 0x3752029A, 0x25018087,
	0x34198859, 0x37078A80, 0x2D6C99AB, 0x0EC6ADEB, 0x2C06D4D8, 0x0F8A6443, 0x34206931, 0x3A7648BD,
	0x071116B2, 0x3B0A5574, 0x0B6C843F, 0x07EFAF4E, 0x01445140, 0x20D15F69, 0x34E40E05, 0x3059E02A,
	0x0BF4A77C, 0x035631E5, 0x147C8C86, 0x1B45960C, 0x149C874E, 0x0F4855C5, 0x17D3AAD9, 0x08F7DB8A,
	0x1F8CB6F5, 0x2F372344, 0x2EB6AB3F, 0x0913718B, 0x2419BA24, 0x33434302, 0x06A3D792, 0x303E5236,
	0x0A6CC836, 0x06E7E699, 0x18066E87, 0x35D035A7, 0x332FF773, 0x1A8373F6, 0x176D7604, 0x142FBD60,
	0x09B54AEB, 0x05E79A61, 0x0D85326D, 0x1D523234, 0x177F2C75, 0x35264A86, 0x17F20D91, 0x08592461,
	0x0F033FD2, 0x0F4D14FE, 0x0D56DA88, 0x25D9382B, 0x00CE680D, 0x1189DCAF, 0x37195D83, 0x13A655D0,
	0x191C3A2B, 0x1B3235D7, 0x1EB542FC, 0x0851233E, 0x23804A77, 0x033ADC5B, 0x12A38548, 0x0DE0ECF9,
	0x104D5081, 0x21C34A14, 0x0EEBD009, 0x388D0C23, 0x26B221D1, 0x2440AAA6, 0x045162A6, 0x24C867F6,
	0x09E452F1, 0x0010CD7E, 0x2F8F1DD9, 0x23CA4AAB, 0x17B92AB2, 0x37E54761, 0x34A0CE16, 0x03210061,
	0x0424F0FC, 0x0EA2A2DC, 0x03F6D003, 0x349F2AC4, 0x0D58611D, 0x08BF8380, 0x114526B6, 0x2560885A,
	0x2D76B103, 0x1A1BA2B2, 0x1891B899, 0x37AE2944, 0x289A6D1A, 0x0C4F6DCA, 0x0964A97D, 0x0B1F2D4E,
	0x260CB43B, 0x206D87E1, 0x25360BD7, 0x24FD57AA, 0x2ECB8D43, 0x0838795E, 0x2846CE6D, 0x19B28D29,
	0x1C4F9B4A, 0x18EB0352, 0x0CC3B932, 0x25DED04F, 0x0B098E50, 0x2CC9E394, 0x2B99E82F, 0x33CE4238,
	0x215089DD, 0x35E8CEC9, 0x1BB646A6, 0x2DBB8B97, 0x33741C44, 0x1186CA35, 0x2B48029C, 0x2DEFF6EA,
	0x1DA02BB7, 0x2AD86C67, 0x2476F764, 0x3B23C603, 0x0F686108, 0x350B08C3, 0x2AE7DF00, 0x1517684B,
	0x199A91D8, 0x06B3B45B, 0x20F7E0CD, 0x28BCD99B, 0x15A19868, 0x0668205F, 0x1DE39747, 0x33695BF9,
	0x36E3184F, 0x2859A708, 0x3AB7C3FD, 0x2216C520, 0x0B16B027, 0x179691EB, 0x2988A9B0, 0x17B32F39,
	0x15326216, 0x016D5939, 0x0B08F9E5, 0x04B6EBD8, 0x0B0664C8, 0x37B3DCD6, 0x1C1B667A, 0x303DD05A,
	0x2A3D512F, 0x2880896E, 0x24F36E90, 0x0E4CA458, 0x22DCABAC, 0x32C912FD, 0x050AE3B2, 0x3620E4E7,
	0x21D9CB5E, 0x239B6BB3, 0x278ADB0A, 0x20B11C91, 0x1AE9DAFF, 0x2F85C0DE, 0x3411A755, 0x38DF0A47,
	0x36732F66, 0x05600368, 0x1D9B70AA, 0x02650B15, 0x3972222E, 0x014F6BB1, 0x32495CAB, 0x3AE0EB79,
	0x342EED3B, 0x301352EF, 0x22842906, 0x2E787C22, 0x1E5EC916, 0x345B0DE4, 0x382BE987, 0x2FBF10D6,
	0x35085934, 0x27189346, 0x19CA4C6C, 0x069B11CB, 0x215EE464, 0x142D95EE, 0x1010746D, 0x217C0B46,
	0x382501A2, 0x34230234, 0x2B32BA2B, 0x01A7DC30, 0x0060D1FE, 0x36E81B5A, 0x29822404, 0x1DAD726A,
	0x14B49976, 0x223AC87E, 0x0469679C, 0x394F62BD, 0x37817F13, 0x01B4FC9A, 0x355AD87C, 0x29FB673D,
	0x1211591E, 0x19F72E0D, 0x14F48ECD, 0x02BA191E, 0x398CE896, 0x0D1D7EFE, 0x301F5A98, 0x0381A732,
	0x29059BBE, 0x39948D6A, 0x121CDCB1, 0x3530A981, 0x145E77D4, 0x2490EB38, 0x27460897, 0x301203FA,
	0x085A1D14, 0x1B89B09C, 0x2B874134, 0x24DE63CF, 0x23A883D5, 0x31455868, 0x25A7505F, 0x12116422,
	0x16D658B0, 0x0D617721, 0x04D03359, 0x03544802, 0x1E4FD928, 0x169A5E19, 0x045BC4FA, 0x04DCB55A,
	0x23B8680F, 0x3300FDE1, 0x3956D50A, 0x347F4D18, 0x178C7FF8, 0x0EA07A5C, 0x287F221E, 0x39DA0ECB,
	0x236C2CE0, 0x1B98A266, 0x1F0E147B, 0x32DA06B0, 0x3A4095C1, 0x1F12DFEF, 0x00A0B88A, 0x2E8DBAC1,
	0x2DE1AD75, 0x14E52D2D, 0x172FC4FA, 0x2532F557, 0x20DA6DD0, 0x13D6F79A, 0x2BF73435, 0x307A19E3,
	0x36F58955, 0x2865E3F4, 0x2ECFC5D4, 0x146A5550, 0x0F4B4055, 0x21C05738, 0x01A41C49, 0x12EEFA68,
	0x091CA197, 0x0E094B0F, 0x2FC499D9, 0x386EA7E1, 0x120F538D, 0x1B09E114, 0x2F5B9532, 0x0C0E8735,
	0x35FC11F8, 0x378341F0, 0x066C43EC, 0x0E566629, 0x23943033, 0x113C0B05, 0x10C753D4, 0x0B01C86B,
	0x01AB8FCD, 0x2A932E7D, 0x041BCE14, 0x00A1BAD2, 0x1E03CB12, 0x0A2041AF, 0x2CB3644A, 0x096F5046,
	0x0674C8BE, 0x078B5B0A, 0x17EE8ECF, 0x1C5A4A60, 0x0606778D, 0x19833A24, 0x2F7107FA, 0x233C64E0,
	0x0E5A62DB, 0x36BFD82B, 0x10F2B103, 0x2B9FFAA9, 0x0D3DEA0C, 0x11127862, 0x39F18BC8, 0x005936A2,
	0x14E2507C, 0x2AF4473A, 0x0DBC641A, 0x0679E687, 0x0AE04D83, 0x023DEA0E, 0x2A47539A, 0x0090A261,
	0x153C44F1, 0x0DF6C97D, 0x34E6FF96, 0x14FCAE0E, 0x2231143D, 0x02DD3BFE, 0x0A315854, 0x08F61E9C,
	0x1ABE6922, 0x0533797E, 0x32FCBC5D, 0x2EC30FBE, 0x106ACC5A, 0x06DA7E63, 0x0949221A, 0x0D9CAD11,
	0x03C6DC03, 0x24C74E2C, 0x00E9CE5D, 0x021CC4B5, 0x22B0C80A, 0x3B39BB51, 0x0128A49D, 0x075AE9DC,
	0x22095F28, 0x3780ECC9, 0x1986B795, 0x331852DB, 0x157B8DAC, 0x0B20394C, 0x2F4F30D3, 0x25822541,
	0x0C9C10EE, 0x17706202, 0x2414F802, 0x22F9577B, 0x18AFEFC0, 0x08506BCD, 0x261354B5, 0x379064B5,
	0x0D6F0F81, 0x1087B6D4, 0x11431487, 0x23FB5BB7, 0x05F66E48, 0x2CB037F1, 0x21043777, 0x164BA57C,
	0x36081084, 0x018E1AA7, 0x0CD4C660, 0x1A8850C1, 0x10ACD9DF, 0x3816E179, 0x2ACBE505, 0x214C1A9C,
	0x1437EFEA, 0x2148E713, 0x1F43189B, 0x082C1FF0, 0x38387BE1, 0x384E3259, 0x391122CA, 0x3393C468,
	0x2F0614F9, 0x102577D7, 0x3AFC958C, 0x37833531, 0x2888E88B, 0x2C4D9387, 0x2D8F6B19, 0x142FF9D5,
	0x0D9B9C0D, 0x1AD2A7A5, 0x158C72AE, 0x3A7B0A85, 0x050C9C6E, 0x1A269C12, 0x29403BC7, 0x1F15647F,
	0x223C0DAA, 0x390B7FA1, 0x3A126743, 0x2C0F7DDF, 0x06EFC9B9, 0x0815492E, 0x3808701E, 0x0299C058,
	0x1ED9C993, 0x1D82D3EC, 0x062C9B90, 0x362BE6C0, 0x23F3139E, 0x3AB0E768, 0x391CD51E, 0x0458C23F,
	0x0B7BBE78, 0x36DBF57A, 0x286AA329, 0x2DBA99F8, 0x3A93AD31, 0x3AC06D3F, 0x03B19B87, 0x104F6149,
	0x0F793A31, 0x3611FB39, 0x35FCA5B0, 0x292E72B9, 0x249B9AD7, 0x2125C6EA, 0x0D0EEDAB, 0x312D9760,
	0x2C1FC403, 0x23A25D1A, 0x1A8BB826, 0x215A18C3, 0x170F99B1, 0x1106A9E0, 0x280B0B50, 0x28903215,
	0x0EC0CEC1, 0x2A6F8C53, 0x096AE4F8, 0x0C91815B, 0x0E4218D2, 0x00DC7FAE, 0x2C289CC0, 0x36F58E96,
	0x27CB2324, 0x029D75C3, 0x229392D5, 0x3B68CF72, 0x30EFD72F, 0x19F80760, 0x37E63934, 0x2169DDF1,
	0x27DC456C, 0x256356A8, 0x35D8257D, 0x25E9CA13, 0x330BA660, 0x38C4C5B7, 0x3449A76E, 0x3A3D7AEA,
	0x1468B371, 0x14C5ABCE, 0x0826D5A8, 0x0FE9AF4E, 0x272748ED, 0x043B5E4D, 0x1F293D50, 0x065EEBE8,
	0x0D2F9F91, 0x3142AFB7, 0x19B7452A, 0x162A5A7E, 0x2CABA3D0, 0x04D15183, 0x1251570B, 0x13DBE755,
	0x0D72DF2E, 0x107BF89B, 0x185E24CF, 0x095C689F, 0x294F4999, 0x17CCC264, 0x163A56D9, 0x2AE1D164,
	0x188F6218, 0x12E5B607, 0x28C5A78E, 0x20D5E8BF, 0x2CFFDC76, 0x2790AB94, 0x07E82BA9, 0x306BFD68,
	0x02CD3F21, 0x0200FAD5, 0x3A407BF2, 0x1D4693A7, 0x26E01C3D, 0x1DEE23C1, 0x2D2F3186, 0x3356FF36,
	0x1344C50D, 0x38DAB296, 0x12FEF6DD, 0x267A6978, 0x0587AE0A, 0x37F3A8C7, 0x18934738, 0x03DBED31,
	0x16AF2BB2, 0x36119F6F, 0x0C24D9F3, 0x1A7CA70F, 0x3782A90E, 0x11459A23, 0x06B107E0, 0x1263F01C,
	0x3A308602, 0x1ADB7A81, 0x28F04B97, 0x0F4D75E3, 0x174DBB44, 0x0888AC2C, 0x1F8F56BB, 0x05EB42B1,
	0x30094D5D, 0x17C4BFA2, 0x2BAA08CB, 0x0EA44888, 0x26AC650F, 0x03845579, 0x096CC208, 0x1EF290BE,
	0x1C1445C6, 0x166E8B31, 0x2461270E, 0x28336337, 0x2ED68C8F, 0x346310F3, 0x3ABC7786, 0x359CBC8F,
	0x236AFFCF, 0x293F73C5, 0x334E12C8, 0x39757F2C, 0x091DDC55, 0x1AC0C10A, 0x1976F967, 0x04B06379,
	0x2CD565E5, 0x0D80D002, 0x0EE078BE, 0x0EF489DF, 0x0368A3B9, 0x2CABCAB1, 0x346757B6, 0x088B011C,
	0x025EECB5, 0x0157D4BC, 0x344657FD, 0x14CB0B53, 0x1095B521, 0x2405C226, 0x35600FAB, 0x0349B736,
	0x00233A44, 0x04B670CF, 0x2A3B0BCB, 0x0B78404C, 0x2F6925E3, 0x213C9770, 0x3B551B8C, 0x2E13BE48,
	0x2AA247A2, 0x09A571F2, 0x1EC16CA0, 0x1AA0B829, 0x1CDBA1F5, 0x0DABBBF8, 0x31809FB0, 0x17040A54,
	0x0A5F0A1B, 0x0DAF77AE, 0x15235BB4, 0x01CD5EA1, 0x16D87839, 0x37D04855, 0x1FBDEB9E, 0x365BD9CF,
	0x31F814F1, 0x2A280FDC, 0x0E7B6F14, 0x115EBD35, 0x1BEE8587, 0x27D43AAB, 0x2B0BB176, 0x146D9A44,
	0x1AA8DA8C, 0x22262C57, 0x0D42BF16, 0x2E402768, 0x0F44401B, 0x34DDAD22, 0x2D90CE7E, 0x309F01D0,
	0x0F27CA13, 0x1CB2BE06, 0x3ADCCB26, 0x16E4AD53, 0x227C3A79, 0x183565E6, 0x119738C7, 0x03E03664,
	0x1C38BC29, 0x156001CD, 0x18A72B51, 0x0EEB2E2F, 0x0724A803, 0x34ED708C, 0x33FEB54E, 0x1D6EDD7F,
	0x18406AB3, 0x12112764, 0x1718DEBA, 0x2468C616, 0x0CABAB6C, 0x280E897C, 0x34CCE15E, 0x24CE1B0D,
	0x267D5876, 0x07CF96E5, 0x16FA74DB, 0x282B080B, 0x1AFA7A7A, 0x02E085F6, 0x2ED4A2CF, 0x041B31F5,
	0x11DC0A00, 0x006C13F2, 0x0A45DAA7, 0x2D78C75E, 0x3B0C7D0E, 0x00B11AAE, 0x2C16EA38, 0x3ABFF76C,
	0x2CD7FE6C, 0x1815E710, 0x312D7CB5, 0x300FDA61, 0x23922C17, 0x28FDA629, 0x3A72B908, 0x31EA7FBA,
	0x0CF6C79E, 0x1CF69A51, 0x2081CCA1, 0x0C535631, 0x01A76FAD, 0x2394F42A, 0x1C06A680, 0x1A9A5147,
	0x21DFB101, 0x078AE06E, 0x0A06893F, 0x16514AFE, 0x1A264157, 0x2B8C21B3, 0x1A6B4CBA, 0x12325357,
	0x2F84C446, 0x3982E491, 0x3813231D, 0x2BA3D818, 0x0B3D90A6, 0x26A76CA2, 0x33D0F04F, 0x1F0F3369,
	0x323C6A04, 0x36E7BE92, 0x290AFA35, 0x36142AB5, 0x2914E551, 0x132DF3B1, 0x32073CC8, 0x1E3A808B,
	0x2C49FF9C, 0x3691A6C0, 0x32DB1EEC, 0x114D9E67, 0x0E84AAC0, 0x0A8B758E, 0x0E33660F, 0x1F094DF0,
	0x1DDBC3E5, 0x0481AE66, 0x2CC88929, 0x1F2582F7, 0x07CB7B33, 0x041E710D, 0x10AFA826, 0x260F2E0C,
	0x1E8DB373, 0x13F16E84, 0x18AA8586, 0x346C419F, 0x22F57FFA, 0x3529C45A, 0x222BFF60, 0x34B907DD,
	0x1B30B69E, 0x19B938A3, 0x06A5876D, 0x1FB5CD51, 0x1FA0CF17, 0x38ACB023, 0x2B6F021B, 0x342EAE22,
	0x09391721, 0x07FE0C02, 0x01567E09, 0x0A9F2580, 0x2B78C371, 0x3485F22F, 0x2A5E06B2, 0x0919B9B5,
	0x0F03073D, 0x07468494, 0x2672EA26, 0x2F7843F7, 0x0F2A3B1E, 0x2286B71B, 0x16CDED10, 0x25F1FDD3,
	0x094AFC56, 0x32295882, 0x0D229E7C, 0x0E31E3CA, 0x2530F168, 0x0359AE21, 0x0F0FC5F9, 0x0E5D1269,
	0x0EF64D46, 0x36B90337, 0x2385829D, 0x1653CE75, 0x1DF08441, 0x3225FF88, 0x1D8D2EF2, 0x02B4C67C,
	0x28476A34, 0x29837498, 0x304B4EFE, 0x1321F763, 0x165116E8, 0x0BD9881C, 0x37063785, 0x38B693D2,
	0x20CDF556, 0x09DCE1B0, 0x0EF94593, 0x057EE4C2, 0x22A68251, 0x02A00C86, 0x141A76DC, 0x2A82B53F,
	0x22424C05, 0x353A8F8A, 0x2428CC2B, 0x05245155, 0x02E3612B, 0x2D1CE687, 0x2A352F78, 0x07B59F6A,
	0x2AAE51A7, 0x1405C81C, 0x22124E63, 0x37553DB0, 0x231ECDE2, 0x0CEB930B, 0x3189F60C, 0x36FE8466,
	0x26D4E67F, 0x185EEBB3, 0x1D90F7A8, 0x1F9F8409, 0x02B63983, 0x2656ECD8, 0x2A234846, 0x119BB795,
	0x09B441BB, 0x04ED045D, 0x12053359, 0x04654A72, 0x328AF41F, 0x31B1CE05, 0x2C20E2DA, 0x2584F2E8,
	0x332CE302, 0x2750ACC3, 0x099A5418, 0x2EBA6DCD, 0x00DD94FB, 0x1637810B, 0x2920C224, 0x3A81A08B,
	0x1961729F, 0x086B4717, 0x1AE4546F, 0x0E16F537, 0x077117D9, 0x23066E66, 0x37644ADB, 0x2050D12D,
	0x2EB51152, 0x2D2BE82E, 0x1C646F37, 0x13114C64, 0x329E05C1, 0x0E80236C, 0x1C651BEE, 0x3A260740,
	0x0885DD3A, 0x0FC9DF5F, 0x0E699789, 0x10DD1D0E, 0x0B225060, 0x3707B2F5, 0x346EF9A9, 0x1766C2F8,
	0x29873087, 0x1A9AF4D3, 0x083A5AC2, 0x276FA5FC, 0x0A4C7C27, 0x1AEFD45E, 0x20DAFD05, 0x22E45E4A,
	0x1D713C67, 0x0C363E9F, 0x370AEC3A, 0x0C9AB7C5, 0x2D1A13BA, 0x1D1EEF63, 0x14C44F78, 0x0A22D92D,
	0x1B0D4C8E, 0x3A87233F, 0x32DC0457, 0x32130870, 0x01D4E194, 0x309A7D3F, 0x1AF8E8E0, 0x3A53CCD4,
	0x3596A74E, 0x3AD054E1, 0x2B88C495, 0x096E84DF, 0x01A92E83, 0x1973A030, 0x296D714A, 0x249E7803,
	0x2A11E100, 0x3B538B9F, 0x2996F5B4, 0x29FA4E14, 0x2628B920, 0x2A421630, 0x0CF80F46, 0x0E19EDA6,
	0x3804392D, 0x166C1B5B, 0x2CFEA793, 0x359EA840, 0x08CC8E9C, 0x2C9BBCCD, 0x2913508A, 0x221E9346,
	0x0A51B0B1, 0x163FF8F4, 0x2095A4E6, 0x06D504B0, 0x366AAC82, 0x0A5DFB20, 0x133B54D6, 0x24ABC616,
	0x1E81E712, 0x2E4FDD84, 0x20AB8F89, 0x17B8361F, 0x33B37F3A, 0x15082E21, 0x0853280B, 0x133364FF,
	0x2FCF7DA4, 0x02741085, 0x2C6F14EA, 0x388D5798, 0x2F512D55, 0x09FAE835, 0x0F8F5D47, 0x07DF292C,
	0x2780537C, 0x1DE04D0E, 0x351B91B8, 0x2AC2F6CA, 0x359251E2, 0x0A4BA248, 0x00CA95C3, 0x2617D1FA,
	0x25FCFA5C, 0x2CFB6D61, 0x38C114EA, 0x3522FA59, 0x2F2D87BB, 0x17EC84AA, 0x2F721C64, 0x0C9965F0,
	0x0581092F, 0x04E5DCEC, 0x1B044C7E, 0x23A1ED93, 0x16867F31, 0x2D8479CA, 0x23C5DFBE, 0x0F5A2259,
	0x21222441, 0x056E6793, 0x06A7B3C5, 0x3B102BDF, 0x12296BA6, 0x3A82B55C, 0x144F896C, 0x0C68860C,
	0x1A6E5C27, 0x3B217426, 0x0454149B, 0x01217FD8, 0x185A0EA5, 0x1A6E65BE, 0x18F40804, 0x1137A084,
	0x263C743E, 0x1B8B98A3, 0x25D6647D, 0x15ACE412, 0x1C208E8C, 0x1AD51C8C, 0x39F4DAE6, 0x1AB2E308,
	0x1746AA58, 0x0859DDB2, 0x2E052CD6, 0x2E5D8B5A, 0x3757B389, 0x356C1592, 0x2A0A807C, 0x065EB17E,
	0x110F9BDC, 0x19CB3AC1, 0x315BD2DE, 0x3A247274, 0x10AB0A4F, 0x226CF2EC, 0x378C809D, 0x038FA88D,
	0x090DCADC, 0x1C4E7633, 0x0CEFB2F7, 0x1E5A9DFB, 0x13BBB97D, 0x2F3AC359, 0x19592D5D, 0x250489CC,
	0x3B3A99BA, 0x2A04516E, 0x255C2313, 0x07A2756D, 0x2F945052, 0x38768B37, 0x3140BB49, 0x175D2BF5,
	0x38D78AFD, 0x1E9DF25B, 0x30A9C3C3, 0x1D6F6A71, 0x2C408367, 0x2C0C1629, 0x07EBAA8F, 0x08599C1E,
	0x362205F2, 0x0E992E03, 0x06A421B1, 0x17669A1F, 0x2A5F1F5C, 0x0B5CFAFA, 0x224F038B, 0x2CBC08B6,
	0x0508F784, 0x2D6AA838, 0x328D76DF, 0x0FBA9265, 0x38CCC209, 0x2EED645F, 0x2D8800AE, 0x38140CFF,
	0x10F31608, 0x075F1B70, 0x0AF02879, 0x0F600FD0, 0x326779B7, 0x04059950, 0x30977B1A, 0x1B8E7597,
	0x102A5535, 0x25278C9D, 0x33E0FD6B, 0x305DEDA3, 0x0DC1F803, 0x14CE02EA, 0x2DCBA26B, 0x024E5CC4,
	0x0FE59886, 0x2686E1F5, 0x1A79884F, 0x2E357675, 0x33C397C6, 0x3B57CF44, 0x0C55327D, 0x07EF9704,
	0x2470B4A4, 0x153106F8, 0x0D02B1BB, 0x09B55DAB, 0x08960873, 0x09012D3E, 0x2144AA3F, 0x20836B0B,
	0x05D6E28C, 0x2E7FDA03, 0x12CEA5E7, 0x014E9B79, 0x28A923A1, 0x3074D61C, 0x1605D877, 0x21578FC6,
	0x2DA8A9C6, 0x281C1D78, 0x04953EDA, 0x115DF89C, 0x2B73DA89, 0x0DF45DFA, 0x1920A174, 0x2D79CC05,
	0x28CD0599, 0x0E64D10B, 0x2D032BFD, 0x3588A334, 0x24970FD7, 0x2D525FCD, 0x2B710D8B, 0x2296F2A5,
	0x097AA44C, 0x11E499E6, 0x1521DC4D, 0x15D9B711, 0x0A970B7C, 0x0404D669, 0x150F0515, 0x14371E8F,
	0x37E7348B, 0x1759F2FD, 0x064545F5, 0x02DF8ADF, 0x396FB03B, 0x150A6B38, 0x12E775E3, 0x330ABBBD,
	0x0C35B4A7, 0x2E82FC6A, 0x3A6A5627, 0x1766ECB6, 0x12868DF3, 0x0A87AA02, 0x202D1F10, 0x2E4BA933,
	0x32309036, 0x2104F915, 0x2E8CB94E, 0x1C3FA7E9, 0x3B972A82, 0x08FE3240, 0x3249D148, 0x3896A537,
	0x357ACB9B, 0x037A31EE, 0x2011172A, 0x3A9F5C3D, 0x29AD672B, 0x291BA7BC, 0x11778CF0, 0x22024DF9,
	0x265BA6F4, 0x03736CA7, 0x2E22B919, 0x2B5C01C8, 0x17739747, 0x096C6534, 0x01F2799C, 0x36978199,
	0x04A1A2BD, 0x39A92B7D, 0x3B28CAD0, 0x30BCDA68, 0x3B3C3C61, 0x2A10AEA3, 0x2AC7789A, 0x310F2060,
	0x38AC7F55, 0x2D740719, 0x337F9FD0, 0x35C354EC, 0x0AD77F83, 0x060098CB, 0x05C3ECDD, 0x230AFFB1,
	0x1531B4FE, 0x1182EC6D, 0x09A54701, 0x16B7B904, 0x30E3D982, 0x07926060, 0x06B273A4, 0x1F077D87,
	0x2292DAE3, 0x28400A5A, 0x380B4054, 0x3008913C, 0x0FD44724, 0x2F4B506D, 0x33347081, 0x3827E915,
	0x015E55FD, 0x39084E06, 0x23B8CA14, 0x27843911, 0x35CE18EE, 0x05028B65, 0x04EFDDD3, 0x16FED2AF,
	0x2E0E6FF1, 0x30C7660B, 0x001D28C1, 0x13689926, 0x2061A760, 0x1CDAC2A7, 0x2D66C28A, 0x2788C299,
	0x300449F0, 0x28DD50A5, 0x224356CB, 0x05EE1BE2, 0x031C4A8A, 0x3668AB19, 0x1F44D221, 0x16A41A75,
	0x1BA8FC6D, 0x327C49EF, 0x0C00A31D, 0x2EFAD231, 0x30F3E598, 0x0DD8ECCB, 0x22C613B0, 0x134E1522,
	0x03DC87F9, 0x36A9DCF2, 0x3476FBC8, 0x2384AC15, 0x10D3C13D, 0x1BFD023A, 0x2403FF81, 0x33E8F954,
	0x32B42146, 0x29D58DF2, 0x0729750C, 0x318CDE50, 0x102F4ADA, 0x3A811B8D, 0x258C5266, 0x0BE212BB,
	0x11232C66, 0x1BC60213, 0x0BBD5F56, 0x19D3FF1C, 0x2E7E3B21, 0x1AC9D76F, 0x03389E07, 0x137D5D44,
	0x11B74240, 0x1E4C2DB5, 0x1F3856D0, 0x1E0AA74D, 0x030F52B1, 0x0C4DF9C3, 0x2100D0CF, 0x248E9293,
	0x393913F6, 0x079B51E1, 0x038D17B0, 0x1A0E9D31, 0x236F9A64, 0x054C5943, 0x0B6892A3, 0x27018B82,
	0x0EAB2BF6, 0x2EFB8F6F, 0x1B92DA7F, 0x384F0227, 0x15C9CB69, 0x3501F489, 0x30B2F45F, 0x17CB99B6,
	0x366D5F1C, 0x2E2298FB, 0x0863BAFB, 0x2B7CB4F6, 0x17E080AD, 0x2A4218F3, 0x216FD909, 0x1C3789BB,
	0x202B4164, 0x1865AD1B, 0x02744086, 0x2584740C, 0x0C562F0F, 0x35CE8138, 0x2FA77944, 0x30DCFF07,
	0x0FD68A1E, 0x12C576C9, 0x060CA56C, 0x0EE02A93, 0x229C98C1, 0x0C8042CB, 0x27533185, 0x01A7B8CF,
	0x1B27C453, 0x12EBCD49, 0x1D525376, 0x0B432E7F, 0x3B6BBC88, 0x1C35943D, 0x02011398, 0x1D84E06A,
	0x38B204B6, 0x094A4FF7, 0x346B553B, 0x381FA815, 0x28731A9A, 0x0C9CB9CF, 0x3B511E00, 0x12E3D124,
	0x117FC1E5, 0x269C9201, 0x160C5568, 0x1F12237C, 0x39859EA3, 0x22F1594C, 0x3206F1F7, 0x057ED176,
	0x1A69634E, 0x2E27E9DA, 0x0DC3AF2E, 0x3370D60C, 0x2350277B, 0x360E6695, 0x1B2C830D, 0x2AE54E83,
	0x301E22AD, 0x1A625731, 0x18DDD662, 0x38073931, 0x1C5C3DCE, 0x35453BEA, 0x1C96A9E1, 0x1D888C21,
	0x204BC9BC, 0x2A7644AF, 0x328E6D64, 0x16B1692C, 0x15E3DB62, 0x24C8CEA5, 0x2C8E318F, 0x1404B36A,
	0x11DB5704, 0x0F3FF18D, 0x242E8063, 0x218B722E, 0x17595D4B, 0x2E27ADE8, 0x16C3C6D4, 0x1FB27261,
	0x2935945D, 0x2BEA6CCC, 0x1990A5D4, 0x17F8602F, 0x1504483B, 0x03E9B359, 0x2B8A07C1, 0x030EF621,
	0x29A3ECED, 0x30381DFC, 0x09AB4773, 0x34E1EA63, 0x0F473670, 0x145E6318, 0x39880902, 0x32DB4C24,
	0x38958F73, 0x0661F3D3, 0x33997E13, 0x0DF9621B, 0x0BA7D830, 0x37C59951, 0x03B23D47, 0x16916289,
	0x1A3C6963, 0x0A96ACE7, 0x16528BAA, 0x0129C03C, 0x37E4C63B, 0x00483359, 0x06C8DD89, 0x182124AE,
	0x0924F8DB, 0x27C147F1, 0x38BD034A, 0x1453B76E, 0x232E51A6, 0x2ADE366F, 0x16FE30BB, 0x07942DFD,
	0x0B246F9A, 0x1D5375E5, 0x0C688610, 0x2319287B, 0x16F48476, 0x1383C578, 0x1405FB28, 0x0F3C1A46,
	0x15886076, 0x200E874E, 0x0C526D9F, 0x2D9115E9, 0x35334A54, 0x3423D6CA, 0x30E0DEE8, 0x15C935F1,
	0x0D6F39A8, 0x102DD004, 0x0040B9F0, 0x3B2E308A, 0x07C84719, 0x238174C9, 0x1B76A859, 0x1961C885,
	0x27DE98B7, 0x341229DF, 0x23A3EE45, 0x16B64F7A, 0x08C04B0E, 0x3AE5EA67, 0x39858B0C, 0x322CD127,
	0x25AB23AE, 0x360E193F, 0x00D638DA, 0x2D8B5197, 0x0D5FA4DB, 0x0E561DA1, 0x0E9DC0B6, 0x06669E1D,
	0x2286CC3C, 0x395B2DF6, 0x36E6FEBA, 0x1D2E1784, 0x1B47883D, 0x2D8018AC, 0x38EE1502, 0x2F10E7FB,
	0x28ED792D, 0x2FD995AB, 0x1068D4C8, 0x32B6753D, 0x068F962E, 0x29E87392, 0x10F6BBF8, 0x0A7DA17C,
	0x25E4425D, 0x2D85B1C2, 0x2AD70F68, 0x1140D6EB, 0x2A8AFFDA, 0x2ADCF942, 0x30928AF2, 0x05FDADE1,
	0x28CA67B0, 0x00D15EF2, 0x1825DBD1, 0x16504565, 0x038307D9, 0x0D5CCE5F, 0x1611D415, 0x05F5B3A7,
	0x2491993A, 0x2A560B01, 0x306F3153, 0x1891EE39, 0x36C62D80, 0x3A6B5BFB, 0x0C247639, 0x38E8FFE9,
	0x1D8D383A, 0x2506570A, 0x216E918B, 0x147FFD6C, 0x0A247879, 0x0DCC4C08, 0x145246DC, 0x0590C3ED,
	0x2506F8A0, 0x0F0B2148, 0x159BBA98, 0x2EE4C950, 0x0DDD929A, 0x192C59D7, 0x175908BA, 0x2DD12FAD,
	0x1AFC6CC5, 0x03CD7638, 0x10E251E8, 0x07DF523F, 0x3850D2D6, 0x3ADFA75F, 0x23C10BBC, 0x39EDA21D,
	0x28BD40AA, 0x2EDD8612, 0x18B1CA9C, 0x199AA1AC, 0x2986C3F1, 0x0B707605, 0x357AFAB3, 0x28DD1262,
	0x15EF5954, 0x192AE5F2, 0x29D3B03D, 0x0C5CE42D, 0x2BBC7899, 0x190DAE94, 0x11038A81, 0x02A881E6,
	0x10FDA0F6, 0x2FD463B8, 0x1E94FCA0, 0x071F6E5B, 0x2244ECC8, 0x14A17539, 0x382560E9, 0x2B1107CD,
	0x10DC18DA, 0x11D5F1FD, 0x10595627, 0x273C89BB, 0x1780CD62, 0x2314482F, 0x2A846A29, 0x040C1C6A,
	0x2EBCD9A8, 0x3A811EBB, 0x1D01040F, 0x3278F9F3, 0x2442D72F, 0x18F2AC5E, 0x0680162C, 0x1799AD79,
	0x133BE67F, 0x047D382B, 0x15390C82, 0x21228A70, 0x073D94F5, 0x34DD6A37, 0x3574DE02, 0x178522BE,
	0x07E5E419, 0x3565F22A, 0x23BF4A90, 0x26548045, 0x30BE62AC, 0x0FC68D08, 0x2079379E, 0x15470BE9,
	0x069DD15E, 0x34E93A8C, 0x2B694474, 0x3B4C349A, 0x23A4A4CA, 0x154ED18C, 0x171C6D94, 0x291378FC,
	0x1A7FCED1, 0x0971E9A2, 0x164ED179, 0x0D93C4AD, 0x378FF3C7, 0x35BB3418, 0x22A411EA, 0x0C3AFC88,
	0x2384BCB2, 0x11F13B51, 0x03612172, 0x2B920025, 0x0F3E2067, 0x3080BC46, 0x036E4EF8, 0x21519AB8,
	0x116240F0, 0x31F27733, 0x041136B4, 0x074648EE, 0x22AD916C, 0x3484B434, 0x271B3D80, 0x03DFC53F,
	0x1348836B, 0x027F93EE, 0x18D4AC1E, 0x0C9EC1EB, 0x047A7790, 0x3AC804EA, 0x2B8DE9A3, 0x234EDFA9,
	0x0A87E7A0, 0x270D809B, 0x299D8EE9, 0x2CD08C2A, 0x26FF4859, 0x29D07255, 0x0BE42602, 0x2A2C78AE,
	0x3AA75B61, 0x14E29154, 0x24114635, 0x17B6ACE2, 0x110DDB36, 0x3A43539C, 0x1A3C6705, 0x3B14A7F4,
	0x228467AF, 0x0555CB83, 0x0D2A0A5E, 0x0AA6579A, 0x31EA51ED, 0x125D2114, 0x393E938C, 0x33AA500F,
	0x3765305D, 0x2FFAC4F5, 0x2CBF4653, 0x39008590, 0x199AF9CD, 0x0861EBC8, 0x29412445, 0x3B8AF5D3,
	0x2E00E769, 0x0B8D842E, 0x0EF90975, 0x263FC97B, 0x39E1253D, 0x2D8275A3, 0x37CCA2A0, 0x04C7ABA2,
	0x01A7816A, 0x38A5E595, 0x10A93459, 0x29BA24E7, 0x1C3EF611, 0x2188FF31, 0x2AE0411B, 0x3942AA88,
	0x2CC6910A, 0x02670829, 0x02AC9BC9, 0x1FC52D0D, 0x09E6265F, 0x361764E3, 0x0D14ED49, 0x2781CBB4,
	0x03EC2264, 0x38311A7C, 0x2484FF42, 0x21AD665B, 0x1156CD5D, 0x15C73FA9, 0x18E81A88, 0x3A8840E7,
	0x2B6FE8F8, 0x19AE4E88, 0x0F357764, 0x34729325, 0x089E6FA9, 0x0866B4CA, 0x103C6609, 0x2B0533A5,
	0x18522AFF, 0x37B4688C, 0x2A6B11BD, 0x13542157, 0x01D7B958, 0x36ED11E1, 0x27530B79, 0x28B0ED4D,
	0x35C4333D, 0x246376C0, 0x2D557DE0, 0x3B346E18, 0x0C056A64, 0x207AFB91, 0x0239D583, 0x1418BA92,
	0x1B9FBE8A, 0x270A13F9, 0x39405147, 0x0C81CB0C, 0x1F4F6F32, 0x177642B3, 0x104F29A1, 0x04ECA89F,
	0x2D78D3BF, 0x2E0530BD, 0x1E963FD5, 0x14E1178E, 0x2A141B40, 0x0E31207B, 0x161125FF, 0x2D1B6826,
	0x19E5C0F8, 0x2C38D68D, 0x35A4C7AB, 0x2FC81099, 0x00488854, 0x05505B75, 0x25C8D60E, 0x022E05F6,
	0x2B89EDBE, 0x03A9E6C5, 0x3AF88DC8, 0x168A4EDD, 0x150C3EB8, 0x2767E251, 0x1A3156AE, 0x2670A352,
	0x2D0ED973, 0x04CFEDD8, 0x20D9C73B, 0x35D0F68D, 0x1282125E, 0x24AD4DE7, 0x0C937F0E, 0x1E1932B8,
	0x2FADBA7C, 0x214B0A52, 0x15C67A8F, 0x2EBDD485, 0x1ACE3A9C, 0x314D3A1F, 0x24E98BFD, 0x3A2DF270,
	0x0E34C1D8, 0x0FA83125, 0x0BB8645A, 0x03FC2D9A, 0x1F196721, 0x3449F0F6, 0x0814DBC2, 0x28D33B04,
	0x1501372D, 0x182DF599, 0x1F816A1A, 0x07DA8FE4, 0x01215155, 0x09475FE6, 0x2435BFA9, 0x3B232399,
	0x1FE21DE4, 0x1B7B989E, 0x27A7AAF6, 0x05C3A15A, 0x2EA6B176, 0x2B2316D0, 0x0861BD01, 0x000736D8,
	0x2A29FEBE, 0x39197DE3, 0x31DC45A3, 0x12B9292E, 0x0F96F05F, 0x15154B06, 0x072AB15B, 0x1A0EDE78,
	0x25D89465, 0x1F6D9FF2, 0x1D94CDAA, 0x2103532C, 0x07F7C414, 0x2FE1CBA7, 0x00DBE358, 0x3B7AFB63,
	0x19B39945, 0x37261BA6, 0x16890725, 0x0DFB09F6, 0x283EE3B3, 0x32A9258D, 0x3B12699B, 0x382BF3E0,
	0x05E09051, 0x185B92E6, 0x20ECCC92, 0x24D7EAA2, 0x24A41C04, 0x36D926D7, 0x197AFEE1, 0x2FF30836,
	0x2E67501A, 0x1914EA5E, 0x13277AB5, 0x20B9D0F2, 0x33107B84, 0x0CC9FFCE, 0x07CC89E7, 0x326ACC1C,
	0x2FBA5B67, 0x01930B86, 0x3AA9E29C, 0x0E50EF32, 0x07DDFD7C, 0x0265A58E, 0x090FDF01, 0x1FF50D64,
	0x1D689A26, 0x11B1194A, 0x1D0A434E, 0x29FD12EE, 0x2E128F1D, 0x064AC334, 0x39AF01A5, 0x1FC28DAE,
	0x1D7C99E7, 0x3298A77A, 0x1F5DD39F, 0x0CEF8E2A, 0x12C2F2DC, 0x119120CA, 0x30D59734, 0x34FD6BB0,
	0x3ABEEB7D, 0x0F284F03, 0x113769E8, 0x1E3B79C5, 0x354292E0, 0x07B23E97, 0x37E9A7B1, 0x11ABAB78,
	0x2D82FB7F, 0x33D44FB6, 0x0307C03D, 0x17E76DA7, 0x182E8C8F, 0x0BB4DD6E, 0x110ED0EC, 0x086C1779,
	0x2E5BF69B, 0x11009A91, 0x233E5E74, 0x05E9D9C9, 0x0CD7F7AC, 0x1E4D6F18, 0x001EBDD4, 0x02DC08D3,
	0x2CC54ADE, 0x03A009B5, 0x19E70414, 0x13674395, 0x227D5F76, 0x2DA9981F, 0x0A34CDAA, 0x20AA42ED,
	0x2A20B12A, 0x2486DA59, 0x0EA1CF9A, 0x1D3E0B52, 0x028EB17C, 0x38D879A2, 0x0D504370, 0x00D7CE51,
	0x2A41581C, 0x3721EFE4, 0x33A10AF6, 0x04762663, 0x13DAC197, 0x0CDA22D5, 0x370F5FE0, 0x1D891286,
	0x17E3FF9B, 0x36E3F95F, 0x2CAA2A96, 0x1BE6ECA9, 0x2427BBCD, 0x35075558, 0x21546DA7, 0x06DA9E42,
	0x3896CE3A, 0x1BB8DE2F, 0x04D47DBD, 0x20F674E8, 0x195CBCA4, 0x2488EC63, 0x246AB9D1, 0x38EA91C0,
	0x3298AE9C, 0x0815CE61, 0x3787B8EA, 0x04386DBB, 0x2032EA4A, 0x2D9511C2, 0x2C2D6E31, 0x364178E5,
	0x05FBCE13, 0x1DBE3A3A, 0x0DD9362E, 0x0FCDEF94, 0x0CD4C3CF, 0x152E0B5A, 0x2667A23C, 0x22FCE760,
	0x2658C7D3, 0x21FBB11E, 0x26A9952B, 0x158DB558, 0x21FE8AEE, 0x35F8FBD4, 0x220FD4FB, 0x244CEDFF,
	0x0018B256, 0x048668EF, 0x2F214909, 0x1F936217, 0x025CB83F, 0x21E48FB2, 0x07ACF45C, 0x163C84AB,
	0x33B98337, 0x28555420, 0x374E3FE3, 0x198133BA, 0x34008C58, 0x18E34572, 0x10E89895, 0x1F4CE286,
	0x33832DF1, 0x035DF239, 0x2F7D9460, 0x1D4D4918, 0x01FC4B10, 0x2227EF74, 0x0318C278, 0x18FBE34D,
	0x0EF80DCE, 0x355D1A9B, 0x09A0C427, 0x3A5DEBFE, 0x3522D896, 0x0411E40C, 0x0D6F6F90, 0x270896BC,
	0x37C470A4, 0x3654493A, 0x10298999, 0x1C10B38B, 0x2C75DE64, 0x11AA2B31, 0x0CA726F5, 0x299C9B42,
	0x283E912B, 0x2B11D86D, 0x0135BB4C, 0x22E54234, 0x04AA5E3D, 0x056728D3, 0x1D666C25, 0x0CA5BA55,
	0x1182673D, 0x06CE4392, 0x118F77F2, 0x318CCC18, 0x0E107347, 0x32C41707, 0x04F0D5F9, 0x36989F8C,
	0x24EB5DFD, 0x02659560, 0x2C85AC9F, 0x115C583C, 0x12E2E7D0, 0x3613C611, 0x3274566B, 0x26F4C5AA,
	0x327268AA, 0x22FC7A75, 0x332D6B20, 0x30FCDC8D, 0x200E4BCA, 0x05BE429B, 0x24537802, 0x1EEE868C,
	0x2E47FFAD, 0x0E321570, 0x1A05B7F1, 0x34210A9F, 0x1601F4CB, 0x3375B640, 0x341FA3AF, 0x3284B0C9,
	0x2BD87EC4, 0x17F65723, 0x04FC39D3, 0x03C39306, 0x1B2E2953, 0x12E6ADFA, 0x1D56B64F, 0x28DB7C9B,
	0x09D7D6F0, 0x04FA80BC, 0x1FF89E1C, 0x1C6993E6, 0x11268ACE, 0x10E7AEC8, 0x3491C144, 0x15E22594,
	0x1C69DFD1, 0x0C7AD339, 0x190DBC0D, 0x1F5AEDB0, 0x0140AB1C, 0x2357D0BE, 0x2AD4424D, 0x0ED9D904,
	0x1802F1CE, 0x0084D400, 0x1A568C5F, 0x23B497F0, 0x20B0C4ED, 0x182895D1, 0x01979E42, 0x2EC15C3F,
	0x1FFFD669, 0x19AD0B05, 0x1F686910, 0x23D7E3A9, 0x18762FA4, 0x2ABA06E8, 0x2ABB07C4, 0x10FE15A9,
	0x2CBF496E, 0x0703A1B2, 0x0D80950C, 0x3839DA00, 0x347DA0AA, 0x3A7ADB38, 0x1943E735, 0x2B884DF2,
	0x08872A10, 0x212B3A6D, 0x1FF4D9D3, 0x0CCD6B2F, 0x1535253F, 0x37EFF59F, 0x232E7841, 0x1BF9C561,
	0x17A43305, 0x127A9453, 0x0B79B1B8, 0x17030F64, 0x3ADDD419, 0x33773C9B, 0x3948C7F4, 0x0EF39648,
	0x2CA1AE1A, 0x2119CBBC, 0x017A088A, 0x149EDA29, 0x181D7BA4, 0x2C1318C7, 0x042E55EA, 0x31CC9C6D,
	0x1D651657, 0x3233C884, 0x2980E547, 0x2BC99397, 0x20C206A4, 0x39F9C049, 0x03725306, 0x0384C1BC,
	0x2C70701E, 0x0ED8E8AD, 0x144EC4B4, 0x2438CCEF, 0x1BFAEFAE, 0x262FF24B, 0x1423946F, 0x2F589323,
	0x17D34677, 0x037321BC, 0x0B204F7B, 0x14B41432, 0x28C89E22, 0x2B28317D, 0x23129408, 0x3693CDEC,
	0x2816D0B0, 0x260077D2, 0x077B9893, 0x31C7D6C7, 0x0CBA1C85, 0x0946B716, 0x02A9070D, 0x25E9D167,
	0x08B50C08, 0x14E90442, 0x027445B8, 0x15547F40, 0x135DB4B5, 0x1120761D, 0x1E200BE7, 0x0B5080BC,
	0x2C9A6F05, 0x137FA406, 0x29693D10, 0x0C22F18F, 0x23BC4F4F, 0x336A1095, 0x3A169361, 0x35D469C2,
	0x30C3B9FB, 0x226C01EE, 0x21A9F1CD, 0x1E239FF5, 0x18921177, 0x1C2537E6, 0x0479F7F2, 0x3AF6EFA8,
	0x2EFBC756, 0x009C5447, 0x0600998B, 0x29A99A18, 0x1BC77FE0, 0x3A04C2FC, 0x1FEA5072, 0x02F233F7,
	0x02ABAA5D, 0x08DBCC94, 0x2468B798, 0x3A2C6346, 0x2A159E7B, 0x28E695EB, 0x1A0607B3, 0x17AE1E97,
	0x2B8913B8, 0x1CDBDC1E, 0x2D8E3112, 0x24A6A5C3, 0x11B84D80, 0x2F838B5D, 0x2EA0DA03, 0x0B47ADF1,
	0x31BE5F75, 0x16F0C8FF, 0x3B9358F6, 0x37BA69C7, 0x02843D53, 0x190E17FE, 0x08B090C0, 0x2C02DEFA,
	0x1CC81164, 0x04DAC0DA, 0x33EF827A, 0x253B3CC8, 0x305AC395, 0x1D5205A9, 0x02AAE4E4, 0x16743F58,
	0x31ECDD90, 0x246F2DB7, 0x21EE1886, 0x246C73C7, 0x2675659F, 0x0CC4AEE7, 0x156128D4, 0x10909E71,
	0x3755469C, 0x2A4681A7, 0x0615DA82, 0x31EB2AB9, 0x2B4B5764, 0x2CDACD89, 0x06611B29, 0x02BEBD9F,
	0x3689E5B0, 0x18F10921, 0x2979A64C, 0x00716D52, 0x32F9D9A7, 0x0D90473E, 0x12841CA5, 0x0A223600,
	0x269D2DB5, 0x0E351F95, 0x1F1EF73B, 0x2C8DB524, 0x1DBADD49, 0x06E1C701, 0x01F2AC04, 0x360B5CC6,
	0x0F183D51, 0x2808FFBF, 0x007B235D, 0x0420D17A, 0x39F5984E, 0x2C6AD376, 0x229C892A, 0x1E809628,
	0x3178F610, 0x207EF2CA, 0x286AA4DE, 0x0F494ECD, 0x095F2C67, 0x32E7997A, 0x35BCA5A5, 0x3ADAB338,
	0x387679CE, 0x377D5184, 0x2455AF8A, 0x053A1AFA, 0x0D9BD699, 0x2E208D59, 0x0D5C7576, 0x11B84109,
	0x2831C6B6, 0x2A78670B, 0x001B9ED9, 0x1C5543D4, 0x0F722776, 0x35F1FFE6, 0x3120E17A, 0x3A15E327,
	0x21991D54, 0x2323CDF5, 0x1DB25D03, 0x1539A252, 0x0586B343, 0x051594B1, 0x2057D539, 0x36F914F4,
	0x059DC5A9, 0x19BC6B7A, 0x10549791, 0x1F4BF560, 0x0E1A1196, 0x225F6094, 0x14B1F5D7, 0x0420C6F7,
	0x301B8DCF, 0x31A3D642, 0x36B292C8, 0x20F6FA00, 0x1C7BDCBD, 0x078E3EAF, 0x399D38EE, 0x1A5C9F44,
	0x348D0132, 0x1F5A7A85, 0x024A8FA7, 0x1B1ABF42, 0x32335E77, 0x078FC2CA, 0x1A006729, 0x0957AC10,
	0x2A52AF5F, 0x0CE35857, 0x1538A4EE, 0x2AB3DE93, 0x093B74E1, 0x0CBE5A70, 0x2058AE84, 0x2A0FA0C2,
	0x31789B92, 0x337E14BA, 0x151968B7, 0x3394FD40, 0x1E001166, 0x1460D550, 0x315522A2, 0x193718BA,
	0x09CA6305, 0x140A36B3, 0x0CAC7641, 0x1B7914F6, 0x3056108A, 0x1D357278, 0x169B8A27, 0x15AA2E59,
	0x058DC790, 0x2C2D4B57, 0x03E0460B, 0x23D43AB2, 0x24D72716, 0x17C4307B, 0x19855142, 0x1BF38919,
	0x20788428, 0x088DC7EE, 0x103F6C9E, 0x1B420B9D, 0x2573576F, 0x25C0C1A8, 0x3129C86C, 0x2B01E751,
	0x1FFA2A9E, 0x0F8EB06E, 0x2BD949E2, 0x32063AA6, 0x3913D35A, 0x07952958, 0x04F5A56D, 0x1B3E2F9C,
	0x20E2232E, 0x0C2FF8FE, 0x1805A60C, 0x20625FA6, 0x0FB0DD6F, 0x13D0DBB2, 0x05B4D529, 0x2F64722B,
	0x087B9CAD, 0x10FEC063, 0x319C7F22, 0x31F1E7D1, 0x29C76919, 0x37B6A93F, 0x2E06B85B, 0x0E46C7FE,
	0x268F8365, 0x09DD5DED, 0x1DE2E902, 0x2E452452, 0x3A8B9007, 0x22252363, 0x01DF72CE, 0x3989A91F,
	0x0E37EC8A, 0x213B5465, 0x39EB90F0, 0x09889474, 0x274BA27A, 0x1A6F694E, 0x183AB79D, 0x0A09C7C5,
	0x20F5D7A7, 0x2A3ADA27, 0x0D55E510, 0x0B434BC5, 0x3338AA13, 0x19ECC86C, 0x14DF201C, 0x16453C60,
	0x01FB3DFC, 0x0A25BB04, 0x2C17513E, 0x3B57394D, 0x16AA54EF, 0x378698FE, 0x3A173D49, 0x29FF0153,
	0x3B2F6C01, 0x3B19C013, 0x1B3850D5, 0x24B36A09, 0x0037F073, 0x0613628A, 0x2569E194, 0x2C3C1DB9,
	0x03FF08D8, 0x12C5A076, 0x1C43A841, 0x2D2DFF3B, 0x37260791, 0x1C901AF4, 0x2741FB10, 0x1CA9A0EF,
	0x05D62BA0, 0x27A5DBEC, 0x2B7504FD, 0x39DA234D, 0x17B6BDE3, 0x131C7A34, 0x044FE0F1, 0x1CBD73EC,
	0x28E6F107, 0x22768000, 0x28D13E0D, 0x23DE18B8, 0x0E10E5E4, 0x2130146C, 0x19B2BE06, 0x1A95FD52,
	0x0D9CCD25, 0x2D178227, 0x32B6C49F, 0x307D0C65, 0x11FC8D18, 0x0DA357FF, 0x26C6807C, 0x2DC55698,
	0x34CCCB8A, 0x30FA208D, 0x3921A480, 0x1493F640, 0x06052B17, 0x0BA2AAB0, 0x32A154E4, 0x1F6E9F59,
	0x053F23EF, 0x2D890217, 0x2D4ED241, 0x2C2BF320, 0x0F7339C0, 0x1E00D391, 0x2D6FEBBA, 0x0C33A4C5,
	0x146BAFE4, 0x1AC12E70, 0x1DEC3328, 0x39D4100D, 0x2A0423F1, 0x07A0C574, 0x2F2F22D1, 0x05B37EDF,
	0x1BB4644F, 0x181C3C9F, 0x1E1C734F, 0x2570D591, 0x38B373F0, 0x0B222231, 0x2580A262, 0x2C795D93,
	0x03CECD67, 0x138427A2, 0x28091861, 0x0EAAAA46, 0x15632608, 0x292816D3, 0x1E87B6CF, 0x16A76C7D,
	0x0839EE53, 0x247DC086, 0x0CA89D79, 0x0BD80481, 0x286DFA73, 0x06331EC8, 0x0DEF3B9E, 0x2222B919,
	0x2AA1447D, 0x0AF0B1C4, 0x00B9BADC, 0x39AB42B1, 0x0AB71980, 0x21128CB2, 0x1CF03D00, 0x31703B6C,
	0x31AE64E3, 0x16C9FA27, 0x0CEEF903, 0x28818F9D, 0x1610FEDD, 0x226041A2, 0x05FEEF81, 0x20D5D1A2,
	0x16220AEC, 0x15CBE549, 0x2CF8C711, 0x3438F7F0, 0x04BB19CE, 0x258309DC, 0x1BA3A336, 0x05993F6B,
	0x1BAE6254, 0x16E8BC1F, 0x33BB5690, 0x01B88A50, 0x155FAD62, 0x391A9B37, 0x2A3E916B, 0x26F815C1,
	0x25DDE599, 0x0F0FBF6B, 0x250A92DE, 0x1BD0A7D4, 0x28C3C4B0, 0x082BE2BF, 0x3388BB40, 0x24A7D5CF,
	0x3194BF3D, 0x26F9C5FA, 0x19E89F4D, 0x1AD614E2, 0x09B0217C, 0x0007E34F, 0x22A1AE79, 0x3789FBAC,
	0x10FC5BA8, 0x2E927D7E, 0x24FD8876, 0x26ABFA73, 0x3A6CD8F2, 0x08296B95, 0x19FB6F86, 0x10C64DAF,
	0x2D054C31, 0x285001DE, 0x208FD1CE, 0x21793314, 0x05672C20, 0x10D28DE2, 0x21CC26D0, 0x0BF956A0,
	0x32A1ED1F, 0x332C1D47, 0x0432680E, 0x39AEEBF1, 0x3A887740, 0x1A366726, 0x26CEFA64, 0x1A16513D,
	0x30FD4214, 0x2CA4BE0C, 0x1B523A56, 0x0681E76B, 0x1BAF98DB, 0x23BE0EBF, 0x37E25F98, 0x158C1149,
	0x1CD9DEF9, 0x33CDC839, 0x1A51BFEB, 0x348E1E27, 0x32BD6DA6, 0x2960ECB5, 0x3AD87318, 0x1B4A5959,
	0x2DF9D9E2, 0x11418A49, 0x16A858B9, 0x1A4D8498, 0x29C4FDEE, 0x269C22DB, 0x0934873A, 0x2588CEF6,
	0x2F8F9FFB, 0x1CAF14AA, 0x2428DCFB, 0x25990F2D, 0x22753627, 0x2B079FD9, 0x382442EE, 0x187A1AE4,
	0x2DC05C1B, 0x381EC989, 0x20CF9530, 0x1D0419E8, 0x334713A6, 0x294D3614, 0x16512890, 0x1C3891B5,
	0x335F0136, 0x109F4A44, 0x0C033043, 0x25C0C34E, 0x3B06B312, 0x199B8508, 0x2B970A13, 0x07BA8AC0,
	0x342E6291, 0x0344712C, 0x1A2FDCBF, 0x0BD6DDE8, 0x32A6A0D4, 0x34502F2B, 0x19298935, 0x3079ADE5,
	0x06D576D5, 0x0F6D8DC2, 0x07B7D7C8, 0x169179A6, 0x0940B28C, 0x25AA8B89, 0x2403EAB1, 0x25317801,
	0x192493B5, 0x0C97DC37, 0x2DB30F5C, 0x1960CE04, 0x05E09CED, 0x1DF81039, 0x15B480DA, 0x1D242663,
	0x0930FEF1, 0x32CF2477, 0x16E08DB1, 0x392AA300, 0x07774C11, 0x388D2F4F, 0x289DB635, 0x2DDC7A8C,
	0x1C9EF4C5, 0x014868CB, 0x0149D417, 0x290ECEC8, 0x1E799BC6, 0x318B43F5, 0x158DF5AA, 0x11776CA8,
	0x29A83FA0, 0x3083819C, 0x1AAEA718, 0x31B8A338, 0x2DEEA0B4, 0x1A84D078, 0x14F5F7C1, 0x330D9ACF,
	0x2984D5DF, 0x23912F4D, 0x01273B16, 0x2BA7D2BB, 0x154ED725, 0x28378857, 0x11D207F6, 0x37EB5F6D,
	0x17083908, 0x03159E3A, 0x2828AD77, 0x0192640C, 0x36A01AB8, 0x17493EAC, 0x30DFADC8, 0x159B5962,
	0x1775DB33, 0x37323408, 0x30E51067, 0x329EAA58, 0x38A53A2E, 0x0F9E2B4B, 0x1D20ED3E, 0x2CE3F883,
	0x196C3516, 0x17115BE6, 0x2A1B34E0, 0x31F364F6, 0x0A156D17, 0x2C77759D, 0x1B62B579, 0x1BD9FF8D,
	0x201046BF, 0x04331767, 0x27FF3A2D, 0x3A6B94CC, 0x185FE3D2, 0x1CE3C367, 0x14F50C8E, 0x0688CE8C,
	0x23091A0D, 0x390FBD30, 0x316C7FBB, 0x2221146A, 0x2DA04A4A, 0x04110902, 0x2375E455, 0x18E338DF,
	0x1CB5C7CD, 0x2003AF71, 0x098919E1, 0x0246A0AD, 0x00F4D1E1, 0x0AD252DB, 0x341A55B4, 0x27E6D34C,
	0x0FB74532, 0x0CCB8974, 0x25EFCC5D, 0x098DA67E, 0x372E2C13, 0x1748DC31, 0x3442FDAD, 0x1DF8DDF7,
	0x050222D6, 0x1EED945F, 0x374512C2, 0x1955077B, 0x09DF79BF, 0x3B202620, 0x173E5E50, 0x056150C6,
	0x0019697C, 0x07E1D21A, 0x130F0AD0, 0x086A48FF, 0x2796295F, 0x1A8AFE35, 0x3430A90F, 0x230B0B3D,
	0x10E7D41F, 0x0A80FF5F, 0x156F9BA0, 0x140B89DD, 0x1DC895CB, 0x2ECF7ABD, 0x2D37ECEA, 0x1B2FBA9F,
	0x2C8FDF55, 0x1B5105FE, 0x16079006, 0x205CC605, 0x34F00FD2, 0x1C862BDF, 0x31FA8F0C, 0x2B08D268,
	0x372DADC6, 0x1E912CE0, 0x16F8409D, 0x0F7CD848, 0x04CF421A, 0x0A708E5C, 0x30525692, 0x240E4DC8,
	0x365E60B9, 0x0340651C, 0x250F2E7B, 0x0D6D0ED2, 0x1E95E0A7, 0x2FD3AB4C, 0x35739A64, 0x00687F64,
	0x1D9A9A33, 0x29349F5F, 0x064708DC, 0x3549AFDF, 0x368A3473, 0x0CABD26F, 0x2A32AA50, 0x10490846,
	0x32645A15, 0x1EA96FF5, 0x376D0D1A, 0x0C1ACB02, 0x23AB9311, 0x1E151A06, 0x193ADDAF, 0x1ACB3C0B,
	0x39F71967, 0x066168E6, 0x19245635, 0x1275F58E, 0x1A727E1C, 0x0A1548E0, 0x39DD1C51, 0x31D9B9E4,
	0x268E1AE2, 0x055EE1E5, 0x0B93B162, 0x2835D17E, 0x02F7C776, 0x282F1027, 0x206A3F09, 0x3708E007,
	0x26FDF7C3, 0x26BA53C2, 0x33B1ED6C, 0x1F0D4F7A, 0x1BC8F768, 0x00201B94, 0x28D7F911, 0x0C9EA860,
	0x0341321E, 0x0253B540, 0x36DECB72, 0x10AF2C4E, 0x1D95CA27, 0x3ACB6384, 0x2F4F81C3, 0x2A0FA556,
	0x2925EFB9, 0x2CA39D6A, 0x2F8C56B3, 0x3AF40E5D, 0x101DD655, 0x07D8B982, 0x2449807B, 0x2FABDBE7,
	0x20795640, 0x2056BFB8, 0x3383E066, 0x029900E8, 0x2320FEF2, 0x2DB5BD42, 0x00EC6BC8, 0x19CC6E3F,
	0x2521D788, 0x0440E6FA, 0x0F49169A, 0x34467B3A, 0x12EBADCD, 0x0619B213, 0x0B5BBFB8, 0x30607598,
	0x35BF0C9D, 0x1EFE6DF9, 0x0608C155, 0x173562DB, 0x2872BA9A, 0x12F27046, 0x32B0EC81, 0x15831933,
	0x22EB54B8, 0x2538E1E1, 0x01632F50, 0x33E9A09F, 0x1D0E4BE2, 0x07482BC4, 0x1993BC5E, 0x1D3EB99C,
	0x06FDFA9F, 0x05CD4081, 0x2CFC0794, 0x060EAB8E, 0x1B1F370C, 0x39C54AD8, 0x1D3701BC, 0x08610547,
	0x01FC6ED0, 0x0DA002F1, 0x158D68DD, 0x3199F407, 0x1597BD1E, 0x0AB8691E, 0x0895B2C2, 0x2FC10674,
	0x1CCE12FE, 0x215595B9, 0x01BB04AD, 0x38A1A7FD, 0x32083AE0, 0x110CCE87, 0x13E637B1, 0x37C73894,
	0x07B27D3A, 0x2AB4A3E6, 0x06BDF100, 0x131CD1CC, 0x057E34A0, 0x30E153CE, 0x140CC8B0, 0x245B27BC,
	0x2ED7AD10, 0x113F74F8, 0x194ADB23, 0x14784681, 0x09100A2A, 0x1F529470, 0x1CA306C1, 0x093EB1AD,
	0x2F63D087, 0x275F7F1F, 0x2812948F, 0x29161BB5, 0x35E94C30, 0x37958BBF, 0x15A21BFE, 0x39B9E022,
	0x3674B482, 0x1FAE6946, 0x395F9C3A, 0x2D265DAD, 0x15A94BEB, 0x1F59B802, 0x20301BEB, 0x2AAD7006,
	0x3423EEB3, 0x2D16CD4A, 0x1343B1EF, 0x23439963, 0x08830525, 0x14453BD2, 0x2D374245, 0x392A349E,
	0x2D95EDD7, 0x0E42E3B9, 0x2F404E6B, 0x26F8379F, 0x1F3CEE4F, 0x209EFBCF, 0x0E2D60F4, 0x2817A6A1,
	0x2732A756, 0x063F8499, 0x326E153F, 0x02AF8958, 0x2F90AAAE, 0x2B51C0B2, 0x0377D388, 0x38C0356C,
	0x2BB7A76C, 0x0C314A8C, 0x27251020, 0x315D007E, 0x29E11987, 0x29B248BC, 0x3B514DDC, 0x2A15916B,
	0x1E00F50E, 0x2C42125E, 0x01BD218D, 0x042A170F, 0x1EA86A1A, 0x2ACAFB5D, 0x165D8BA8, 0x2247F7A5,
	0x1E21CA6D, 0x2C2586F3, 0x2E413E93, 0x1130A7D5, 0x3A58AA71, 0x0DC726A4, 0x13B75CB2, 0x0FF90033,
	0x244A0B6B, 0x001EC5D0, 0x2F91E768, 0x1B3B4F87, 0x1A47E6F2, 0x375B2E39, 0x16285A58, 0x19A224A9,
	0x10112DED, 0x248983D5, 0x2C35E88B, 0x0D5EFF2E, 0x36E989E2, 0x0BE6F779, 0x0FC02C68, 0x17558915,
	0x1DFE18EF, 0x143E0E29, 0x1322E046, 0x074D2EED, 0x3A450E37, 0x0C675FFC, 0x363A03A2, 0x0E45BCD6,
	0x1BC48DA3, 0x32E7D7C7, 0x32D5F6D6, 0x3A794D3D, 0x06EAA86F, 0x174F0021, 0x23B51F9E, 0x15C7312D,
	0x243275B9, 0x378C0F84, 0x157ACED1, 0x2693BA7F, 0x095FC736, 0x0D5B8F06, 0x1F37C735, 0x2269283F,
	0x27BF2229, 0x3500387D, 0x1A954601, 0x1C6BDECE, 0x300F7455, 0x346CD0E6, 0x3A044F7D, 0x352F5C76,
	0x07DF2D28, 0x33B1BC9B, 0x3A2033BA, 0x255FA80E, 0x1E9C5A6D, 0x06E5DA2E, 0x1A362AC2, 0x38D31D8C,
	0x2D5F2F8D, 0x10FA7CC7, 0x121C0D6E, 0x188CFE9C, 0x0DF60EAC, 0x07B20872, 0x05776419, 0x24D8C5B0,
	0x0A01F98C, 0x15F6070E, 0x1C0078BC, 0x0A7D855F, 0x1E0AC10F, 0x065D8BE0, 0x257863B1, 0x2753C398,
	0x06353B67, 0x1FE21074, 0x200C41B5, 0x391973E0, 0x2977E840, 0x318130E0, 0x204C1F14, 0x313F3DA0,
	0x22869998, 0x23C1402F, 0x2A7245A6, 0x02016832, 0x2C7EBC90, 0x25397BDE, 0x3AD72677, 0x1F0CAAA0,
	0x255BDF33, 0x2E64C726, 0x1FFE5BD3, 0x00103D69, 0x282790CE, 0x102248F9, 0x2777F5D2, 0x3357AF31,
	0x0AFACA97, 0x033F6BED, 0x0F7FE8A9, 0x38DCF3D7, 0x00CF1837, 0x0FED00D9, 0x0CC97106, 0x3A76D031,
	0x25FCE600, 0x16E3803F, 0x303B5DA4, 0x1A47BF0E, 0x2D36FED0, 0x13C31EF3, 0x37116F0B, 0x06C11394,
	0x0724D3BA, 0x04EF48F8, 0x0A9AD08E, 0x38572059, 0x0F3BD292, 0x38E14FF3, 0x0B74EA3C, 0x246A7C93,
	0x2A1C04E7, 0x13EF0B3A, 0x0EA0F51E, 0x1DDCD51D, 0x0F3F1670, 0x23CFA9E8, 0x14ADFFA1, 0x29DE84CC,
	0x28BD9C18, 0x08F44BCD, 0x1B80ED0E, 0x05E69D54, 0x3A343981, 0x3595B08D, 0x2652F978, 0x08A73CA5,
	0x0957B276, 0x022EBD85, 0x38C2A36B, 0x22421A0E, 0x32C1D404, 0x15837628, 0x2F79EF1C, 0x018BE6EB,
	0x16F12EDD, 0x1E15E385, 0x2E479E5E, 0x02AFC3BF, 0x01C31120, 0x1238348D, 0x2D390BA9, 0x395B6AEC,
	0x31DD4627, 0x0FC6DFBA, 0x370A6A04, 0x0D98388D, 0x1EA5E058, 0x2F177ED5, 0x259B87BE, 0x061186E6,
	0x1C7D1453, 0x2CC9F6AF, 0x0A474F33, 0x0DD4F3D6, 0x0D60B184, 0x31C9D89B, 0x36F2D97E, 0x2F05D04D,
	0x09C4653D, 0x23191284, 0x141C83C8, 0x29557B24, 0x21DDBCE8, 0x057E4FA2, 0x111611FA, 0x0FBDBE3A,
	0x13F4CD88, 0x2C375A74, 0x01C5DAAD, 0x03673F0B, 0x17F4240F, 0x1B5112ED, 0x263AE203, 0x36E8AF4B,
	0x07D0003A, 0x2272DB39, 0x267DDA31, 0x0F25B3F6, 0x0B853930, 0x244A0E22, 0x37335B03, 0x0F58AAC8,
	0x28AD8104, 0x1991DD19, 0x39DF9C06, 0x190158E1, 0x2FAEF0E3, 0x28B83326, 0x0F137BC5, 0x0B87666A,
	0x1600AC92, 0x25D1DD28, 0x32847DEA, 0x152356D0, 0x25EC05BB, 0x15AC7C1C, 0x1193D9EA, 0x3606BD04,
	0x2A772D7B, 0x338BF2F9, 0x2AF2E427, 0x24CF48DD, 0x35DAB807, 0x0CBAB0FC, 0x31745F95, 0x2B2E450F,
	0x11F88F31, 0x206C3B77, 0x230F5D54, 0x1A4CB9C2, 0x0F4F0D8C, 0x0B130411, 0x11F43F0A, 0x158C6D11,
	0x29ECB8B2, 0x385A540A, 0x25BAC712, 0x1269322D, 0x1DDE89A4, 0x1501DF0A, 0x35F99256, 0x165D08A0,
	0x2C4135A9, 0x03E3ACA2, 0x139F8DD5, 0x1AA98F38, 0x28479158, 0x3B54116F, 0x1C0BE6CE, 0x25F38818,
	0x2603F719, 0x3624C319, 0x37A0A345, 0x123C66CA, 0x2E4181A7, 0x34FB0412, 0x3B0BE2E1, 0x352DBB9C,
	0x1C8955A6, 0x25BCA889, 0x2CEF10D1, 0x04614857, 0x0842259C, 0x1AC2D7FA, 0x0B278D25, 0x251B806E,
	0x2316EBF2, 0x28C70730, 0x0254809E, 0x1E5ED94C, 0x1F22DAF9, 0x03CBE5B5, 0x0947076F, 0x0EE055E7,
	0x1616E383, 0x280AEF6B, 0x2CA79959, 0x20907D60, 0x140C860A, 0x210FD44F, 0x1386DD7D, 0x0A13220A,
	0x26450AE1, 0x1B373A8F, 0x1FD5B8B2, 0x19BBCD90, 0x3133010C, 0x200DB4E3, 0x380C60EC, 0x143BBA34,
	0x247F4CF1, 0x188D1BD5, 0x0E044C41, 0x0CDFFA6E, 0x352E61DE, 0x333937AD, 0x0CC1832F, 0x2089D429,
	0x21F69940, 0x20D3FD5C, 0x05F4DEE5, 0x00A92AB8, 0x130FF03B, 0x2C88DDFE, 0x110DDF96, 0x0C0189A5,
	0x2E5810DF, 0x0B2697B2, 0x06F6E2C2, 0x23BD6766, 0x1603A8F0, 0x19B770F7, 0x1B020506, 0x1DD20A05,
	0x092EDA56, 0x2C09D202, 0x3A0D7477, 0x151306AD, 0x0F914058, 0x353B01AB, 0x0EDBFCAF, 0x1A8387D7,
	0x2219529B, 0x2447E651, 0x327FD80B, 0x2486AA76, 0x21DF9E6F, 0x0655E93A, 0x2CA256A3, 0x2D5D90D5,
	0x093A4466, 0x09208D38, 0x2A258807, 0x1B9286C3, 0x2C307ECB, 0x119D6CAE, 0x1998B8E4, 0x1293F2B7,
	0x25163D26, 0x28AADB90, 0x311FBFA3, 0x13AE4668, 0x1C7B69A5, 0x0F373090, 0x039A7B62, 0x23B59AD3,
	0x3366F81B, 0x219874E1, 0x241961DB, 0x11D831C1, 0x31482C09, 0x0F08387E, 0x0D8447EE, 0x02FE2242,
	0x162B02D7, 0x01CB1854, 0x11EA6EA1, 0x15DCFC4B, 0x10366475, 0x2FAE39C2, 0x05B70CBF, 0x32318117,
	0x25C3FE68, 0x14A7F2B9, 0x07B88830, 0x288E27FC, 0x0425017D, 0x1CCEB500, 0x31002B23, 0x16E3E970,
	0x0E27B923, 0x276F52EC, 0x2A9CF103, 0x2794CF74, 0x1121DB22, 0x2FDA4C92, 0x130A1C99, 0x25718E40,
	0x2DF4C559, 0x355A2896, 0x1F4F8142, 0x317904D5, 0x151FD69E, 0x307708A4, 0x06E55DC1, 0x38961214,
	0x2257F701, 0x17BAF0EE, 0x21244F3C, 0x0F168AFB, 0x13918CBD, 0x07ED670F, 0x12F8408F, 0x32F50A18,
	0x06FDD5EE, 0x2471E97B, 0x3AFEE0FC, 0x245590CE, 0x1BBEBB1E, 0x22B963D4, 0x2C7E02E0, 0x37297413,
	0x2D2C1AF1, 0x2FD1AB56, 0x14D6C01B, 0x1CE45E91, 0x21EEF423, 0x391A9708, 0x35275E38, 0x1C94C709,
	0x0A7E88D7, 0x3A74296E, 0x121321B5, 0x0DF87FEA, 0x000190DF, 0x0506DE17, 0x160B1D2C, 0x38004F8D,
	0x0DA2853A, 0x3A6897E1, 0x046F073E, 0x2362080B, 0x16111524, 0x18052B1B, 0x0315C5BF, 0x2CF8EA04,
	0x14AF3C21, 0x0EA30F61, 0x3A6F07A4, 0x3170C79D, 0x1FD3030C, 0x0AA81E63, 0x21F20B48, 0x0906142F,
	0x1DED697D, 0x2AE8D82C, 0x2652C3FE, 0x0B5E74A7, 0x1F89164D, 0x0128E3F0, 0x22D58C37, 0x2C1FEE78,
	0x08254E40, 0x3A010014, 0x323C3552, 0x285A6E1D, 0x1AD13F55, 0x38565421, 0x148D3131, 0x08CC5DE2,
	0x0852314B, 0x00235D66, 0x002A3908, 0x23D95944, 0x382B1694, 0x01C15D72, 0x0C9C8178, 0x21CEE8E7,
	0x334AB55B, 0x065E6E4C, 0x03460FA3, 0x0158A658, 0x11BE8198, 0x105984AF, 0x2F83B5B5, 0x1840229F,
	0x3914B37B, 0x336ECD4E, 0x14CF289D, 0x1589BA26, 0x0C7B6AE8, 0x2898AABD, 0x34F8AB20, 0x32CD6D66,
	0x2C54185C, 0x01350233, 0x099CCA35, 0x2631002F, 0x345E48C2, 0x340CEE3C, 0x37959B21, 0x2BB9F85F,
	0x11E9CC34, 0x05E34872, 0x384749DA, 0x14318B8D, 0x21E53ACD, 0x3975E5F0, 0x3AEBF25D, 0x036776E2,
	0x20852F4E, 0x0134D6C4, 0x11524B9A, 0x378402D6, 0x373C49B3, 0x22D4477B, 0x18E8C026, 0x3B2F7871,
	0x1A0D2519, 0x031EEF13, 0x1D3F7861, 0x05875336, 0x2F6B9385, 0x2B47823B, 0x10C75399, 0x12E3C29F,
	0x3595F98D, 0x0E7D48C1, 0x2FC439E5, 0x00EBFA8E, 0x2A762095, 0x12494777, 0x080CD32B, 0x28D2F9D4,
	0x1F17B189, 0x05D6D9FD, 0x32E84708, 0x25EAB4BC, 0x2A268689, 0x16C48E2B, 0x3341587A, 0x0CF779B3,
	0x0D6BA477, 0x2A0EEC87, 0x2D2CE5BB, 0x0180DE0E, 0x13710F51, 0x1DB500F9, 0x1C3D1078, 0x24A99409,
	0x3A3F9808, 0x35EA8DC0, 0x3813D0D8, 0x21B0C499, 0x25E23B26, 0x31F9E89B, 0x0F58AF6D, 0x32B2526E,
	0x1C4E7C54, 0x3504B277, 0x201AFD2A, 0x2A29DBEF, 0x1DEB6432, 0x0D1BB503, 0x2EB4299F, 0x1879C7F4,
	0x10263034, 0x08D736D5, 0x29DDFAAC, 0x34CABE46, 0x041024BC, 0x18B8D130, 0x1AE43248, 0x000374B2,
	0x1BBB20BB, 0x0D3D43CB, 0x0F02A81A, 0x0A88382D, 0x129E135B, 0x0AF7C417, 0x1C6EEAAD, 0x0889AB86,
	0x0A11B160, 0x11D6B9A8, 0x37BFD726, 0x29D836D7, 0x122F85DD, 0x03C22F1D, 0x39B13F99, 0x2A6B727B,
	0x28B07136, 0x17DAD57A, 0x0D325D2D, 0x2F3DE04E, 0x15C89755, 0x326CB63B, 0x1487627E, 0x0A4BD7AC,
	0x32A99FB6, 0x17719115, 0x0898F290, 0x057EB109, 0x1BE6AE73, 0x2520D3A3, 0x09757837, 0x184673DC,
	0x190AA562, 0x27A01D14, 0x13C2A10B, 0x309C1649, 0x01937ADE, 0x07164CE1, 0x20AD060A, 0x0EBE96B1,
	0x08576261, 0x19DA64C7, 0x332BAAF5, 0x1B180E74, 0x1255B499, 0x386532EB, 0x1CF7D18F, 0x278D3DB2,
	0x1A3781C4, 0x0842C934, 0x01BF6E8C, 0x1FB391DB, 0x07D841E5, 0x26E55223, 0x0C69CCCB, 0x1AB1F4B1,
	0x3078A5E3, 0x39B1F3D8, 0x0A641264, 0x2A69975D, 0x1DB26566, 0x22C98873, 0x1D36C793, 0x3B82225E,
	0x0E03F81C, 0x2C6AA29F, 0x05880A64, 0x069C7116, 0x01147734, 0x0D25C221, 0x20F89F8B, 0x35A9020A,
	0x23D1271E, 0x30011B27, 0x26BE7890, 0x089A2871, 0x345B6737, 0x184E6A5D, 0x0A171C19, 0x280EFF49,
	0x3A16061C, 0x32CBAEE9, 0x2886008B, 0x293522E4, 0x38526A5D, 0x381259CB, 0x03D16FC6, 0x20AA9E4A,
	0x380EB77A, 0x2EADCE8D, 0x34ACC1AC, 0x26224E1B, 0x306AE6B7, 0x3422EA98, 0x1CA1FBD2, 0x30F0D910,
	0x30F7E96F, 0x2845428A, 0x27042C23, 0x39EA8F15, 0x21D92065, 0x12F33688, 0x119A41A7, 0x2FF492C2,
	0x1A9D3BA1, 0x28EF9576, 0x10D522EF, 0x0D97AF2B, 0x12A3B5A3, 0x1A9FC070, 0x2C5E9124, 0x30696F37,
	0x0D755669, 0x0AE39DE1, 0x083D677A, 0x0B0A643B, 0x38D59F5D, 0x0C411867, 0x0BBE6A74, 0x0752BA40,
	0x35FACD26, 0x1730C7EB, 0x14CEC20A, 0x2F11BBAC, 0x277A0CD7, 0x0557FC24, 0x14F5DE33, 0x137DE085,
	0x2A862E75, 0x31233E75, 0x0FF80C51, 0x16126504, 0x149352DD, 0x36A2FCEE, 0x0A4D0985, 0x1A82DFDF,
	0x039CC1EC, 0x02A24BD6, 0x1677EFCD, 0x1CDEAEAF, 0x24A27323, 0x01FBBFE1, 0x2E6CD03D, 0x1758F57F,
	0x1E99C78E, 0x3578E24A, 0x25438A6C, 0x04A51309, 0x3310E6E7, 0x28D08FD2, 0x32BE4A57, 0x0820F1FD,
	0x0FF72F07, 0x117085EA, 0x33ABABB6, 0x2EB43E10, 0x1A494431, 0x024C8DAC, 0x0E40D700, 0x36A21431,
	0x13B3FB7D, 0x3545D534, 0x007512AD, 0x19935996, 0x187567E6, 0x296CD8CD, 0x1D45C765, 0x0ECBDA3F,
	0x12CE2096, 0x068A9FF9, 0x1CAC37A8, 0x23204087, 0x2C35BDEC, 0x0344369A, 0x103F907E, 0x35860E75,
	0x267D7B30, 0x39CCDD00, 0x0DF52F02, 0x38A77403, 0x13C927E6, 0x05A87B90, 0x2BBF0429, 0x398C5FB9,
	0x1F42E214, 0x24EC7D35, 0x149E4521, 0x00533605, 0x19EB6BEE, 0x38268F57, 0x26EBDF96, 0x2E7B2E7A,
	0x377E56AC, 0x1475C5D0, 0x02144F30, 0x18E1585E, 0x0032A7C7, 0x26F02C94, 0x22D9B422, 0x0F7A9D8C,
	0x0AC0D672, 0x217E27BF, 0x1FCE5BA0, 0x11055556, 0x2C4A34E0, 0x2F3A8987, 0x2992FF07, 0x28C0F46C,
	0x158B3C54, 0x137BBA08, 0x0B139F5E, 0x164A14D0, 0x2E93B082, 0x0CB94601, 0x1283F0F2, 0x1A33F6EA,
	0x2BEB8500, 0x1ABB1188, 0x24A74AE3, 0x1491E3B3, 0x22DD714A, 0x1F97B889, 0x1DF95EC5, 0x3484894F,
	0x1E2D05B5, 0x336905F4, 0x0DA1CCFB, 0x01103B83, 0x0C0220F8, 0x02F2A7D9, 0x15A911F9, 0x01EF8D5C,
	0x1FA6D3CA, 0x00000000,
};

// -- Initialize built-in game offsets databases

// Black Ops 4 SP
std::array<DBGameInfo, 1> GameBlackOps4::SinglePlayerOffsets =
{{
	{ 0x8830120, 0x0, 0x74B8490, 0x0 }
}};

// -- Finished with databases

// -- Begin XModelStream structures

struct GfxStreamVertex
{
	uint8_t Color[4];

	uint16_t UVUPosition;
	uint16_t UVVPosition;

	int32_t VertexNormal;
	int32_t VertexTangent;
};

struct GfxStreamWeight
{
	uint8_t WeightVal1;
	uint8_t WeightVal2;
	uint8_t WeightVal3;
	uint8_t WeightVal4;

	uint16_t WeightID1;
	uint16_t WeightID2;
	uint16_t WeightID3;
	uint16_t WeightID4;
};

struct GfxStreamFace
{
	uint16_t Index1;
	uint16_t Index2;
	uint16_t Index3;
};

// -- End XModelStream structures

// -- Black Ops 4 Pool Data Structure

struct BO4XAssetPoolData
{
	// The beginning of the pool
	uint64_t PoolPtr;

	// The size of the asset header
	uint32_t AssetSize;
	// The maximum pool size
	uint32_t PoolSize;

	// Padding
	uint32_t Padding;

	// The amount of assets in the pool
	uint32_t AssetsLoaded;

	// A pointer to the closest free header
	uint64_t PoolFreeHeadPtr;
};

// Verify that our pool data is exactly 0x20
static_assert(sizeof(BO4XAssetPoolData) == 0x20, "Invalid Pool Data Size (Expected 0x20)");

bool GameBlackOps4::LoadOffsets()
{
	// ----------------------------------------------------
	//	Black Ops 4 pools and sizes, XAssetPoolData is an array of pool info for each asset pool in the game
	//	The index of the assets we use are as follows: xanim (3), xmodel (4), ximage (0x9)
	//	Index * sizeof(BO4XAssetPoolData) = the offset of the asset info in this array of data, we can verify it using the xmodel pool and checking for the model hash (0x04647533e968c910)
	//  Notice: Black Ops 4 doesn't store a freePoolHandle at the beginning, so we just read on.
	//	On Black Ops 4, (0x04647533e968c910) will be the first xmodel
	//	Black Ops 4 stringtable, check entries, results may vary
	//	Reading is: (StringIndex * 16) + StringTablePtr + 16
	// ----------------------------------------------------

	// Attempt to load the game offsets
	if (CoDAssets::GameInstance != nullptr)
	{
		// We need the base address of the BO4 Module for ASLR + Heuristics
		auto BaseAddress = CoDAssets::GameInstance->GetMainModuleAddress();

		// Check built-in offsets via game exe mode (SP)
		for (auto& GameOffsets : SinglePlayerOffsets)
		{
			// Read required offsets (XANIM, XMODEL, XIMAGE, RAWFILE RELATED...)
			auto AnimPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(BaseAddress + GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 3));
			auto ModelPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(BaseAddress + GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 4));
			auto ImagePoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(BaseAddress + GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 0x9));

			// Apply game offset info
			CoDAssets::GameOffsetInfos.emplace_back(AnimPoolData.PoolPtr);
			CoDAssets::GameOffsetInfos.emplace_back(ModelPoolData.PoolPtr);
			CoDAssets::GameOffsetInfos.emplace_back(ImagePoolData.PoolPtr);

			// Verify via first xmodel asset, right now, we're using a hash
			auto FirstXModelHash = CoDAssets::GameInstance->Read<uint64_t>(CoDAssets::GameOffsetInfos[1]);
			// Check
			if (FirstXModelHash == 0x04647533e968c910)
			{
				// Validate sizes
				if (
					AnimPoolData.AssetSize == sizeof(BO4XAnim) &&
					ModelPoolData.AssetSize == sizeof(BO4XModel) &&
					ImagePoolData.AssetSize == sizeof(BO4GfxImage))
				{
					// Verify string table, otherwise we are all set
					CoDAssets::GameOffsetInfos.emplace_back(BaseAddress + GameOffsets.StringTable);
					// Read and apply sizes
					CoDAssets::GamePoolSizes.emplace_back(AnimPoolData.PoolSize);
					CoDAssets::GamePoolSizes.emplace_back(ModelPoolData.PoolSize);
					CoDAssets::GamePoolSizes.emplace_back(ImagePoolData.PoolSize);
					// Return success
					return true;
				}
			}
			// Reset
			CoDAssets::GameOffsetInfos.clear();
		}

		// In debug, print the info for easy additions later!
		#if _DEBUG
		// Attempt to locate via heuristic searching
		auto DBAssetsScan = CoDAssets::GameInstance->Scan("48 89 5C 24 ?? 57 48 83 EC ?? 0F B6 F9 48 8D 05 ?? ?? ?? ??");
		auto StringTableScan = CoDAssets::GameInstance->Scan("48 8B 53 ?? 48 85 D2 74 ?? 48 8B 03 48 89 02");

		// Load info and verify
		auto GameOffsets = DBGameInfo(
			// Resolve pool info from LEA
			CoDAssets::GameInstance->Read<uint32_t>(DBAssetsScan + 0x10) + (DBAssetsScan + 0x14),
			// We don't use size offsets
			0,
			// Resolve strings from LEA
			CoDAssets::GameInstance->Read<uint32_t>(StringTableScan + 0x12) + (StringTableScan + 0x16),
			// We don't use package offsets
			0
		);
		
		// Format the output
		printf("Heuristic: { 0x%X, 0x0, 0x%X, 0x0 }\n", (GameOffsets.DBAssetPools - BaseAddress), (GameOffsets.StringTable - BaseAddress));
		#endif

		// All Bo4 Updates require a tool update

//		// Check that we had hits
//		if (DBAssetsScan > 0 && StringTableScan > 0)
//		{
//			// Load info and verify
//			auto GameOffsets = DBGameInfo(
//				// Resolve pool info from LEA
//				CoDAssets::GameInstance->Read<uint32_t>(DBAssetsScan + 0x10) + (DBAssetsScan + 0x14),
//				// We don't use size offsets
//				0,
//				// Resolve strings from LEA
//				CoDAssets::GameInstance->Read<uint32_t>(StringTableScan + 0x12) + (StringTableScan + 0x16),
//				// We don't use package offsets
//				0
//			);
//
//			// In debug, print the info for easy additions later!
//#if _DEBUG
//			// Format the output
//			printf("Heuristic: { 0x%X, 0x0, 0x%X, 0x0 }\n", (GameOffsets.DBAssetPools - BaseAddress), (GameOffsets.StringTable - BaseAddress));
//#endif
//
//
//			// Read required offsets (XANIM, XMODEL, XIMAGE)
//			auto AnimPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 3));
//			auto ModelPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 4));
//			auto ImagePoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 0x9));
//
//			// Apply game offset info
//			CoDAssets::GameOffsetInfos.emplace_back(AnimPoolData.PoolPtr);
//			CoDAssets::GameOffsetInfos.emplace_back(ModelPoolData.PoolPtr);
//			CoDAssets::GameOffsetInfos.emplace_back(ImagePoolData.PoolPtr);
//
//			// Verify via first xmodel asset, right now, we're using a hash
//			auto FirstXModelHash = CoDAssets::GameInstance->Read<uint64_t>(CoDAssets::GameOffsetInfos[1]);
//
//			// Check
//			if (FirstXModelHash == 0x04647533e968c910)
//			{
//				// Validate sizes
//				if (
//					AnimPoolData.AssetSize  == sizeof(BO4XAnim) && 
//					ModelPoolData.AssetSize == sizeof(BO4XModel) && 
//					ImagePoolData.AssetSize == sizeof(BO4GfxImage))
//				{
//					// Verify string table, otherwise we are all set
//					CoDAssets::GameOffsetInfos.emplace_back(GameOffsets.StringTable);
//
//					// Read and apply sizes
//					CoDAssets::GamePoolSizes.emplace_back(AnimPoolData.PoolSize);
//					CoDAssets::GamePoolSizes.emplace_back(ModelPoolData.PoolSize);
//					CoDAssets::GamePoolSizes.emplace_back(ImagePoolData.PoolSize);
//
//					// Return success
//					return true;
//				}
//			}
//		}
	}

	// Failed
	return false;
}

bool GameBlackOps4::LoadAssets()
{
	// Prepare to load game assets, into the AssetPool
	bool NeedsAnims = (SettingsManager::GetSetting("showxanim", "true") == "true");
	bool NeedsModels = (SettingsManager::GetSetting("showxmodel", "true") == "true");
	bool NeedsImages = (SettingsManager::GetSetting("showximage", "false") == "true");
	bool NeedsRawFiles = (SettingsManager::GetSetting("showxrawfiles", "false") == "true");

	/*
		This was implemented as a fix for a specific user who requested it, as the search box is capped at 32767 by Windows
		and this is a workaround, if you're interested in using it, any hashes in this filters file will be ignored on load,
		essentially acting as an excluder, consider it a hidden feature with no support as it was made for a specific use
		case. If you cannot get it to work, do not ask me.
	*/
	auto Filters = WraithNameIndex();
	Filters.LoadIndex("package_index\\bo4_filters.wni");

	// Check if we need assets
	if (NeedsAnims)
	{
		// Parse the XAnim pool
		CoDXPoolParser<uint64_t, BO4XAnim>((CoDAssets::GameOffsetInfos[0]), CoDAssets::GamePoolSizes[0], [Filters](BO4XAnim& Asset, uint64_t& AssetOffset)
		{
			// Mask the name as hashes are 60Bit
			Asset.NamePtr &= 0xFFFFFFFFFFFFFFF;

			// Check for filters
			if (Filters.NameDatabase.size() > 0)
			{
				// Check for this asset in DB
				if (Filters.NameDatabase.find(Asset.NamePtr) != Filters.NameDatabase.end())
				{
					// Skip this asset
					return;
				}
			}

			// Validate and load if need be
			auto AnimName = Strings::Format("xanim_%llx", Asset.NamePtr);

			// Check for an override in the name DB
			if (AssetNameCache.NameDatabase.find(Asset.NamePtr) != AssetNameCache.NameDatabase.end())
				AnimName = AssetNameCache.NameDatabase[Asset.NamePtr];

			// Make and add
			auto LoadedAnim = new CoDAnim_t();
			// Set
			LoadedAnim->AssetName = AnimName;
			LoadedAnim->AssetPointer = AssetOffset;
			LoadedAnim->Framerate = Asset.Framerate;
			LoadedAnim->FrameCount = Asset.NumFrames;
			LoadedAnim->AssetStatus = WraithAssetStatus::Loaded;
			// Add
			CoDAssets::GameAssets->LoadedAssets.push_back(LoadedAnim);
		});
	}

	if (NeedsModels)
	{
		// Parse the XModel pool
		CoDXPoolParser<uint64_t, BO4XModel>((CoDAssets::GameOffsetInfos[1]), CoDAssets::GamePoolSizes[1], [Filters](BO4XModel& Asset, uint64_t& AssetOffset)
		{
			// Mask the name as hashes are 60Bit
			Asset.NamePtr &= 0xFFFFFFFFFFFFFFF;

			// Check for filters
			if (Filters.NameDatabase.size() > 0)
			{
				// Check for this asset in DB
				if (Filters.NameDatabase.find(Asset.NamePtr) != Filters.NameDatabase.end())
				{
					// Skip this asset
					return;
				}
			}

			// Validate and load if need be
			auto ModelName = Strings::Format("xmodel_%llx", Asset.NamePtr);

			// Check for an override in the name DB
			if (AssetNameCache.NameDatabase.find(Asset.NamePtr) != AssetNameCache.NameDatabase.end())
				ModelName = AssetNameCache.NameDatabase[Asset.NamePtr];

			// Make and add
			auto LoadedModel = new CoDModel_t();
			// Set
			LoadedModel->AssetName = ModelName;
			LoadedModel->AssetPointer = AssetOffset;
			LoadedModel->BoneCount = (Asset.NumBones + Asset.NumCosmeticBones);
			LoadedModel->LodCount = Asset.NumLods;
			LoadedModel->AssetStatus = WraithAssetStatus::Loaded;
			// Add
			CoDAssets::GameAssets->LoadedAssets.push_back(LoadedModel);
		});
	}

	if (NeedsImages)
	{
		// Parse the XModel pool
		CoDXPoolParser<uint64_t, BO4GfxImage>((CoDAssets::GameOffsetInfos[2]), CoDAssets::GamePoolSizes[2], [Filters](BO4GfxImage& Asset, uint64_t& AssetOffset)
		{
			// Mask the name as hashes are 60Bit
			Asset.NamePtr &= 0xFFFFFFFFFFFFFFF;

			// Check for filters
			if (Filters.NameDatabase.size() > 0)
			{
				// Check for this asset in DB
				if (Filters.NameDatabase.find(Asset.NamePtr) != Filters.NameDatabase.end())
				{
					// Skip this asset
					return;
				}
			}

			// Validate and load if need be
			auto ImageName = Strings::Format("ximage_%llx", Asset.NamePtr);

			// Check for an override in the name DB
			if (AssetNameCache.NameDatabase.find(Asset.NamePtr) != AssetNameCache.NameDatabase.end())
				ImageName = AssetNameCache.NameDatabase[Asset.NamePtr];

			// Check for loaded images
			// if (Asset.GfxMipsPtr != 0)
			{
				// Make and add
				auto LoadedImage = new CoDImage_t();
				// Set
				LoadedImage->AssetName = ImageName;
				LoadedImage->AssetPointer = AssetOffset;
				LoadedImage->Width = (uint16_t)Asset.LoadedMipWidth;
				LoadedImage->Height = (uint16_t)Asset.LoadedMipHeight;
				LoadedImage->Format = (uint16_t)Asset.ImageFormat;
				LoadedImage->AssetStatus = WraithAssetStatus::Loaded;
				// Add
				CoDAssets::GameAssets->LoadedAssets.push_back(LoadedImage);
			}
		});
	}

	// Success, error only on specific load
	return true;
}

std::unique_ptr<XAnim_t> GameBlackOps4::ReadXAnim(const CoDAnim_t* Animation)
{
	// Verify that the program is running
	if (CoDAssets::GameInstance->IsRunning())
	{
		// Prepare to read the xanim
		auto Anim = std::make_unique<XAnim_t>();

		// Read the XAnim structure
		auto AnimData = CoDAssets::GameInstance->Read<BO4XAnim>(Animation->AssetPointer);

		// Copy over default properties
		Anim->AnimationName = Animation->AssetName;
		// Frames and Rate
		Anim->FrameCount = AnimData.NumFrames;
		Anim->FrameRate = AnimData.Framerate;

		// Check for viewmodel animations
		if ((_strnicmp(Animation->AssetName.c_str(), "viewmodel_", 10) == 0) || (_strnicmp(Animation->AssetName.c_str(), "vm_", 3) == 0))
		{
			// This is a viewmodel animation
			Anim->ViewModelAnimation = true;
		}
		////// Check for additive animations
		////if (AnimData.AssetType == 0x6)
		////{
		////	// This is a additive animation
		////	Anim->AdditiveAnimation = true;
		////}
		////// Check for looping
		////Anim->LoopingAnimation = (AnimData.LoopingFlag > 0);

		// Read the delta data
		auto AnimDeltaData = CoDAssets::GameInstance->Read<BO4XAnimDeltaParts>(AnimData.DeltaPartsPtr);

		// Copy over pointers
		Anim->BoneIDsPtr = AnimData.BoneIDsPtr;
		Anim->DataBytesPtr = AnimData.DataBytePtr;
		Anim->DataShortsPtr = AnimData.DataShortPtr;
		Anim->DataIntsPtr = AnimData.DataIntPtr;
		Anim->RandomDataBytesPtr = AnimData.RandomDataBytePtr;
		Anim->RandomDataShortsPtr = AnimData.RandomDataShortPtr;
		Anim->NotificationsPtr = AnimData.NotificationsPtr;

		// Bone ID index size
		Anim->BoneIndexSize = 4;

		// Copy over counts
		Anim->NoneRotatedBoneCount = AnimData.NoneRotatedBoneCount;
		Anim->TwoDRotatedBoneCount = AnimData.TwoDRotatedBoneCount;
		Anim->NormalRotatedBoneCount = AnimData.NormalRotatedBoneCount;
		Anim->TwoDStaticRotatedBoneCount = AnimData.TwoDStaticRotatedBoneCount;
		Anim->NormalStaticRotatedBoneCount = AnimData.NormalStaticRotatedBoneCount;
		Anim->NormalTranslatedBoneCount = AnimData.NormalTranslatedBoneCount;
		Anim->PreciseTranslatedBoneCount = AnimData.PreciseTranslatedBoneCount;
		Anim->StaticTranslatedBoneCount = AnimData.StaticTranslatedBoneCount;
		Anim->NoneTranslatedBoneCount = AnimData.NoneTranslatedBoneCount;
		Anim->TotalBoneCount = AnimData.TotalBoneCount;
		Anim->NotificationCount = AnimData.NotificationCount;

		// Copy delta
		Anim->DeltaTranslationPtr = AnimDeltaData.DeltaTranslationsPtr;
		Anim->Delta2DRotationsPtr = AnimDeltaData.Delta2DRotationsPtr;
		Anim->Delta3DRotationsPtr = AnimDeltaData.Delta3DRotationsPtr;

		// Set types, we use quata for BO4
		Anim->RotationType = AnimationKeyTypes::QuatPackingA;
		Anim->TranslationType = AnimationKeyTypes::MinSizeTable;

		// Black Ops 4 doesn't support inline indicies
		Anim->SupportsInlineIndicies = false;

		// Return it
		return Anim;
	}
	// Not running
	return nullptr;
}

std::unique_ptr<XModel_t> GameBlackOps4::ReadXModel(const CoDModel_t* Model)
{
	// Verify that the program is running
	if (CoDAssets::GameInstance->IsRunning())
	{
		// Read the XModel structure
		auto ModelData = CoDAssets::GameInstance->Read<BO4XModel>(Model->AssetPointer);

		// Prepare to read the xmodel (Reserving space for lods)
		auto ModelAsset = std::make_unique<XModel_t>(ModelData.NumLods);

		// Copy over default properties
		ModelAsset->ModelName = Model->AssetName;
		// Bone counts
		ModelAsset->BoneCount = ModelData.NumBones;
		ModelAsset->RootBoneCount = ModelData.NumRootBones;
		ModelAsset->CosmeticBoneCount = ModelData.NumCosmeticBones;

		// Bone data type
		ModelAsset->BoneRotationData = BoneDataTypes::QuatPackingA;

		// We are streamed
		ModelAsset->IsModelStreamed = true;

		// Bone id info
		ModelAsset->BoneIDsPtr = ModelData.BoneIDsPtr;
		ModelAsset->BoneIndexSize = 4;

		// Bone parent info
		ModelAsset->BoneParentsPtr = ModelData.ParentListPtr;
		ModelAsset->BoneParentSize = 1;

		// Local bone pointers
		ModelAsset->RotationsPtr = ModelData.RotationsPtr;
		ModelAsset->TranslationsPtr = ModelData.TranslationsPtr;

		// Global matricies
		ModelAsset->BaseMatriciesPtr = ModelData.BaseMatriciesPtr;

		// Prepare to parse lods
		for (uint32_t i = 0; i < ModelData.NumLods; i++)
		{
			// Read the lod
			auto LODInfo = CoDAssets::GameInstance->Read<BO4XModelLod>(ModelData.ModelLodPtrs[i]);
			// Create the lod and grab reference
			ModelAsset->ModelLods.emplace_back(LODInfo.NumSurfs);
			// Grab reference
			auto& LodReference = ModelAsset->ModelLods[i];

			// Set distance
			LodReference.LodDistance = LODInfo.LodDistance;

			// Set stream key and info ptr
			LodReference.LODStreamKey = LODInfo.LODStreamKey;
			LodReference.LODStreamInfoPtr = LODInfo.XModelMeshPtr;

			// Grab pointer from the lod itself
			auto XSurfacePtr = LODInfo.XSurfacePtr;

			// Skip 8 bytes in materials
			ModelData.MaterialHandlesPtr += 8;
			// Read material handles ptr
			auto MaterialHandlesPtr = CoDAssets::GameInstance->Read<uint64_t>(ModelData.MaterialHandlesPtr);
			// Advance 8 and skip 16 bytes
			ModelData.MaterialHandlesPtr += 0x10;

			// Load surfaces
			for (uint32_t s = 0; s < LODInfo.NumSurfs; s++)
			{
				// Create the surface and grab reference
				LodReference.Submeshes.emplace_back();
				// Grab reference
				auto& SubmeshReference = LodReference.Submeshes[s];

				// Read the surface data
				auto SurfaceInfo = CoDAssets::GameInstance->Read<BO4XModelSurface>(XSurfacePtr);
				// Apply surface info
				SubmeshReference.VertexCount = SurfaceInfo.VertexCount;
				SubmeshReference.FaceCount = SurfaceInfo.FacesCount;
				SubmeshReference.VertexPtr = SurfaceInfo.VerticiesIndex;
				SubmeshReference.FacesPtr = SurfaceInfo.FacesIndex;

				// Assign weight info to the count slots, to save memory
				SubmeshReference.WeightCounts[0] = SurfaceInfo.Flag1;
				SubmeshReference.WeightCounts[1] = SurfaceInfo.Flag2;
				SubmeshReference.WeightCounts[2] = SurfaceInfo.Flag3;
				SubmeshReference.WeightCounts[3] = SurfaceInfo.Flag4;

				// Read this submesh's material handle
				auto MaterialHandle = CoDAssets::GameInstance->Read<uint64_t>(MaterialHandlesPtr);
				// Create the material and add it
				LodReference.Materials.emplace_back(ReadXMaterial(MaterialHandle));

				// Advance
				XSurfacePtr += sizeof(BO4XModelSurface);
				MaterialHandlesPtr += sizeof(uint64_t);
			}
		}

		// Return it
		return ModelAsset;
	}
	// Not running
	return nullptr;
}

std::unique_ptr<XImageDDS> GameBlackOps4::ReadXImage(const CoDImage_t* Image)
{
	// Proxy off
	return LoadXImage(XImage_t(ImageUsageType::DiffuseMap, 0, Image->AssetPointer, Image->AssetName));
}

const XMaterial_t GameBlackOps4::ReadXMaterial(uint64_t MaterialPointer)
{
	// Prepare to parse the material
	auto MaterialData = CoDAssets::GameInstance->Read<BO4XMaterial>(MaterialPointer);

	// Mask the name (some bits are used for other stuffs)
	MaterialData.Hash &= 0xFFFFFFFFFFFFFFF;
	// Allocate a new material with the given image count
	XMaterial_t Result(MaterialData.ImageCount);
	// Clean the name, then apply it
	Result.MaterialName = Strings::Format("xmaterial_%llx", MaterialData.Hash);

	// Check for an override in the name DB
	if (AssetNameCache.NameDatabase.find(MaterialData.Hash) != AssetNameCache.NameDatabase.end())
		Result.MaterialName = AssetNameCache.NameDatabase[MaterialData.Hash];

	// Iterate over material images, assign proper references if available
	for (uint32_t m = 0; m < MaterialData.ImageCount; m++)
	{
		// Read the image info
		auto ImageInfo = CoDAssets::GameInstance->Read<BO4XMaterialImage>(MaterialData.ImageTablePtr);

		// Get Hash and mask it (some bits are used for other stuffs)
		auto ImageHash = CoDAssets::GameInstance->Read<uint64_t>(ImageInfo.ImagePtr + 0x20) & 0xFFFFFFFFFFFFFFF;

		// Get the image name
		auto ImageName = Strings::Format("ximage_%llx", ImageHash);

		// Check for an override in the name DB
		if (AssetNameCache.NameDatabase.find(ImageHash) != AssetNameCache.NameDatabase.end())
			ImageName = AssetNameCache.NameDatabase[ImageHash];

		// Default type
		auto DefaultUsage = ImageUsageType::Unknown;
		// Check 
		switch (ImageInfo.SemanticHash)
		{
		case 0xA0AB1041:
			DefaultUsage = ImageUsageType::DiffuseMap;
			break;
		case 0x59D30D0F:
			DefaultUsage = ImageUsageType::NormalMap;
			break;
		case 0xEC443804:
			DefaultUsage = ImageUsageType::SpecularMap;
			break;
		}

		// Assign the new image
		Result.Images.emplace_back(DefaultUsage, ImageInfo.SemanticHash, ImageInfo.ImagePtr, ImageName);

		// Advance
		MaterialData.ImageTablePtr += sizeof(BO4XMaterialImage);
	}

	// Return it
	return Result;
}

std::unique_ptr<XImageDDS> GameBlackOps4::LoadXImage(const XImage_t& Image)
{
	// Prepare to load an image, we need to rip loaded and streamed ones
	uint32_t ResultSize = 0;

	// We must read the image data
	auto ImageInfo = CoDAssets::GameInstance->Read<BO4GfxImage>(Image.ImagePtr);

	// Calculate the largest image mip
	uint32_t LargestMip = 0;
	uint32_t LargestWidth = 0;
	uint32_t LargestHeight = 0;
	uint64_t LargestHash = 0;

	// Loop and calculate
	for (uint32_t i = 0; i < ImageInfo.GfxMipMaps; i++)
	{
		// Load Mip Map
		auto MipMap = CoDAssets::GameInstance->Read<BO4GfxMip>(ImageInfo.GfxMipsPtr);
		// Compare widths
		if (MipMap.Width > LargestWidth)
		{
			LargestMip = i;
			LargestWidth = MipMap.Width;
			LargestHeight = MipMap.Height;
			LargestHash = MipMap.HashID;
		}
		// Advance Mip Map Pointer
		ImageInfo.GfxMipsPtr += sizeof(BO4GfxMip);
	}

	// Calculate proper image format (Convert signed to unsigned)
	switch (ImageInfo.ImageFormat)
	{
		// Fix invalid BC1_SRGB images, swap to BC1_UNORM
	case 72: ImageInfo.ImageFormat = 71; break;
		// Fix invalid BC2_SRGB images, swap to BC2_UNORM
	case 75: ImageInfo.ImageFormat = 74; break;
		// Fix invalid BC3_SRGB images, swap to BC3_UNORM
	case 78: ImageInfo.ImageFormat = 77; break;
		// Fix invalid BC7_SRGB images, swap to BC7_UNORM
	case 99: ImageInfo.ImageFormat = 98; break;
	}

	// Buffer
	std::unique_ptr<uint8_t[]> ImageData = nullptr;

	// Check if we're missing a hash / size
	if (LargestWidth == 0 || LargestHash == 0)
	{
		// Set sizes
		LargestWidth = ImageInfo.LoadedMipWidth;
		LargestHeight = ImageInfo.LoadedMipHeight;

		// Temporary size
		uintptr_t ImageMemoryResult = 0;
		// We have a loaded image, prepare to dump from memory
		auto ImageMemoryBuffer = CoDAssets::GameInstance->Read(ImageInfo.LoadedMipPtr, ImageInfo.LoadedMipSize, ImageMemoryResult);

		// Make sure we got it
		if (ImageMemoryBuffer != nullptr)
		{
			// Allocate a safe block
			ImageData = std::make_unique<uint8_t[]>((uint32_t)ImageMemoryResult);
			// Copy data over
			std::memcpy(ImageData.get(), ImageMemoryBuffer, ImageMemoryResult);

			// Set size
			ResultSize = (uint32_t)ImageMemoryResult;

			// Clean up
			delete[] ImageMemoryBuffer;
		}
	}
	else
	{
		// We have a streamed image, prepare to extract
		ImageData = CoDAssets::GamePackageCache->ExtractPackageObject(LargestHash, ResultSize);
	}

	// Prepare if we have it
	if (ImageData != nullptr)
	{
		// Prepare to create a MemoryDDS file
		auto Result = CoDRawImageTranslator::TranslateBC(ImageData, ResultSize, LargestWidth, LargestHeight, ImageInfo.ImageFormat);

		// Check for, and apply patch if required, if we got a raw result
		if (Result != nullptr && Image.ImageUsage == ImageUsageType::NormalMap && (SettingsManager::GetSetting("patchnormals", "true") == "true"))
		{
			// Set normal map patch
			Result->ImagePatchType = ImagePatch::Normal_Expand;
		}

		// Return it
		return Result;
	}

	// Failed to load the image
	return nullptr;
}

void GameBlackOps4::LoadXModel(const XModelLod_t& ModelLOD, const std::unique_ptr<WraithModel>& ResultModel)
{
	// Check if we want Vertex Colors
	bool ExportColors = (SettingsManager::GetSetting("exportvtxcolor", "true") == "true");
	// Read the mesh information
	auto MeshInfo = CoDAssets::GameInstance->Read<BO4XModelMeshInfo>(ModelLOD.LODStreamInfoPtr);

	// A buffer for the mesh data
	std::unique_ptr<uint8_t[]> MeshDataBuffer = nullptr;
	// Resulting size
	uint64_t MeshDataBufferSize = 0;

	// Vertex has extended vertex information
	bool HasExtendedVertexInfo = (MeshInfo.StatusFlag & 64) != 0;

	// Determine if we need to load the mesh or not (Seems flag == 8 is loaded)
	if ((MeshInfo.StatusFlag & 0x3F) == 8)
	{
		// Result size
		uintptr_t ResultSize = 0;
		// The mesh is already loaded, just read it
		auto TemporaryBuffer = CoDAssets::GameInstance->Read(MeshInfo.XModelMeshBufferPtr, MeshInfo.XModelMeshBufferSize, ResultSize);

		// Copy and clean up
		if (TemporaryBuffer != nullptr)
		{
			// Allocate safe
			MeshDataBuffer = std::make_unique<uint8_t[]>(MeshInfo.XModelMeshBufferSize);
			// Copy over
			std::memcpy(MeshDataBuffer.get(), TemporaryBuffer, (size_t)ResultSize);
			// Set size
			MeshDataBufferSize = ResultSize;

			// Clean up
			delete[] TemporaryBuffer;
		}
	}
	else
	{
		// Result size
		uint32_t ResultSize = 0;
		// We must read from the cache
		MeshDataBuffer = CoDAssets::GamePackageCache->ExtractPackageObject(ModelLOD.LODStreamKey, ResultSize);
		// Set size
		MeshDataBufferSize = ResultSize;
	}

	// Continue on success
	if (MeshDataBuffer != nullptr)
	{
		// Make a reader to begin reading the mesh (Don't close)
		auto MeshReader = MemoryReader((int8_t*)MeshDataBuffer.get(), MeshDataBufferSize, true);

		// The total weighted verticies
		uint32_t TotalReadWeights = 0;
		// The maximum weight index
		uint32_t MaximumWeightIndex = ResultModel->BoneCount() - 1;

		// Prepare it for submeshes
		ResultModel->PrepareSubmeshes((uint32_t)ModelLOD.Submeshes.size());

		// Iterate over submeshes
		for (auto& Submesh : ModelLOD.Submeshes)
		{
			// Create and grab a new submesh
			auto& Mesh = ResultModel->AddSubmesh();

			// Set the material (COD has 1 per submesh)
			Mesh.AddMaterial(Submesh.MaterialIndex);

			// Prepare the mesh for the data
			Mesh.PrepareMesh(Submesh.VertexCount, Submesh.FaceCount);

			// Jump to vertex position data, advance to this submeshes verticies
			MeshReader.SetPosition(MeshInfo.VertexOffset + (Submesh.VertexPtr * 12));

			// Iterate over verticies
			for (uint32_t i = 0; i < Submesh.VertexCount; i++)
			{
				// Make a new vertex
				auto& Vertex = Mesh.AddVertex();

				// Read and assign position
				Vertex.Position = MeshReader.Read<Vector3>();
			}

			// Jump to vertex info data, advance to this submeshes info, seek further for extended vertex info
			MeshReader.SetPosition(MeshInfo.UVOffset + (Submesh.VertexPtr * (HasExtendedVertexInfo ? 24 : 16)));

			// Iterate over verticies
			for (uint32_t i = 0; i < Submesh.VertexCount; i++)
			{
				// Grab the reference
				auto& Vertex = Mesh.Verticies[i];

				// Read vertex data
				auto VertexData = MeshReader.Read<GfxStreamVertex>();

				// Add UV layer
				Vertex.AddUVLayer(HalfFloats::ToFloat(VertexData.UVUPosition), HalfFloats::ToFloat(VertexData.UVVPosition));

				// Unpack normal
				int32_t PackedX = (((VertexData.VertexNormal >> 0) & ((1 << 10) - 1)) - 512);
				int32_t PackedY = (((VertexData.VertexNormal >> 10) & ((1 << 10) - 1)) - 512);
				int32_t PackedZ = (((VertexData.VertexNormal >> 20) & ((1 << 10) - 1)) - 512);
				// Calculate
				Vertex.Normal.X = ((float)PackedX / 511.0f);
				Vertex.Normal.Y = ((float)PackedY / 511.0f);
				Vertex.Normal.Z = ((float)PackedZ / 511.0f);

				// Add Colors if we want them
				if (ExportColors)
				{
					Vertex.Color[0] = VertexData.Color[0];
					Vertex.Color[1] = VertexData.Color[1];
					Vertex.Color[2] = VertexData.Color[2];
					Vertex.Color[3] = VertexData.Color[3];
				}
				else
				{
					Vertex.Color[0] = 0xFF;
					Vertex.Color[1] = 0xFF;
					Vertex.Color[2] = 0xFF;
					Vertex.Color[3] = 0xFF;
				}

				// Skip extended vertex information (first 4 bytes seems to be UV, possibly for better camo UV Mapping)
				if (HasExtendedVertexInfo)
					MeshReader.Advance(8);
			}

			// Jump to vertex weight data, advance to this submeshes info
			MeshReader.SetPosition(MeshInfo.WeightsOffset + (Submesh.VertexPtr * 12));

			// Iterate over verticies
			for (uint32_t i = 0; i < Submesh.VertexCount; i++)
			{
				// Grab the reference
				auto& Vertex = Mesh.Verticies[i];
				
				// Check if we're a complex weight, up to four weights
				if (((uint8_t)Submesh.WeightCounts[0] & 2) > 0)
				{
					// Read weight data
					auto VertexWeight = MeshReader.Read<GfxStreamWeight>();

					// Add if need be
					Vertex.AddVertexWeight(VertexWeight.WeightID1, (VertexWeight.WeightVal1 / 255.0f));
					// Calculate max
					MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID1, MaximumWeightIndex);

					// Check for value 2
					if (VertexWeight.WeightVal2 > 0)
					{
						Vertex.AddVertexWeight(VertexWeight.WeightID2, (VertexWeight.WeightVal2 / 255.0f));
						// Calculate max
						MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID2, MaximumWeightIndex);
					}

					// Check for value 3
					if (VertexWeight.WeightVal3 > 0)
					{
						Vertex.AddVertexWeight(VertexWeight.WeightID3, (VertexWeight.WeightVal3 / 255.0f));
						// Calculate max
						MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID3, MaximumWeightIndex);
					}

					// Check for value 4
					if (VertexWeight.WeightVal4 > 0)
					{
						Vertex.AddVertexWeight(VertexWeight.WeightID4, (VertexWeight.WeightVal4 / 255.0f));
						// Calculate max
						MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID4, MaximumWeightIndex);
					}

					// Increase
					TotalReadWeights++;
				}
				else
				{
					// Simple weight
					Vertex.AddVertexWeight(0, 1.0);
				}

			}

			// Jump to face data, advance to this submeshes faces
			MeshReader.SetPosition(MeshInfo.FacesOffset + (Submesh.FacesPtr * 2));

			// Iterate over faces
			for (uint32_t i = 0; i < Submesh.FaceCount; i++)
			{
				// Read data
				auto Face = MeshReader.Read<GfxStreamFace>();

				// Add the face
				Mesh.AddFace(Face.Index1, Face.Index2, Face.Index3);
			}
		}

		// Prepare to generate stream bones if we had a conflict
		if (MaximumWeightIndex > (ResultModel->BoneCount() - 1))
		{
			// Generate stream bones
			auto CurrentBoneCount = ResultModel->BoneCount();
			auto WantedBoneCount = (MaximumWeightIndex + 1);

			// Loop and create
			for (uint32_t i = 0; i < (WantedBoneCount - CurrentBoneCount); i++)
			{
				auto& StreamBone = ResultModel->AddBone();

				// Set name and parent
				StreamBone.TagName = Strings::Format("smod_bone%d", i);
				StreamBone.BoneParent = 0;
			}

			// Ensure root is tag_origin
			ResultModel->Bones[0].TagName = "tag_origin";
		}
	}
}

std::string GameBlackOps4::DecryptString(uint8_t* InputBuffer, uint8_t InputLength, uint8_t EncryptionID, uint64_t StringHash)
{
	switch ((uint8_t)(EncryptionID + 128))
	{
	case 3:
	{
		// Start values
		uint32_t k = 649687916;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[i % 0x6D + 257 * (k % 0xF)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 0x6C ^ k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 4:
	{
		// Start values
		uint32_t k = 119;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Edit key
			j = 119 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 5:
	{
		// Start values
		uint32_t k = 796555029;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[k % 0xF7 + 257 * (i % 0xCU)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 21 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 6:
	{
		// Start values
		uint32_t k = 26;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Edit key
			j = k + 26;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 7:
	{
		// Start values
		uint32_t k = 81;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 81;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 8:
	{
		// Start values
		uint32_t k = -61;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Edit key
			j = k - 61;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 9:
	{
		// Start values
		uint32_t k = 50;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 50 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 10:
	{
		// Start values
		uint32_t k = -53;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = -53 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 11:
	{
		// Start values
		uint32_t k = 231147981;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[k % 0x1D + 257 * (i % 0x11u)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k - 51;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 12:
	{
		// Start values
		uint32_t k = -62;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 194;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 13:
	{
		// Start values
		uint32_t k = 26;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 26 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 14:
	{
		// Start values
		uint32_t k = -101;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k - 101;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 15:
	{
		// Start values
		uint32_t k = 497848490;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[k % 0xF4 + 257 * (i % 3)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 170;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 33:
	{
		// Start values
		uint32_t k = 54;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k ^ 54;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 34:
	{
		// Start values
		uint32_t k = 11;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 11 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 35:
	{
		// Start values
		uint32_t k = 637204348;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Edit key
			j = k ^ 124;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 36:
	{
		// Start values
		uint32_t k = -114;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = -114 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 37:
	{
		// Start values
		uint32_t k = -14;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = -14 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 38:
	{
		// Start values
		uint32_t k = 8;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Edit key
			j = 8 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 39:
	{
		// Start values
		uint32_t k = 243992130;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[k % 0x9B];
			// Edit key
			j = k ^ 66;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 40:
	{
		// Start values
		uint32_t k = -15;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Edit key
			j = k - 15;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 41:
	{
		// Start values
		uint32_t k = 88;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 88 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 42:
	{
		// Start values
		uint32_t k = 124;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 124;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 43:
	{
		// Start values
		uint32_t k = 6;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 6 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 44:
	{
		// Start values
		uint32_t k = -39;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = -39 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 45:
	{
		// Start values
		uint32_t k = -84;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 172;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 46:
	{
		// Start values
		uint32_t k = 372630202;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[k % 0x6C];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = -70 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 47:
	{
		// Start values
		uint32_t k = -82;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Edit key
			j = 174 ^ k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 49:
	{
		// Start values
		uint32_t k = 104;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k + 104;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 50:
	{
		// Start values
		uint32_t k = -93;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = -93 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 51:
	{
		// Start values
		uint32_t k = 75;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k ^ 75;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 52:
	{
		// Start values
		uint32_t k = 787059250;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[i % 0xB5 + 257 * (i % 0xC)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 50;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 53:
	{
		// Start values
		uint32_t k = 82;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 37 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 54:
	{
		// Start values
		uint32_t k = 847586483;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[k % 0x78 + 257 * (k % 0xB)];
			// Edit key
			j = k - 77;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 55:
	{
		// Start values
		uint32_t k = 610753839;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[(k % 0xAB) + (257 * (k % 0x11))];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 47;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 56:
	{
		// Start values
		uint32_t k = -56;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = -56 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 57:
	{
		// Start values
		uint32_t k = 91;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k + 91;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 58:
	{
		// Start values
		uint32_t k = 30435249;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[k % 0x25 + 257 * (i % 0xBu)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = -79 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 59:
	{
		// Start values
		uint32_t k = 79;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k + 79;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 60:
	{
		// Start values
		uint32_t k = -118;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = -118 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 61:
	{
		// Start values
		uint32_t k = 26;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Edit key
			j = 26 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 62:
	{
		// Start values
		uint32_t k = -86;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Edit key
			j = k ^ 170;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 63:
	{
		// Start values
		uint32_t k = 798785695;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[257 * (k & 1) + i % 0x77u];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k - 97;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	default:
	{
		break;
	}
	}
#if _DEBUG
	// Validate strings in debug to check for encryption changes
	uint64_t Hash = 0xCBF29CE484222325;
	// Loop through string
	for (uint8_t i = 0; i < InputLength; i++)
		Hash = 0x100000001B3 * (InputBuffer[i] ^ Hash);
	// Check it against input
	if (Hash != StringHash)
		printf("Hash check failed: ID %#X - Input Hash 0x%llX - Hash Result 0x%llX - %s - Size %i\n", EncryptionID, StringHash, Hash, InputBuffer, InputLength);
#endif
	// Done
	return std::string(reinterpret_cast<char const*>(InputBuffer), InputLength - 1);
}

std::string GameBlackOps4::LoadStringEntry(uint64_t Index)
{
	// Calculate Offset to String (Offsets[3] = StringTable)
	auto Offset = CoDAssets::GameOffsetInfos[3] + (Index * 20);
	// Read Result
	uint64_t BytesRead = 0;
	// Read Info
	auto StringHash      = CoDAssets::GameInstance->Read<uint64_t>(Offset + 8);
	auto EncryptionID    = CoDAssets::GameInstance->Read<uint8_t>(Offset + 16);
	auto StringSize      = CoDAssets::GameInstance->Read<uint8_t>(Offset + 17);
	// Check 0 length
	if (StringSize == 0)
		return "";
	auto EncryptedString = (uint8_t*)CoDAssets::GameInstance->Read(Offset + 18, StringSize, BytesRead);
	// Pass to decryptor
	auto Result = DecryptString(EncryptedString, StringSize, EncryptionID, StringHash);
	// Clean up
	delete[] EncryptedString;
	// Done
	return Result;
}
void GameBlackOps4::PerformInitialSetup()
{
	// Load Caches
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_xanim.wni"));
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_ximage.wni"));
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_xmaterial.wni"));
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_xmodel.wni"));

	// Prepare to copy the oodle dll
	auto OurPath = FileSystems::CombinePath(FileSystems::GetApplicationPath(), "oo2core_6_win64.dll");

	// Copy if not exists
	if (!FileSystems::FileExists(OurPath))
		FileSystems::CopyFile(FileSystems::CombinePath(FileSystems::GetDirectoryName(CoDAssets::GameInstance->GetProcessPath()), "oo2core_6_win64.dll"), OurPath);
}