#include "stdafx.h"

// The class we are implementing
#include "GameBlackOps4.h"

// We need the CoDAssets class
#include "CoDAssets.h"
#include "CoDRawImageTranslator.h"
#include "CoDXPoolParser.h"

// We need the following WraithX classes
#include "Strings.h"
#include "FileSystems.h"
#include "MemoryReader.h"
#include "SettingsManager.h"
#include "HalfFloats.h"

// -- Initialize Asset Name Cache

WraithNameIndex GameBlackOps4::AssetNameCache = WraithNameIndex();

// -- Initialize Decryption Table

uint32_t* DecryptionTable = new uint32_t[5264]
{
	0x01A293C0, 0x039162BB, 0x0220035D, 0x00DDBB18, 0x01B0FDD6, 0x03F043C2, 0x038A185B, 0x0406C650,
	0x00177EDE, 0x0238FF63, 0x0450B0D5, 0x04794B29, 0x050D4F1A, 0x05D21B2D, 0x02A1C5B5, 0x02D39528,
	0x024DB236, 0x041A7B0F, 0x012574D8, 0x02A7AE20, 0x024FCACA, 0x01BA50DB, 0x031759D7, 0x057C8033,
	0x043909F1, 0x03BA6794, 0x007036A7, 0x027AE0E2, 0x044A0143, 0x05E55929, 0x05E86626, 0x04978D33,
	0x050ADA64, 0x0563E3CA, 0x02136E9B, 0x055AFE0E, 0x050FBB79, 0x042CED00, 0x0402E99E, 0x00E0B37F,
	0x017C8631, 0x02C6C37B, 0x0027A561, 0x0498F202, 0x05F1821C, 0x044903DD, 0x01E88DDB, 0x00BCD763,
	0x05DF4676, 0x038C8F95, 0x00D2EF47, 0x00AECA93, 0x005C9528, 0x04572B68, 0x046EADC4, 0x04EF4109,
	0x02977407, 0x02BE22D6, 0x03C590ED, 0x02E24B82, 0x005235D9, 0x052AFEF6, 0x01297AB8, 0x00849114,
	0x0328F543, 0x02F6F106, 0x04FEC645, 0x03DA04E9, 0x01CF8960, 0x0068F4ED, 0x012C087A, 0x05C99134,
	0x0256C4D4, 0x05AEB659, 0x012FE750, 0x00ADED8B, 0x0471FECA, 0x053C4A11, 0x038ADEED, 0x0069FF13,
	0x057D57F5, 0x018494C2, 0x054AA8AB, 0x03BF61F5, 0x00369C37, 0x05190A19, 0x0098B0CB, 0x02BC2E1B,
	0x02C213FF, 0x00F95E18, 0x0147D848, 0x0135355C, 0x0142F2F0, 0x03A4A248, 0x0088C26F, 0x03728EFE,
	0x046E0043, 0x039A9B3F, 0x05D57608, 0x03A1CA93, 0x05D274E8, 0x0372C2BF, 0x05ECEFD3, 0x04749DA3,
	0x00EAD918, 0x00D1942F, 0x021BC5D6, 0x020ABDEC, 0x04BC8F15, 0x00AE4A95, 0x01B89D6B, 0x0169B65B,
	0x04002330, 0x051A75D3, 0x025A21BB, 0x03CA881C, 0x015FC3BB, 0x029DCDD4, 0x0102200B, 0x024AED77,
	0x054BB282, 0x000820A1, 0x00EA09AA, 0x0130B17D, 0x051B28DB, 0x04CB83A4, 0x04626E9B, 0x03EBF1C3,
	0x05C7DBFF, 0x019E347C, 0x007201C5, 0x05A4C91B, 0x037486FC, 0x038B8B58, 0x00EC8F34, 0x036B115B,
	0x057E879B, 0x00BFA04A, 0x05CD74A2, 0x01F12F0F, 0x050372DF, 0x02B71A4F, 0x050CFF5A, 0x02F0C91A,
	0x035F3B58, 0x059FDE02, 0x01E173D8, 0x0341546B, 0x02DEBF5A, 0x035FB58B, 0x00E017F7, 0x02354BDC,
	0x00E251A9, 0x0088D3DF, 0x05D8C631, 0x0178A5B9, 0x051513E7, 0x01FE3B1E, 0x051D2FDF, 0x0172BFA7,
	0x03CC34A1, 0x04BD4745, 0x03B44787, 0x02A2D0FA, 0x02C02158, 0x015866D4, 0x0323E2E3, 0x031D3780,
	0x03777CB1, 0x00CAACF2, 0x0571D18A, 0x02DF4C9D, 0x02CC8F60, 0x0123AAA1, 0x01540DCE, 0x00C422C1,
	0x05BC6A9B, 0x0230A117, 0x05237034, 0x0145D588, 0x0169F815, 0x030F4ADB, 0x03442E9E, 0x018526C8,
	0x03E07C91, 0x023A855A, 0x02B9A05D, 0x002F7FC8, 0x003FAECB, 0x03A728A9, 0x0087E23D, 0x04915095,
	0x05AC8952, 0x043278D9, 0x0109752F, 0x05B9D205, 0x002566DD, 0x0202336C, 0x039A93DF, 0x036F613C,
	0x0429350C, 0x01ADFEFA, 0x0109BAC5, 0x017FE85D, 0x0495679A, 0x0044F839, 0x01C6779F, 0x02C6DA06,
	0x049BC100, 0x05951FB2, 0x00D5A6D7, 0x033DD5FA, 0x000B7789, 0x035B376A, 0x0133AAF2, 0x049C4A21,
	0x013A9600, 0x0241776D, 0x01C6E004, 0x05280296, 0x031B26DF, 0x0440EB3E, 0x053329E3, 0x00779496,
	0x023C3162, 0x0500A6D2, 0x00C0D155, 0x01BA3740, 0x05625D83, 0x01C3A11E, 0x050506F9, 0x0321F176,
	0x0160892E, 0x0567B6AF, 0x02AA78DC, 0x03706A66, 0x0410F2DF, 0x01C5C758, 0x01797237, 0x03801950,
	0x016512B1, 0x059FC6F1, 0x040E875E, 0x04F5733A, 0x02E94977, 0x03554AE8, 0x03EB64E4, 0x01AC7514,
	0x00A94AB9, 0x039439F1, 0x03F232DB, 0x00D1BEF6, 0x04D645EA, 0x05F3DD8B, 0x016C83DB, 0x05370EAB,
	0x018BF63E, 0x04EB9D30, 0x019FB588, 0x03F46C66, 0x0132F56C, 0x0457AB74, 0x016ED7EC, 0x03A5178F,
	0x00EAD6D3, 0x056833D1, 0x03763C39, 0x00E53BCA, 0x05A73A18, 0x0138354A, 0x01C4CB34, 0x05920CBA,
	0x01AA7177, 0x03D2ED24, 0x02562022, 0x03F81C01, 0x00C1ED34, 0x00B716A5, 0x00DE03C5, 0x05709A07,
	0x036B68A6, 0x0063ED54, 0x00CDDA06, 0x032ED6DC, 0x00A10008, 0x01EE0516, 0x0579E91D, 0x01AF2BB5,
	0x00289D72, 0x05A96787, 0x040559F5, 0x007E9148, 0x00915C36, 0x058851EB, 0x04105F41, 0x05253322,
	0x01ED93B5, 0x02E479B4, 0x034BA462, 0x03F8D1F1, 0x052C17CB, 0x058F8A44, 0x00C1036E, 0x0120CC61,
	0x034588BC, 0x00A6C2EB, 0x04FDED00, 0x020DF71B, 0x02104C5F, 0x03B063D1, 0x0317A42F, 0x005FE53C,
	0x043C5CE2, 0x0059E4C5, 0x01646E4C, 0x01B17741, 0x011B0D72, 0x01F698C9, 0x007669CF, 0x03A2F2BC,
	0x016E6979, 0x025D508A, 0x00939B2E, 0x006C17BB, 0x04635714, 0x01B35325, 0x031A149B, 0x04DAB719,
	0x00471E42, 0x0072BAC2, 0x039F2CEE, 0x042257A5, 0x04041FBC, 0x003C0019, 0x030CE254, 0x037B8DE7,
	0x020F1D9C, 0x02533470, 0x0075D343, 0x0431F3ED, 0x00ACF7B2, 0x01B1D0F8, 0x0347DDD5, 0x030A10F7,
	0x005CBA2B, 0x048BB4A0, 0x0457D75D, 0x03A48865, 0x040F8939, 0x04405471, 0x0589F88B, 0x012FA55A,
	0x0273C6F5, 0x0108650D, 0x0531748E, 0x03F021BD, 0x034F7D0A, 0x052CAA72, 0x00480DE8, 0x00C89D5D,
	0x054112C6, 0x0449D100, 0x039F6DB3, 0x041F6C31, 0x041CB835, 0x0319E6A5, 0x03318D40, 0x01E84E96,
	0x00F5136F, 0x018ADA8C, 0x0310284B, 0x03B795A5, 0x0411B36E, 0x04CAD9E8, 0x00FA6D9A, 0x05D975F1,
	0x0071B317, 0x0478B38C, 0x039F3C8F, 0x01AEA740, 0x01E8E59E, 0x02AF50B0, 0x045D5A6E, 0x054D1F99,
	0x04B4912F, 0x03F675AF, 0x0359B6F1, 0x0449229D, 0x0199532F, 0x015F06A4, 0x05D3CF5A, 0x059EDB59,
	0x01EEA22C, 0x043D8446, 0x043BE7D9, 0x04AE5541, 0x019931D2, 0x04D984D0, 0x01FD355B, 0x00EF9F83,
	0x035C78D0, 0x05205B87, 0x018E4C49, 0x05393235, 0x02814699, 0x018A59E3, 0x03F9D805, 0x02AF2EF9,
	0x05E8E365, 0x01821163, 0x00541742, 0x0526605D, 0x0453DF01, 0x059391BC, 0x04A259C4, 0x05564056,
	0x04F5CDCE, 0x0143D3B1, 0x004AB43B, 0x0125C7C9, 0x04C62CFD, 0x002587B7, 0x021AD395, 0x041E8BCE,
	0x022E08B9, 0x04DEC163, 0x04A900F5, 0x0549F973, 0x015FCD29, 0x02DBAFB9, 0x02C8B44B, 0x02F1C650,
	0x02FB10AF, 0x04380191, 0x05805DBC, 0x051767E7, 0x007ADBAB, 0x0080CD0D, 0x023CAC05, 0x046DBFA0,
	0x00103003, 0x0153878E, 0x023B19D6, 0x03B926F2, 0x03830DEB, 0x039AFA5D, 0x034865D6, 0x00B27F67,
	0x022F204D, 0x0400DA90, 0x036BC8E2, 0x013B52AF, 0x00D29A5F, 0x0302A1B6, 0x029A1D0F, 0x029FDC6E,
	0x008FD570, 0x0588909C, 0x035513E1, 0x02D87F12, 0x007249FE, 0x03889F53, 0x0251CBA7, 0x01A68F2A,
	0x057FD687, 0x051FA395, 0x00EA2A99, 0x03806EEB, 0x05393792, 0x02DACFF5, 0x04DD8D5A, 0x01EB903F,
	0x00F1E067, 0x032A7691, 0x0370EAE4, 0x04425AF4, 0x0546DD57, 0x0564F07F, 0x00A5C9BB, 0x007EDFD3,
	0x01C54455, 0x02119812, 0x036B0D6C, 0x02952FD7, 0x04017B14, 0x047E460C, 0x01284B0A, 0x035EB528,
	0x02F3A012, 0x03D425E7, 0x01497C4D, 0x03E7E518, 0x00C6BA46, 0x03347682, 0x021EC953, 0x04B955A4,
	0x0265CFD8, 0x0249AB04, 0x05DA2DFF, 0x043D343D, 0x025F0A36, 0x00E4A02C, 0x02F25132, 0x05DBC414,
	0x01072EAD, 0x01D22349, 0x00B10616, 0x03532C44, 0x011803BD, 0x03D165B3, 0x023F925D, 0x017AF14D,
	0x029229EA, 0x01CBCEBA, 0x025C4636, 0x04E34019, 0x0320E302, 0x000930FD, 0x04777D1A, 0x01988BD0,
	0x0540019E, 0x02F463F7, 0x0551B676, 0x05A8279B, 0x03518D40, 0x01CF56F5, 0x00CE4971, 0x0029900A,
	0x04A85C9D, 0x02036DE1, 0x041F9332, 0x03489DFB, 0x0569301D, 0x0171EC47, 0x0384CE2B, 0x05B107A4,
	0x047EF987, 0x0473491E, 0x01CEC98B, 0x05847936, 0x00180CEA, 0x0416251E, 0x03DB5D68, 0x041F9ECA,
	0x00335A62, 0x043D3C3D, 0x03C61CD2, 0x01516F19, 0x0403DA2C, 0x04A6C510, 0x05DF53A5, 0x03EED9E6,
	0x05D0E9F0, 0x02B7CE5D, 0x04C323A0, 0x0454EEB9, 0x018C7EEE, 0x0371CE5A, 0x0418C8A5, 0x016C9CC2,
	0x011E0A27, 0x01AEBC92, 0x01BDA0A6, 0x02C86EDD, 0x0123345E, 0x050AFEA4, 0x03041931, 0x016A95CD,
	0x02CA5426, 0x04741F63, 0x0241698D, 0x05315239, 0x031D2FD7, 0x00E2D0DF, 0x013F6931, 0x051CFF0A,
	0x021C7190, 0x0287B3E6, 0x02A4B18D, 0x05D71DB6, 0x0381EEE5, 0x04997544, 0x0228C0B1, 0x04061AE4,
	0x04492491, 0x011A060B, 0x056B6C39, 0x04DD03E6, 0x05D30822, 0x0296441C, 0x033008EF, 0x04DD4C38,
	0x0552349A, 0x03A0EA95, 0x0545CF12, 0x0493491F, 0x0365138C, 0x03303103, 0x024DB5D1, 0x020CFF1E,
	0x05659505, 0x00519835, 0x05190A2E, 0x045E75BD, 0x03131948, 0x034B63E3, 0x01038052, 0x048CD945,
	0x01B19D27, 0x053EF62F, 0x00219E9C, 0x027D2748, 0x025DF06A, 0x00351EBB, 0x027E6593, 0x030361D9,
	0x00936FB3, 0x02FF9C8A, 0x05AA7589, 0x02B885BD, 0x03089221, 0x012B391B, 0x0418B427, 0x0188DECB,
	0x002CD2A3, 0x0160F2B5, 0x01F254EA, 0x0544546E, 0x05A37A41, 0x0424E29F, 0x04FBD187, 0x044D9CE9,
	0x011355F5, 0x052BC859, 0x00F2213A, 0x02662496, 0x030BE06B, 0x05379B23, 0x00807E80, 0x00F5EF75,
	0x04909E99, 0x04C63811, 0x0372ECCB, 0x03DDFD38, 0x0295DBD9, 0x055F440A, 0x044709B4, 0x05C78DB5,
	0x006B2411, 0x0096BC1E, 0x00E8F7C9, 0x03223BE4, 0x01999F00, 0x03966CB1, 0x04DBC8C3, 0x0427C92F,
	0x01CE9248, 0x03DA2893, 0x024F7A14, 0x0464DB4F, 0x02900694, 0x039C932D, 0x04B6E903, 0x055824BD,
	0x01CFE597, 0x00AFF03F, 0x054B8FF1, 0x012F8FCF, 0x02D8F066, 0x016334FE, 0x01CC9081, 0x023FF4C8,
	0x05B52138, 0x0255EEEE, 0x01CA9F67, 0x017A9B61, 0x0550F3D2, 0x0183DE92, 0x04846F3C, 0x02E761CC,
	0x02CE5088, 0x033AF088, 0x00C3FAD9, 0x00981542, 0x0068AED6, 0x057E246E, 0x040E3F4F, 0x052DEE20,
	0x05EDF1A6, 0x03742275, 0x04CC39AF, 0x02C06C32, 0x035AB616, 0x001845D9, 0x02ACA8A4, 0x054953BD,
	0x04772FDF, 0x0061AF5F, 0x00111815, 0x02742713, 0x002B41E9, 0x052D27AD, 0x00717664, 0x00710D8A,
	0x01FADFDE, 0x000A52AF, 0x0518E65D, 0x0346F74D, 0x04F8E470, 0x0410C188, 0x019A1268, 0x046F6A78,
	0x0186B9C1, 0x01E494D8, 0x05F28B71, 0x0124F7EB, 0x0512A4CD, 0x04E9A8BE, 0x050A60FC, 0x02F04ACC,
	0x03AB08B5, 0x034A1238, 0x05E424A2, 0x045ECC4C, 0x02E47DD8, 0x05B15382, 0x05EE2470, 0x04885510,
	0x017DA66C, 0x0262C6CC, 0x050331CC, 0x0242B6B3, 0x01EE4164, 0x032E5023, 0x04031968, 0x02708A67,
	0x0552596B, 0x015B1235, 0x0344EC41, 0x01092282, 0x016FD4AB, 0x027E8697, 0x05D3AC08, 0x0452D851,
	0x00679090, 0x05A5E8B1, 0x00281AC1, 0x003E085F, 0x001E6396, 0x02CCB71A, 0x045A8B44, 0x00228F0A,
	0x01EB1165, 0x05915A21, 0x02BA6246, 0x040FB908, 0x00125E13, 0x037A89A2, 0x01F15627, 0x02734B58,
	0x03FCE2EB, 0x04CFED81, 0x01C8EC11, 0x05973AE9, 0x024E164C, 0x04621E48, 0x0242C73B, 0x01DC0778,
	0x00F2D976, 0x01C9D6DC, 0x03DBD3D0, 0x0416D556, 0x03E4D037, 0x00525B10, 0x03A1D24B, 0x0184DFEE,
	0x0070BA5F, 0x04898A7A, 0x02E3C5AC, 0x059F2BDC, 0x0512C6FC, 0x04E8AC85, 0x0530EB72, 0x00B52437,
	0x03085979, 0x034C0FDB, 0x001FA590, 0x04264F88, 0x008033D3, 0x0370822A, 0x0592997C, 0x015C42F1,
	0x03A5DBB9, 0x02B2854D, 0x03079754, 0x05D6FBDE, 0x043584A2, 0x013FD94C, 0x041748E8, 0x047BBFE8,
	0x00D8D754, 0x025B2B7B, 0x01588E9E, 0x02A27E06, 0x02EB4F8D, 0x0358BCF2, 0x04366A85, 0x0274D6DC,
	0x04FAD74A, 0x0029B628, 0x0153B04A, 0x05D35F5B, 0x04F688F5, 0x01A1C5DC, 0x05DE870A, 0x03BEF27A,
	0x02B871AA, 0x0080683E, 0x01322CF2, 0x00028229, 0x02911F4C, 0x05A0E5CF, 0x00866A82, 0x03855D39,
	0x0092E616, 0x04D093BC, 0x047534A6, 0x034A6033, 0x02E8F875, 0x05406383, 0x01E229AC, 0x0442DB41,
	0x056DBB77, 0x025949D6, 0x004E07D9, 0x02F286CB, 0x04B00601, 0x02D9A966, 0x05B421F1, 0x00485570,
	0x026ED290, 0x042AF7B4, 0x02243E86, 0x0095A1D7, 0x012AA7A7, 0x047C9057, 0x057C064E, 0x05CE4EA0,
	0x05A53D13, 0x05D922C2, 0x03AA062D, 0x0193884E, 0x04E3E9A8, 0x04BA48AE, 0x0560BD8B, 0x018DAA31,
	0x057E91E4, 0x0462F1E6, 0x02749295, 0x040250B4, 0x05E01A50, 0x00786408, 0x025B8A90, 0x0087CB30,
	0x03F7F639, 0x0402141D, 0x04B5A8B9, 0x0369E369, 0x05014DD6, 0x03DE0873, 0x040BAFA9, 0x05812039,
	0x02AE2CD5, 0x031524D6, 0x00BA8D12, 0x02335CC7, 0x0418E48D, 0x05273D86, 0x0409667B, 0x0521C4C1,
	0x048186AF, 0x058B4158, 0x04CACF47, 0x03ED458C, 0x054E98A2, 0x0324BF59, 0x03AFC523, 0x03FD8204,
	0x04DE37B6, 0x054A8C15, 0x0331600E, 0x007C4AFC, 0x054A23C3, 0x02456729, 0x01A919CF, 0x025FD6E1,
	0x0248899F, 0x037EDC40, 0x012493CD, 0x05C7E26A, 0x0128767D, 0x01399BDF, 0x05764401, 0x04C28280,
	0x00FA7D94, 0x00C795D4, 0x0171FB31, 0x0360F282, 0x05E2235C, 0x0557C823, 0x029510FC, 0x03B1A5A8,
	0x04689FF6, 0x044C7ED0, 0x04C5A8AC, 0x02B79AED, 0x00D5FF6C, 0x02D0F256, 0x05B562C7, 0x009BEC2D,
	0x038EE9F3, 0x00C1ACD4, 0x050CFED3, 0x0441FB3B, 0x01FEE79D, 0x02E09A78, 0x0097E7D1, 0x02FAA92F,
	0x0212FFE3, 0x017B08FC, 0x0143F982, 0x00587286, 0x014F930A, 0x01AEF465, 0x0113D169, 0x03A13F35,
	0x01370ACF, 0x03E19D54, 0x04118DD9, 0x0088CFF8, 0x05310F44, 0x002CDE10, 0x016C01FD, 0x023DD9E3,
	0x029DBAF3, 0x00BE8213, 0x00C70ABD, 0x00472D5F, 0x026FC104, 0x009CA156, 0x03D88063, 0x01CA2AE9,
	0x02B84C14, 0x054895BF, 0x03F9E308, 0x012B7F02, 0x05A22260, 0x00C5CA3E, 0x04A70A66, 0x029613DC,
	0x0345B444, 0x04FB9850, 0x05DC6CF3, 0x04A40B53, 0x01244446, 0x00524A33, 0x057AEB70, 0x0452F4BA,
	0x031C6995, 0x01B78BED, 0x0431DFFF, 0x0261F935, 0x0532A52C, 0x02E991A0, 0x00892935, 0x014C6D20,
	0x03F65BF7, 0x04642F8F, 0x00C9AE69, 0x04DB973B, 0x04758DAA, 0x04C7D27D, 0x05741DFE, 0x0144F32A,
	0x00BFE221, 0x00A056C2, 0x01FB4CD5, 0x02E3928A, 0x02CFC3F7, 0x014A0131, 0x041B1B4A, 0x025704A8,
	0x04C0B3E6, 0x0180FB82, 0x02C9E836, 0x02FE617D, 0x0321D5B8, 0x02CADDA4, 0x043DB463, 0x01C2E4A3,
	0x04E9F0FB, 0x00FB1343, 0x0377E2F0, 0x04AC3C12, 0x029B98EA, 0x03EF59C6, 0x02C66862, 0x03683905,
	0x024AB3B9, 0x02BDDF2E, 0x03ED91CF, 0x038D42D6, 0x05D926D8, 0x0374F0A4, 0x03294FA8, 0x05F06F63,
	0x01BDF9BF, 0x052D9D54, 0x00B9933E, 0x03C79CA0, 0x009507BD, 0x008B0C73, 0x03A08248, 0x0451A2E2,
	0x00FF7BFE, 0x011FDFCF, 0x02561E6D, 0x04AB4860, 0x00951330, 0x04AD3A0B, 0x010A43B4, 0x01CB5926,
	0x05D725CF, 0x01E2FDDB, 0x025B5B97, 0x00770770, 0x00BA0B88, 0x00DFD5A1, 0x043A7AE6, 0x02D64648,
	0x057C55E4, 0x02F561AA, 0x0132A495, 0x03468835, 0x02993E37, 0x0311F696, 0x023E4669, 0x0324F60F,
	0x0308D6D0, 0x00F1DA44, 0x042751ED, 0x030405B1, 0x045A9075, 0x0407F06A, 0x03E4BE8B, 0x002CC6D4,
	0x02EDC03B, 0x021C725F, 0x03A32609, 0x00766C86, 0x04CF6189, 0x01778966, 0x03BE997C, 0x033F3F15,
	0x022343CA, 0x00247584, 0x02553F23, 0x03BA7A06, 0x03EDBC90, 0x03EE5A12, 0x036289B8, 0x03AC9876,
	0x03E8EA53, 0x03077753, 0x0278A7B9, 0x02927C3E, 0x00AF67C2, 0x0232105B, 0x028C6C08, 0x036C4B20,
	0x0449ED79, 0x05423787, 0x022C8EBB, 0x031FD111, 0x038FFB63, 0x00ADAD7D, 0x0338D26B, 0x03253CC8,
	0x05D19325, 0x01D7D1A4, 0x038356FE, 0x04ACD8FB, 0x00C07719, 0x036FA6D0, 0x05AF03E8, 0x05BBED59,
	0x03EA5693, 0x041EF8CF, 0x04CD1DE7, 0x0352D9BA, 0x03CE5B41, 0x031E8C46, 0x05EC5165, 0x02E52495,
	0x024EF0D5, 0x058650B8, 0x0208114E, 0x03DD56F1, 0x0598330D, 0x02042992, 0x014ABC4C, 0x04F276FA,
	0x05AB232D, 0x00A1D6BC, 0x005E9DFE, 0x0191A0DD, 0x01DB1643, 0x04C4C0E4, 0x0559E6BB, 0x043D4CC1,
	0x02E87EF2, 0x021821F3, 0x01958E77, 0x04F4F082, 0x0119ACB6, 0x05643270, 0x00FAECD7, 0x02FBED3A,
	0x02304CCF, 0x00E5C728, 0x012537C4, 0x00CDF664, 0x05208877, 0x0470844E, 0x0203284E, 0x007EA2A2,
	0x03113D10, 0x0440E4EC, 0x02547871, 0x00700FDE, 0x03280CF8, 0x011B2606, 0x0579A744, 0x03A670C2,
	0x055B5133, 0x035F63C4, 0x05759602, 0x05491B6C, 0x02B34DCD, 0x000AA55C, 0x04F6BB7A, 0x01CF6EE1,
	0x042E42E1, 0x04978914, 0x05DDCA27, 0x0526254F, 0x0588645E, 0x031A3240, 0x0572C470, 0x04C3E68B,
	0x04FEAAD2, 0x003D54E0, 0x03566834, 0x009E7A4F, 0x0131C4D9, 0x0352E339, 0x03790677, 0x01CAB006,
	0x00C0E61E, 0x00B2E9FD, 0x0141B126, 0x00EAB396, 0x0106419B, 0x0330AE55, 0x027DDF9E, 0x00263BC0,
	0x0397D068, 0x0115E23B, 0x02066E82, 0x0536A22D, 0x01B9BF58, 0x057DE899, 0x014B8E30, 0x02C7B975,
	0x03169814, 0x027DDBEA, 0x01BE62E4, 0x055D5D53, 0x05A1C3F5, 0x02AA8C49, 0x029562C7, 0x02E04DEA,
	0x006020C3, 0x032F34FE, 0x007BFB3C, 0x05BAB32E, 0x04A06245, 0x05B138E1, 0x00CF88CF, 0x031518AD,
	0x05EB06E0, 0x02A5D375, 0x018402CB, 0x04BD4856, 0x057FFD43, 0x019EEB09, 0x0402271C, 0x006F21DD,
	0x009B068F, 0x04C92C6E, 0x03D3FE5C, 0x006338E6, 0x00B7FBA9, 0x024B0053, 0x0470227E, 0x05666ACA,
	0x049C9A7E, 0x03642B36, 0x0049D8FA, 0x032854B3, 0x002E00AE, 0x0120EFCB, 0x01F54231, 0x040E39CB,
	0x005AB80D, 0x007AFB36, 0x0136E317, 0x0368C70A, 0x02E6C481, 0x0155298D, 0x03CD4F1B, 0x013F0F2D,
	0x0045AC94, 0x05A122B9, 0x00F67768, 0x045E8906, 0x002EF2ED, 0x048138F4, 0x04CC0C41, 0x015FEE49,
	0x01F15474, 0x00C0082A, 0x05591234, 0x01D25E19, 0x04FF9056, 0x0225822D, 0x025F06CC, 0x05A9D49C,
	0x00CB0366, 0x0217E099, 0x032471C8, 0x0204D256, 0x00215BB2, 0x0250DFB8, 0x05BB0A97, 0x0591DBE1,
	0x024FBA8B, 0x052EE2AE, 0x015AB9D2, 0x04E8521F, 0x0298D3DB, 0x028D7A6A, 0x00DEF3C9, 0x01ED3BCA,
	0x028AE084, 0x00F103F7, 0x05E14043, 0x0154CD5C, 0x025341E0, 0x01BB1B6E, 0x0001B992, 0x047F7905,
	0x015C448E, 0x01EA5D62, 0x0459D4A2, 0x0371F329, 0x05728930, 0x0207A534, 0x0497A6E6, 0x04150362,
	0x0574C708, 0x02C0EBB6, 0x02C5C3BA, 0x0431EB6E, 0x0306BDDF, 0x02704E01, 0x05CD9322, 0x05B523D4,
	0x00C25610, 0x05162C56, 0x043A85B3, 0x00851EBF, 0x01079C41, 0x04A83538, 0x009A554A, 0x0460D5E6,
	0x037B9C5E, 0x034E42FB, 0x059E203D, 0x0457F841, 0x0573872E, 0x03F7B16B, 0x00553B34, 0x01CF3029,
	0x05EA531D, 0x05006D29, 0x05CA4C7D, 0x02F56633, 0x0290F2AF, 0x04BD1BA6, 0x01670130, 0x01BC86A0,
	0x0372CBE8, 0x059FEBDE, 0x052DE102, 0x009EEB19, 0x05EADD7B, 0x01618685, 0x000AC176, 0x052EFA6B,
	0x01DD67A6, 0x0385388B, 0x00B613FC, 0x02DBE655, 0x0296650C, 0x01BA71D1, 0x00EDB561, 0x03AED4A9,
	0x037F3640, 0x02FA4F8C, 0x02EFBFC0, 0x00AF7763, 0x04577B0B, 0x04D27F6F, 0x041A99B5, 0x0067D10A,
	0x04B6934F, 0x033F5391, 0x003CD6AD, 0x01D04435, 0x027AD26F, 0x03240C8F, 0x0055013F, 0x00F1D317,
	0x03CF115B, 0x000FE6C5, 0x029104B5, 0x04EE4072, 0x05DB3989, 0x0011BDB6, 0x0202D77C, 0x02EAAB0C,
	0x038482D1, 0x04D76A40, 0x03518A97, 0x0193A6A2, 0x03718D35, 0x02728589, 0x00160047, 0x04CEFD21,
	0x00B8A15F, 0x02E76ECF, 0x05CEE312, 0x04C8A59D, 0x0583579F, 0x046E82E1, 0x0126D7B0, 0x05A8FF9A,
	0x04851CAA, 0x032A9CA8, 0x01B7CD4A, 0x008FDDE9, 0x010DAEE8, 0x0398F1BA, 0x03C2E9C4, 0x0276A9B8,
	0x03D443D2, 0x025A14EA, 0x04BC1E42, 0x04C08EA1, 0x02BE3D05, 0x03DB5A0E, 0x0464E86B, 0x051DC0DB,
	0x048EB31F, 0x028FC05B, 0x0006E7B2, 0x01530BAA, 0x05E2F479, 0x04E1FE9E, 0x05937487, 0x01CC7AE0,
	0x03679D4A, 0x02359973, 0x057D5694, 0x0364C842, 0x047CDC15, 0x000BD4F8, 0x04A6B90E, 0x04B19B28,
	0x05240323, 0x02333630, 0x0162DB3F, 0x04935897, 0x0458CF49, 0x03B889D0, 0x004D994D, 0x0476AC51,
	0x02FAA739, 0x0219B8D8, 0x004297F9, 0x02C9E294, 0x01C8B98D, 0x03822136, 0x01070DC7, 0x033B8F5A,
	0x03A691F2, 0x04C88944, 0x0321BD18, 0x019525E7, 0x006E4D3D, 0x0223142F, 0x02586C23, 0x02CE3574,
	0x0139B6CF, 0x05979F8E, 0x03823C88, 0x00DC061C, 0x053DC768, 0x0431E7C0, 0x03FB249C, 0x023017C6,
	0x05802EB3, 0x05B18E9B, 0x01E3715C, 0x038F38F9, 0x0135E718, 0x053514CF, 0x022B32D0, 0x02FDE6DD,
	0x048393A7, 0x004A0EA2, 0x018301D3, 0x023C411B, 0x03A815FC, 0x051ADB5E, 0x039FA1DA, 0x04917486,
	0x0383E7E3, 0x047DC29B, 0x053DA599, 0x0168E7DC, 0x00944A8D, 0x0061F2E0, 0x04E22453, 0x03F367CC,
	0x003A5AC6, 0x033B6DA9, 0x018DA9CC, 0x0501AF11, 0x04E2E5AE, 0x01A55C01, 0x025BE5EB, 0x005E36C5,
	0x0329E4C2, 0x003726E6, 0x02328B9A, 0x03BFBD88, 0x05A21EEE, 0x05CA6421, 0x0448D408, 0x04529D06,
	0x0143C2AB, 0x0366B790, 0x0344E776, 0x00D005D1, 0x02D3890E, 0x009FD8EE, 0x02343160, 0x02212E5D,
	0x0347659D, 0x05EFF182, 0x018B5973, 0x01A3DB7E, 0x0306FFF2, 0x0042C7C0, 0x00CF5FBA, 0x024CF65F,
	0x056C0978, 0x021B5946, 0x0352C416, 0x019B4636, 0x02B37A46, 0x0327F5CB, 0x01498A26, 0x04F13D15,
	0x001F9D8E, 0x001DFA59, 0x04F50BF0, 0x03CB29FD, 0x055AE84D, 0x0455A129, 0x04294BD3, 0x018226F7,
	0x059DBC97, 0x00F84B76, 0x00ECC283, 0x05DCA332, 0x02ECB657, 0x058B5EA9, 0x055F1D5D, 0x04563C9F,
	0x041DE6F5, 0x0571E963, 0x058A46AC, 0x05AF45B9, 0x0016C017, 0x033E37A2, 0x01FA2A24, 0x038DB9E3,
	0x0451D2D1, 0x04FB28F8, 0x00D5D536, 0x01E83CD7, 0x014E0220, 0x00B3C730, 0x04E7D9A2, 0x0385BC12,
	0x02CD7275, 0x013CFEE0, 0x00659884, 0x00E06F0B, 0x00172A90, 0x024BACF4, 0x042C94A2, 0x04DB2C3E,
	0x03B367AF, 0x03B2A77A, 0x02B288CD, 0x0583D3D3, 0x00469263, 0x00298EEA, 0x04E7DBA1, 0x04960445,
	0x01A69CAE, 0x04CA5D10, 0x04E5F53D, 0x037D04A7, 0x02462CE3, 0x025C01E6, 0x01FDF3A0, 0x02E4015C,
	0x0323BAE1, 0x001F2267, 0x0460B4A9, 0x059B06B5, 0x042CE737, 0x0406C390, 0x05CD98EA, 0x026C2264,
	0x057B0B7E, 0x0578DE94, 0x04D2500F, 0x00B5D638, 0x0414F5FC, 0x03F87263, 0x04B92791, 0x0109DF49,
	0x02BCB5CF, 0x0596BB1A, 0x00A5CB35, 0x00E80FEA, 0x04BC0323, 0x0454CADE, 0x01FD199F, 0x0152D079,
	0x05C820B5, 0x018AA84D, 0x01EB549D, 0x0579E9C4, 0x00AF1CBD, 0x014C1B35, 0x04781EC5, 0x0095BA00,
	0x011723C7, 0x02BE27E2, 0x0484061E, 0x01A558CB, 0x00FA3119, 0x00A29DC2, 0x014B8A8E, 0x003C82F0,
	0x05E26C60, 0x0311563E, 0x0571AAC1, 0x008B7455, 0x00A6B113, 0x049CA158, 0x04BFB6FA, 0x0135DB72,
	0x0011569F, 0x01AABE4D, 0x00FE4FFC, 0x05C9BAE5, 0x031A8B77, 0x03E4AD0E, 0x01578253, 0x00774720,
	0x03FBEBF4, 0x0096E966, 0x00B6B58A, 0x0180BCC4, 0x05C8F918, 0x0229A9D1, 0x03CF5C5C, 0x0139D1B9,
	0x05B40CC0, 0x05609756, 0x0124C306, 0x05F26FB5, 0x0462085A, 0x0264C836, 0x006ADE14, 0x01AD53FD,
	0x045F9076, 0x0269E8E0, 0x0208FA3E, 0x031A5F43, 0x0385F48C, 0x01AFE855, 0x004BA693, 0x0394C324,
	0x029B852D, 0x02F6F3A8, 0x026025EC, 0x0123FF86, 0x01DA5E9B, 0x05408938, 0x0536A67C, 0x03669DCC,
	0x0239B60A, 0x056949F4, 0x0377D09F, 0x03269D29, 0x01ABDCDB, 0x0007919E, 0x055BB26E, 0x05EF43BA,
	0x00841C39, 0x0249BE03, 0x053A717A, 0x03C68D8D, 0x0050E6E9, 0x03B3A38C, 0x03BB4ABD, 0x02F7F45E,
	0x035EFC75, 0x01EDD9AA, 0x011C4278, 0x014B7C0C, 0x026C0D2A, 0x00C1423A, 0x00540D8B, 0x03AB4263,
	0x050D41FA, 0x01EFA28D, 0x03CB3C8C, 0x04751962, 0x017CD31C, 0x029518BE, 0x058CCCEC, 0x0351A91C,
	0x03F42E7C, 0x049DF135, 0x0141D6BF, 0x014B0C01, 0x04E5154B, 0x03BB7CFD, 0x00D6469F, 0x039DFAE6,
	0x0049AB2A, 0x018AB5E0, 0x008B356A, 0x03D50DD8, 0x03D76E43, 0x045266CB, 0x0111FFCF, 0x05ED1BEC,
	0x03E6D775, 0x01A08060, 0x031D9301, 0x0345CFAA, 0x01ADA620, 0x019F6E36, 0x008C6683, 0x0134851F,
	0x026E98AD, 0x0188A5B1, 0x0335B09D, 0x052E696E, 0x03346709, 0x0136D385, 0x034B35AC, 0x05CD4685,
	0x0014A7AA, 0x03FFE9BC, 0x05E0C174, 0x00481876, 0x00F6C94D, 0x03BC68E9, 0x0321A893, 0x04BD234A,
	0x02CDFC10, 0x02F41075, 0x008AD759, 0x0269927C, 0x01C5B0EC, 0x0509E6DB, 0x02F99374, 0x0050C7AD,
	0x056C134A, 0x02369FEA, 0x036D122E, 0x05285E59, 0x00C3F99F, 0x02FFF5BB, 0x020509E3, 0x05C88569,
	0x0032999F, 0x02DB3D77, 0x01EDCDF0, 0x0081BB97, 0x018CC546, 0x057E65F3, 0x03DBE90E, 0x0517FD8D,
	0x00818A33, 0x0303948E, 0x012DA1E2, 0x008F464D, 0x05788CAC, 0x011B73CC, 0x05391AAF, 0x010F2287,
	0x05723A85, 0x05A66D82, 0x00DC477A, 0x007B17AF, 0x00484EBA, 0x0388E0B2, 0x024AB264, 0x045ADA04,
	0x0181F716, 0x00327633, 0x0587A51C, 0x04120BB5, 0x0180EC74, 0x0392DE68, 0x017F5350, 0x015DE185,
	0x03149B7A, 0x00B166C5, 0x01997E6E, 0x026DDA95, 0x007F4D20, 0x01FAB050, 0x02B7822E, 0x00244934,
	0x026369C9, 0x017458FA, 0x03D1DC9A, 0x046FCAD3, 0x017A541F, 0x03CD263E, 0x01A064D2, 0x048954B0,
	0x0168DDB4, 0x05C86F14, 0x0085D800, 0x02D120F7, 0x0304FFCA, 0x059BFEE3, 0x00136F97, 0x04570BCD,
	0x05D6205E, 0x0358887D, 0x04E07C09, 0x05375A47, 0x04F3BCCF, 0x05F5B200, 0x032E845C, 0x01719214,
	0x01BFFB71, 0x0374E7AD, 0x0117A4D5, 0x0099D14C, 0x01B20281, 0x052781C2, 0x0009CD46, 0x020BE8FE,
	0x024D807E, 0x02E8231B, 0x01A45219, 0x0400F6F1, 0x01A98C8C, 0x0345871E, 0x059DDDFD, 0x002E1AB6,
	0x00FB9C87, 0x038446F9, 0x0504567D, 0x0560BA5E, 0x058F32C8, 0x02D7014C, 0x01A811CD, 0x00D56B30,
	0x03E96A9A, 0x03EBD111, 0x01CE9AF0, 0x01F07ACF, 0x02828503, 0x01BAB2C9, 0x046339A9, 0x00F22E93,
	0x027886CE, 0x045EB751, 0x0421A648, 0x046D72D0, 0x03F1A11B, 0x0079022C, 0x04775A03, 0x050EA8F6,
	0x02D4F857, 0x02BC5F44, 0x01221411, 0x000296CD, 0x0453E8CF, 0x05A36A88, 0x04E4FBCC, 0x040E4714,
	0x02BAB6DB, 0x01CA176B, 0x020BFE6F, 0x05744B48, 0x02B82077, 0x046B3736, 0x025E7A84, 0x011A3D2A,
	0x03D320A6, 0x049E20EC, 0x00179407, 0x01C4930C, 0x007FD0D4, 0x02519DB7, 0x0437FDF6, 0x0220DF6D,
	0x04FAA70A, 0x043004F1, 0x007D6837, 0x02511FF2, 0x017600D9, 0x0010B505, 0x04B1A0C6, 0x00DD8743,
	0x01B5368B, 0x03D32D33, 0x0329A191, 0x0257CDBA, 0x03F9360D, 0x0096F985, 0x03F8A2D8, 0x02E57F91,
	0x0392CC9C, 0x011F06F4, 0x03A35860, 0x0136211B, 0x02D5B2CB, 0x0374048E, 0x03FD92CC, 0x03103CC2,
	0x00B7EEFC, 0x018C0680, 0x021EF149, 0x050E6287, 0x0419500A, 0x01D64396, 0x0143383F, 0x037B680B,
	0x0229A4C0, 0x027819E3, 0x02B9480A, 0x022FE208, 0x007DEF15, 0x0498F310, 0x000D7630, 0x0344AF5D,
	0x0211108A, 0x04AA55D1, 0x028873CD, 0x0090A44D, 0x011054B6, 0x025A815B, 0x044FC1D6, 0x05D046DB,
	0x03646068, 0x0391261C, 0x0330C3E7, 0x04BB5F3E, 0x03ECB8AC, 0x0055A4AE, 0x02BDEEF6, 0x016D0E49,
	0x0536F977, 0x04EBC637, 0x021DD309, 0x03CBC16E, 0x014FA8EF, 0x05359ABF, 0x00F75B42, 0x050DCC03,
	0x04FD7490, 0x05D7746B, 0x0326D5DF, 0x04227F89, 0x011A7367, 0x0085A53C, 0x041EA7A8, 0x048D8E17,
	0x026401CB, 0x02EB6CC9, 0x01D8A4D6, 0x01A84806, 0x05BD0EC0, 0x02CC2B1B, 0x055E3BBF, 0x02BE5E5B,
	0x00CC77F1, 0x01F4A67C, 0x0427BA76, 0x0212C4DF, 0x032256A7, 0x05553E24, 0x019ECE8F, 0x0188E685,
	0x03E9084C, 0x02D73BCD, 0x021E3C7C, 0x01F039B7, 0x00696B0E, 0x05608F67, 0x00725E4D, 0x00FC6410,
	0x01766B49, 0x00418634, 0x03302542, 0x026761BA, 0x0177DDA4, 0x03066008, 0x04643144, 0x02FC26FE,
	0x01A8C08D, 0x004F51A2, 0x059D1D99, 0x0290E21A, 0x00275AF4, 0x013D5002, 0x01047207, 0x028037F3,
	0x05CB063D, 0x042F9976, 0x0172095D, 0x0594F19C, 0x03C97CAF, 0x044727DC, 0x01711553, 0x056AE61D,
	0x02B85B5D, 0x00D271BF, 0x02C3A797, 0x013C0720, 0x05DBD05F, 0x014EB400, 0x0083FCBF, 0x04CC9D55,
	0x010A5B85, 0x00C3BEE8, 0x03CE1ECC, 0x02D6C654, 0x03130222, 0x0319999A, 0x03B6E975, 0x01FCCC1C,
	0x01BEEC54, 0x04D4A67B, 0x040C7CF0, 0x00414CAA, 0x04D00C0E, 0x010C56E6, 0x00B4C7EC, 0x03D8E36D,
	0x057CAD77, 0x041B18FC, 0x0151C968, 0x019B5E5D, 0x042752EE, 0x05000E15, 0x01DB3362, 0x04A2C082,
	0x02F8DEE4, 0x0422C0E9, 0x036B8762, 0x017FF7A8, 0x02D3EF94, 0x04B472C9, 0x048456E4, 0x00F4BD1F,
	0x009052F6, 0x05D7F16B, 0x040084B5, 0x0105C4CD, 0x021A467E, 0x03BC7C22, 0x0557EBB1, 0x04392CE6,
	0x01FB2B1A, 0x0008EB62, 0x0445DCF7, 0x0092D5D9, 0x04A69F5F, 0x016264EF, 0x04414497, 0x0154B835,
	0x031679EB, 0x05014E54, 0x01BED60D, 0x048B404B, 0x01C57715, 0x00AE0670, 0x0440854C, 0x0380B4B6,
	0x01C7E2B6, 0x05056091, 0x037522DB, 0x029E547F, 0x040D7DFE, 0x02EA8F76, 0x03A50537, 0x0179A38D,
	0x05E56F87, 0x018F93E8, 0x045CB387, 0x0363F8BA, 0x04A74A99, 0x055824F7, 0x01428FCE, 0x04F14AAF,
	0x03F031A6, 0x0313B60D, 0x05A13961, 0x0526B53F, 0x03697DDA, 0x049A4E33, 0x03F249B9, 0x040F9B18,
	0x05B22740, 0x05B13382, 0x045AC512, 0x01A34C44, 0x01523D05, 0x0321338D, 0x047E3633, 0x0331451F,
	0x01B63359, 0x01C2D47F, 0x04DE7924, 0x04F52762, 0x01AAAE1C, 0x00673950, 0x01475381, 0x009D89C5,
	0x056E743C, 0x04443097, 0x0082D655, 0x0067FB16, 0x000C6DDB, 0x0416FBAD, 0x005724C1, 0x005B5F41,
	0x0304F212, 0x039DDB7D, 0x041B3996, 0x055A9032, 0x019DE99B, 0x05C4B8E7, 0x05E1F94B, 0x00C4ECBD,
	0x05C6CFB6, 0x03B1422B, 0x05ABA180, 0x016EE3E5, 0x05BE135B, 0x04097DCA, 0x0251F352, 0x0087860A,
	0x05A954C3, 0x0414D255, 0x050798B0, 0x057588E2, 0x02E9EFCE, 0x032DB7A2, 0x03E2CB34, 0x009E0718,
	0x05C16E85, 0x00756599, 0x0415CFD4, 0x04FE1409, 0x0077AAE2, 0x0077F5BC, 0x03CE65D5, 0x04E53021,
	0x01B58FA7, 0x03644133, 0x0555747D, 0x02B5CC29, 0x05BC06DF, 0x0059DF8E, 0x0595231A, 0x00F57C65,
	0x018BFC83, 0x042A4DE5, 0x01976D03, 0x0017706C, 0x009826A1, 0x02A61BA7, 0x056DB8CA, 0x056491EA,
	0x01A8617C, 0x00C2377C, 0x01A5836A, 0x02DF5260, 0x02607D84, 0x00A29823, 0x031FBAC2, 0x0419A9EA,
	0x039A1BEC, 0x0220E43B, 0x01A18FCD, 0x057B90A4, 0x01F0A675, 0x036FAE53, 0x02998D6C, 0x009DBA86,
	0x03501941, 0x04F48047, 0x02F611BF, 0x023AA7B8, 0x03E5181A, 0x0556CCB7, 0x043F1464, 0x0253461B,
	0x042F20D3, 0x00412032, 0x05DEAC6A, 0x00905081, 0x02E4A221, 0x04196CD7, 0x007B53DB, 0x01454BCE,
	0x048A4F50, 0x01C8F894, 0x01C7D511, 0x05C11F53, 0x01FF1CD3, 0x0334FD20, 0x034ACB2A, 0x0594B1EE,
	0x04B4D4DE, 0x03D250D2, 0x0468F23F, 0x026AFDD7, 0x01AD3844, 0x057CDDF8, 0x030A1734, 0x022C84C2,
	0x0598660B, 0x0138F456, 0x01B33F88, 0x027C78C9, 0x010CDF34, 0x01BB9CA0, 0x03DC8ACC, 0x044AC41F,
	0x00EFC77D, 0x037FA17C, 0x0407C0A9, 0x02557ECB, 0x037F888A, 0x05AF3ABC, 0x052B7E45, 0x0494770C,
	0x0206FDBB, 0x010DD9EE, 0x04CA5426, 0x058413AE, 0x03192266, 0x022D1EBE, 0x012AD189, 0x02D047FE,
	0x01987A01, 0x00D5E36A, 0x05CF62C9, 0x01BD6071, 0x00997E3B, 0x04BD4B24, 0x04354817, 0x015AB65F,
	0x0538DBF5, 0x03088A9B, 0x017DFEBD, 0x009BA827, 0x05E0F763, 0x0383E34E, 0x040A5DEB, 0x0313258E,
	0x0161524C, 0x04DE5BF4, 0x02514772, 0x028DB863, 0x0243E4EE, 0x0133EDCA, 0x05D13979, 0x027AFA73,
	0x0073A70E, 0x0178A931, 0x049165E1, 0x00E4F57C, 0x05699A36, 0x0130B819, 0x03D76A7B, 0x029B1F6F,
	0x026F3584, 0x042CD928, 0x005F8499, 0x0302CB82, 0x0087F9A4, 0x001352B8, 0x034C518F, 0x0439175D,
	0x0560ECAE, 0x033E5137, 0x007C9F6C, 0x000A4813, 0x03D8383C, 0x027DB2E3, 0x006683A4, 0x01F52536,
	0x042F1DC0, 0x0401BCC1, 0x053299FB, 0x048C775F, 0x016035F6, 0x03FAFEAD, 0x0069215D, 0x02CCAC3A,
	0x0231FF8D, 0x03A8B6C1, 0x004F40CE, 0x004D519E, 0x054A025C, 0x0024E494, 0x03718BE1, 0x00CBED18,
	0x0012F87D, 0x04107AEC, 0x03A46E27, 0x054F2761, 0x0166C681, 0x04925B53, 0x053C929E, 0x05536241,
	0x0240DEA3, 0x02FE0DA8, 0x03CFEC4B, 0x0564E405, 0x00B21F3E, 0x04869BB6, 0x029E04AE, 0x05403875,
	0x051B762C, 0x01478B61, 0x031CD10B, 0x04232E51, 0x0274B391, 0x0015B11A, 0x005457FB, 0x0150DAA0,
	0x00D2714B, 0x00FEB9C7, 0x053FC35B, 0x03853523, 0x001DD799, 0x0053202C, 0x00F4DC61, 0x05AB3CB5,
	0x00821272, 0x025C87DF, 0x016FD0A0, 0x039E9C4E, 0x0364522A, 0x04250791, 0x0358A965, 0x040B7827,
	0x049FB8C1, 0x04A6B703, 0x051608FC, 0x04FEC0F2, 0x05912C09, 0x0144CC5C, 0x05E03EBC, 0x0387DF4F,
	0x00AECCA0, 0x05EA250D, 0x01FF31C0, 0x00CC80A1, 0x0005E319, 0x02453ED4, 0x039A3210, 0x0177F690,
	0x01DBE079, 0x013682E6, 0x01DF8F56, 0x0424E6CC, 0x04495BB7, 0x025CF442, 0x05A7BCC1, 0x0206AFB9,
	0x05A4325C, 0x02D27882, 0x05D06A7F, 0x00AAC1EE, 0x0168044C, 0x0391BBE9, 0x00DCB5DD, 0x04B831C6,
	0x05CFA369, 0x04850221, 0x008FA30A, 0x0593FA90, 0x022396E9, 0x0283CEF0, 0x01448BA6, 0x02E52953,
	0x047E3E09, 0x0384C589, 0x00178CAF, 0x02E19214, 0x05579C39, 0x00C1CF1B, 0x02BD6D87, 0x042D2769,
	0x01D797D6, 0x058505AC, 0x045A032F, 0x03C67645, 0x0571CE2D, 0x00CB670C, 0x0471CE95, 0x0109D7BA,
	0x01D01F7E, 0x02D905F1, 0x000BD097, 0x03175C31, 0x047A6528, 0x0210861E, 0x04E71F64, 0x05D1ACB5,
	0x0019FD51, 0x02130204, 0x00296C22, 0x004F58AB, 0x04CCAE87, 0x029FB9D2, 0x05A2E618, 0x03777B56,
	0x04787B06, 0x030F14F3, 0x018A3ABA, 0x00D1CB02, 0x03D211D9, 0x00A7E12D, 0x00116D70, 0x005F90BF,
	0x0483DCAB, 0x03697381, 0x0237783F, 0x02C47F46, 0x02A893A4, 0x05735DD7, 0x04DEA02E, 0x05C7FC59,
	0x0132D226, 0x05AC1A33, 0x00AE7AEE, 0x021985A4, 0x0245A296, 0x01B9DFD8, 0x05462F79, 0x04183CF1,
	0x0596DA2F, 0x052812E5, 0x04B130ED, 0x04D68188, 0x04BC7C9F, 0x0278C6BE, 0x0044FF92, 0x00E686A8,
	0x053DBC46, 0x036F699D, 0x052BE9DE, 0x0299EE8F, 0x051B46EB, 0x04088C16, 0x03ED2C95, 0x01D79832,
	0x017C4CE0, 0x0005B1AF, 0x00145028, 0x03B919CF, 0x02EAAFAE, 0x0390373E, 0x056012FB, 0x054499D9,
	0x049D07EA, 0x025A600E, 0x031F452E, 0x04C92A3D, 0x03A39075, 0x05CA1BB6, 0x024A53A1, 0x05187069,
	0x02A11EDF, 0x02BF0836, 0x047BEDB7, 0x0259FECA, 0x024029A2, 0x00FBA6DF, 0x0575E9C8, 0x05807A1D,
	0x05690F6E, 0x05E0CF07, 0x035EB77B, 0x02F2936F, 0x034AF777, 0x05490306, 0x0284BA2B, 0x04CE5748,
	0x003C7C2D, 0x02FDC4C1, 0x04E99BF5, 0x04AD9B38, 0x057992C4, 0x001F2D07, 0x0542058F, 0x0396D3B5,
	0x0101F545, 0x002FBC97, 0x010BFAE5, 0x01B196F2, 0x04E91D38, 0x051C947B, 0x017A47C1, 0x03704170,
	0x03E7A92A, 0x02F15F82, 0x03A7AB21, 0x015C9BFC, 0x031A4393, 0x0595DE74, 0x0509C07C, 0x01FCD50D,
	0x027728F4, 0x05B986AA, 0x054C13F1, 0x01DBFF1E, 0x03BF18F2, 0x0030DEAB, 0x034187CC, 0x02145B83,
	0x001AA668, 0x02859C78, 0x01430964, 0x035CC437, 0x05B38353, 0x0468AA86, 0x01232803, 0x043345E5,
	0x04FA1DB9, 0x0293398E, 0x01B8F91D, 0x0292BEC4, 0x035F1197, 0x045D8691, 0x0510EA34, 0x01721F74,
	0x02150E69, 0x0155DAFD, 0x0502E7E5, 0x04CD6806, 0x00739063, 0x01C14370, 0x0267B19E, 0x02CB5A7B,
	0x033CBB22, 0x01A9D50D, 0x0506FE32, 0x03935FA1, 0x014DA2EC, 0x02871C27, 0x03957C5C, 0x03FBCD18,
	0x003E700E, 0x045755F4, 0x00170CF5, 0x048F4A0F, 0x001290CC, 0x043AE315, 0x025DBFB8, 0x04D8AE66,
	0x0062A1AC, 0x0585585D, 0x01948A02, 0x00720F2A, 0x028F9D72, 0x00B69539, 0x00654C02, 0x04AAE5CA,
	0x05128F35, 0x0281F9F9, 0x05EBC01A, 0x038394E7, 0x04F80BD4, 0x0198AB12, 0x049742FA, 0x02B6C347,
	0x03613A9E, 0x03AE48B9, 0x02F38899, 0x056E6485, 0x053E6D58, 0x01B37A69, 0x00030A29, 0x030055FA,
	0x01B4AAF7, 0x0074626E, 0x01196996, 0x049558A4, 0x0321C16B, 0x038460B3, 0x0270372F, 0x04BE724A,
	0x02409D78, 0x00D10C1A, 0x01C1DE14, 0x020783B4, 0x037FF13F, 0x025057C6, 0x02F0CA1A, 0x012411B7,
	0x04C8B21D, 0x014F2A89, 0x01AA62A8, 0x032B3BD3, 0x03ACCFE6, 0x00902C7A, 0x03616C91, 0x03E26B5D,
	0x02681FE2, 0x04874313, 0x00E319EA, 0x0585D743, 0x0227B727, 0x02AF28E8, 0x0532A398, 0x03038B20,
	0x0594CED5, 0x0418521B, 0x042C073B, 0x03A6F14E, 0x02AAF314, 0x01ED977E, 0x03800ABE, 0x028631FA,
	0x0308BF34, 0x005F1F6C, 0x0266A414, 0x0360193C, 0x03358EA2, 0x04823964, 0x0237C05C, 0x0238E6C6,
	0x01AB41A6, 0x05D7F135, 0x00EED333, 0x05D96FEA, 0x037982E8, 0x031435A5, 0x05A8EEA3, 0x01CDB1E6,
	0x03FCB53B, 0x048CC9BE, 0x03CA9954, 0x0455E732, 0x03951FEF, 0x018BD336, 0x01623D36, 0x032791A2,
	0x01C8279C, 0x003D2FD1, 0x02239BEC, 0x02AA9A50, 0x04537DD0, 0x00B7A966, 0x002934E9, 0x0276740F,
	0x01C73BCA, 0x00039B4B, 0x03BDE163, 0x045BFDA3, 0x057D334F, 0x0493BB6A, 0x0498439C, 0x000FFD88,
	0x01333D45, 0x03809571, 0x01EB5228, 0x03128C8A, 0x02821903, 0x0416F850, 0x0573E377, 0x0211ED1D,
	0x0199EF4B, 0x04FDB854, 0x01E3FB75, 0x02E925EE, 0x03708244, 0x03001AA7, 0x04237708, 0x04886BFA,
	0x03CC7E86, 0x03BBF461, 0x0593396D, 0x02B4D0EB, 0x04E9DF09, 0x02DC7573, 0x03598055, 0x027EC15B,
	0x000AEBDD, 0x010DB7C6, 0x038AA712, 0x0229FC65, 0x021814E7, 0x006CF859, 0x0566CD39, 0x0302D796,
	0x00697609, 0x027D5118, 0x054B1845, 0x001DBFB0, 0x05CA8371, 0x0058C6C1, 0x03EFD8B4, 0x0068CDA4,
	0x0176B2C2, 0x045D6B54, 0x05C1AD51, 0x053EF6C9, 0x004E7F83, 0x011D1E07, 0x053BDC84, 0x057D967D,
	0x02367FE0, 0x0099F7BC, 0x056C1080, 0x0120064F, 0x00977CF4, 0x02449461, 0x01C57AA0, 0x0191A7C5,
	0x041DAA84, 0x0422C348, 0x0325FB69, 0x02A489FB, 0x02CF210E, 0x05DABFC7, 0x047AF645, 0x00A39C05,
	0x038DC84E, 0x000B6E05, 0x03B4EB7A, 0x00960058, 0x04F5F404, 0x05E39137, 0x000DA74A, 0x0159C328,
	0x03CDCCD7, 0x0031FEE6, 0x018C4AA2, 0x00101651, 0x00437FEA, 0x044BA3C2, 0x028C8D42, 0x0106C9BA,
	0x03419C27, 0x05BA38A8, 0x0546C9A7, 0x00427DA2, 0x05B36FDF, 0x055D50E5, 0x030473BD, 0x02FE1B98,
	0x01C5B321, 0x012742BE, 0x03AC598B, 0x009D6B9E, 0x02DC9867, 0x0157D540, 0x03E96574, 0x000364B0,
	0x046E38C7, 0x05A59044, 0x002228A8, 0x01CAA6F8, 0x053DFBF1, 0x00414042, 0x03E411BF, 0x03039275,
	0x04BAA823, 0x0430AD98, 0x02C233CE, 0x02AC798E, 0x017AD9EC, 0x02A20473, 0x02A61305, 0x029A53CE,
	0x0384C70B, 0x01F92A58, 0x0062FF15, 0x02F09824, 0x035B430D, 0x02DF14BA, 0x05605841, 0x01D07C3E,
	0x04897E3B, 0x04912F89, 0x03FA63AD, 0x053F981F, 0x00984CA4, 0x02C93687, 0x02BD7AFB, 0x015146EA,
	0x01B0C22A, 0x05D243BE, 0x042F5DC9, 0x01A70B35, 0x01A2F611, 0x04C2EE2E, 0x0481FAFA, 0x019D92A1,
	0x025F00BF, 0x03FE0332, 0x05CC69C9, 0x00056407, 0x03D3E8E2, 0x0582FDB3, 0x006EC6FC, 0x0086105D,
	0x058B9D01, 0x0445AA5A, 0x00BAE46E, 0x05F44127, 0x04FF033A, 0x0505A3DB, 0x01DE86F4, 0x003CA1CD,
	0x0577E928, 0x03A1F757, 0x00619227, 0x002CC1D1, 0x011FE6E3, 0x01D16CDE, 0x04A7466A, 0x05CEBE15,
	0x02B96086, 0x04F874EE, 0x007638A6, 0x033C45E5, 0x05F2AFCB, 0x013CC97F, 0x0384866D, 0x01D5CE0F,
	0x01F2536B, 0x01D981F1, 0x02280336, 0x01F9C29C, 0x00C27876, 0x00D7CFB7, 0x037FB6BA, 0x053BF9DD,
	0x0245B4AC, 0x02301DC1, 0x01CABA6B, 0x01806795, 0x02494609, 0x00DEAF5A, 0x00AFF90D, 0x03E9F9CC,
	0x04EFDDD4, 0x0384D7B3, 0x03A9A94D, 0x01A67069, 0x0397B0C0, 0x03E01D29, 0x038BD55B, 0x0230F3AF,
	0x01B4E389, 0x00155FAF, 0x01E6F100, 0x034D4DDF, 0x02AA9302, 0x02C3B439, 0x042C22C9, 0x02C3CC23,
	0x02B171B0, 0x0473DEC9, 0x052A743B, 0x04DED217, 0x01B2C87F, 0x02122C3C, 0x0119D605, 0x03A7EBF8,
	0x00F4EEC3, 0x05472AE9, 0x015FBFAC, 0x03AABAE0, 0x00103DFB, 0x0262CBFA, 0x0453BBC4, 0x00DCAC24,
	0x02601329, 0x048A2340, 0x05AB9B0B, 0x04224F68, 0x05A67341, 0x01AA8B64, 0x0465EA2D, 0x000AD843,
	0x01E5DA55, 0x0293A50D, 0x0047D6F3, 0x01EDA602, 0x023393E4, 0x00CEF706, 0x03DB7798, 0x008777B9,
	0x05E31F56, 0x0473CA7F, 0x01C771C9, 0x02A04CC1, 0x0595F2D8, 0x0025B769, 0x00B06D31, 0x01A68A48,
	0x02DAF642, 0x018A8F79, 0x010B6DC9, 0x04B4D519, 0x04660EE9, 0x03B2BBD7, 0x00CCE3CD, 0x05B8081F,
	0x033337C0, 0x014CAA84, 0x00AC2DB0, 0x01654DF5, 0x03C5D4FA, 0x0203D841, 0x03770166, 0x042EC56B,
	0x027FF5F2, 0x01AD0976, 0x05BC7FC4, 0x0036C3AE, 0x04A2AFD1, 0x01A27667, 0x04E306AD, 0x042B2FF4,
	0x02B800F7, 0x014A3BA4, 0x02ED6B22, 0x006D4CEC, 0x029C8204, 0x04800B8F, 0x02DC8B66, 0x05217073,
	0x04FE9996, 0x0385ED31, 0x04EB91FB, 0x008238A3, 0x05E2604A, 0x04144491, 0x00143B50, 0x0030AB2B,
	0x013BE36C, 0x03B6A25E, 0x01609BEB, 0x019BC203, 0x02243B3B, 0x01CA42B0, 0x02B055EB, 0x0054CC49,
	0x02A2EC64, 0x04322B31, 0x01CB5F19, 0x022E3059, 0x02C1C6D7, 0x031A0B43, 0x00F7D861, 0x05EDE2F4,
	0x02F700F4, 0x039DAFF1, 0x03E0F21C, 0x058BCE84, 0x01B15803, 0x020EE265, 0x00F2BF1D, 0x0051DB99,
	0x0338AB90, 0x00B2109F, 0x01E8E89F, 0x00A43DCF, 0x0580DC12, 0x000DB18E, 0x04C57C68, 0x0373631A,
	0x00ECD64D, 0x0093B8D1, 0x04B07E72, 0x04E87BDC, 0x05AC8AB1, 0x03BED0E2, 0x005F7A2C, 0x01C24285,
	0x05E3AB70, 0x04F93DFF, 0x007D6692, 0x04CE9D07, 0x05050C1D, 0x01ABE85F, 0x03639C83, 0x03C47CBC,
	0x023962DC, 0x035CE521, 0x02F1461B, 0x0441F59D, 0x0054F715, 0x024C2E67, 0x003DF234, 0x00D0C3E1,
	0x05DBF095, 0x01EE3FF7, 0x028A299F, 0x0460F93E, 0x031FD9E2, 0x03190C88, 0x043FF552, 0x05B617B1,
	0x05C6B761, 0x0147E7D6, 0x00201975, 0x050E8E0D, 0x03379BDA, 0x0180EF43, 0x0175626C, 0x05BA12D3,
	0x03B3175E, 0x03FE2B9B, 0x03B56759, 0x008EFBE1, 0x05EFA213, 0x00BD34F9, 0x04D4AC9A, 0x03FA5A17,
	0x03B45166, 0x04DE4154, 0x04F7E149, 0x05E4D560, 0x02E09CD6, 0x02135BA4, 0x017F5E62, 0x000E512A,
	0x03297E2D, 0x014AA99E, 0x02253A5D, 0x0049D4BF, 0x0390829E, 0x040CBCEE, 0x024FCDE2, 0x03383085,
	0x059879B2, 0x01F432E1, 0x03D106E4, 0x03D2D396, 0x0201C69F, 0x001C3EC9, 0x05D403E1, 0x03CBECA0,
	0x00E5B36C, 0x0292A6AF, 0x047DBD55, 0x04B4EB16, 0x004D4BE3, 0x05B3FC2B, 0x039347CA, 0x043B1967,
	0x0287BA92, 0x0513BBFF, 0x0559A3F1, 0x0203CF7B, 0x04246658, 0x03B7B31F, 0x04446CA1, 0x02D5391D,
	0x007339BC, 0x01798D87, 0x0461DF31, 0x0052D113, 0x00568D6B, 0x0091B8B8, 0x01774BF0, 0x02CA1C3A,
	0x0587C696, 0x00669984, 0x026C0ECD, 0x010AAB24, 0x004B8026, 0x00BF5E4E, 0x05C0E817, 0x04A0BE3F,
	0x02F5E2A7, 0x00FEF91D, 0x02E81A70, 0x0256A18A, 0x02AE2509, 0x0357F851, 0x05C1A16A, 0x0066E496,
	0x04575EC4, 0x0098246E, 0x009172F2, 0x04BF1344, 0x02D46AA8, 0x008154A3, 0x058008C8, 0x0011B28D,
	0x0105B3B0, 0x0504E5CB, 0x01724A77, 0x017A8C07, 0x0086E117, 0x032EBA09, 0x0377EB44, 0x0100EBB2,
	0x01158EB4, 0x055BCCB1, 0x00EE398F, 0x04538B58, 0x00362B74, 0x03B3D52D, 0x049057F7, 0x03F437DD,
	0x002CD38F, 0x00B991EF, 0x042C1857, 0x01AD57BD, 0x05A49ABD, 0x0176BEAE, 0x039FB1C0, 0x054F05F9,
	0x05394EB0, 0x02040A35, 0x00B0E0F0, 0x036F7943, 0x03C2BC39, 0x05ABB1AA, 0x007F8F8B, 0x019DA6B5,
	0x001D48AF, 0x024CCFC7, 0x02489DCD, 0x041FBDC1, 0x0504B729, 0x02895FF9, 0x01D1C8FF, 0x0355805D,
	0x040155D2, 0x05636225, 0x03B0581B, 0x04D1691C, 0x00837679, 0x000F7B7E, 0x036AF31F, 0x0571C87D,
	0x022E3A90, 0x05D5B42F, 0x023B744C, 0x018C09C1, 0x004A3DAC, 0x00FDBB58, 0x04BE73A6, 0x0025074B,
	0x01024928, 0x01443E6D, 0x042D119F, 0x0102F30C, 0x00485CF8, 0x01809C08, 0x0595C12D, 0x00EB9722,
	0x02A178D1, 0x01579404, 0x038358DF, 0x04F4EB37, 0x011F9798, 0x051A93C2, 0x01D78E3E, 0x0398B0F9,
	0x00B88559, 0x0086794B, 0x00A2097D, 0x05ED912E, 0x03848ABC, 0x025013F6, 0x0397E0FF, 0x02C9DCAB,
	0x01B15B59, 0x0479CE50, 0x00F4DE0A, 0x034C4373, 0x03DB505C, 0x030D3648, 0x05B7FFEE, 0x0440C3ED,
	0x027D7EDE, 0x021C9731, 0x0013086C, 0x01A05890, 0x047ECB78, 0x04A714F8, 0x0406E895, 0x043D1382,
	0x03F6B329, 0x03EBF133, 0x05B4ACE6, 0x04243A95, 0x02EED55D, 0x020BFD1D, 0x0373059D, 0x00CDBED7,
	0x051AC8D7, 0x0514909F, 0x009889A2, 0x0285CE4B, 0x03EB242A, 0x04236F9E, 0x0391D780, 0x047CBABA,
	0x0518C6B0, 0x002A51B5, 0x0071FB5B, 0x01816349, 0x052E64DE, 0x00B6209B, 0x02788127, 0x001159F1,
	0x001AC3E7, 0x00B7EB55, 0x02DF7E20, 0x02F44049, 0x04B70945, 0x04CA4106, 0x04414C0D, 0x03E61C7B,
	0x03AC794B, 0x03DC692E, 0x01E180D5, 0x02B4B5D6, 0x053ED674, 0x0206B2E0, 0x011901AD, 0x0483073E,
	0x042396F0, 0x02835247, 0x00575A32, 0x005AB760, 0x004E6155, 0x04D187CC, 0x0527F125, 0x04C16605,
	0x0278EDA7, 0x037EEA7B, 0x03FE828A, 0x02BF9862, 0x038676DE, 0x052DA60D, 0x02E68971, 0x0015DB8C,
	0x0464B1C6, 0x0028302B, 0x01845168, 0x0086DD5F, 0x0053981C, 0x0101AB9B, 0x021C6572, 0x0030DA34,
	0x054DD190, 0x025E9C87, 0x0040F697, 0x0026011F, 0x02D4F8CB, 0x0568E9AD, 0x015CBB8F, 0x03102DF5,
	0x01A87A17, 0x00884DA6, 0x00B1C6B5, 0x046524D3, 0x034B315D, 0x01C85632, 0x009D5ADE, 0x02BC561E,
	0x04D9C392, 0x0513E2CD, 0x00ADBECA, 0x039A8E54, 0x036797F0, 0x04122E0C, 0x03B0699F, 0x0318FF4C,
	0x053A09DE, 0x021A611B, 0x0433EB17, 0x05AB7FE3, 0x01BDE75F, 0x052668E4, 0x03DF062F, 0x0126DB70,
	0x01B59752, 0x04DADB55, 0x03C25422, 0x013CA709, 0x04D5DA71, 0x01E43F86, 0x05CEB7CE, 0x0488B79F,
	0x0127E63E, 0x044394D2, 0x02F3BE3B, 0x032F64B1, 0x05DB42BE, 0x04D8CD2B, 0x0392EC27, 0x0152AC75,
	0x00686146, 0x045B07CE, 0x052AB017, 0x046BD0B0, 0x009C6722, 0x05B22F49, 0x05565745, 0x0462DDF7,
	0x0207B240, 0x02D4FEC4, 0x01CBB09A, 0x00AB22E1, 0x0350BEC3, 0x0225B119, 0x02AE54FE, 0x00519121,
	0x01F1C3E2, 0x01B41C48, 0x01EE644E, 0x04555C92, 0x04C47414, 0x028A756A, 0x00F3CEDD, 0x059FEACF,
	0x0520E46B, 0x0323F79A, 0x00DB90CC, 0x03D4ACA1, 0x055E8F41, 0x029FA8A8, 0x050873D1, 0x057CD04E,
	0x0556DAFE, 0x04C3CD5A, 0x03B54CAE, 0x052AE812, 0x03057664, 0x048FF22C, 0x03CD7516, 0x0452E948,
	0x04E73F68, 0x03D12975, 0x0479B820, 0x01F9580C, 0x0122CEBB, 0x0268E18A, 0x029AC272, 0x00060BC4,
	0x040E3FEC, 0x0021250B, 0x02CA8BBA, 0x01C2924E, 0x01D7A038, 0x042C4ECB, 0x0225BE42, 0x0212A756,
	0x0322BDED, 0x02A67DD8, 0x03151F08, 0x0219FCD2, 0x001262BB, 0x030FF83D, 0x04D54005, 0x02A49163,
	0x00E746FE, 0x0329200C, 0x013CF59C, 0x02069945, 0x0562FFFE, 0x0430E56D, 0x03816DF5, 0x01AA6101,
	0x007F5E24, 0x019BC48E, 0x05B13D07, 0x05D0268A, 0x02F01A6C, 0x0004CEC9, 0x01E47DB4, 0x04EC03F8,
	0x01BDA86B, 0x0357503B, 0x039119C0, 0x00035503, 0x000F70BB, 0x033D77B4, 0x00AB4095, 0x0149C340,
	0x036B5101, 0x04F90279, 0x049606C6, 0x04E29F6A, 0x04014D37, 0x02CD5E53, 0x05DFE2B1, 0x010EA072,
	0x0079D865, 0x036FF7F0, 0x0101F30B, 0x051A7E07, 0x05983403, 0x05DC161A, 0x058962C6, 0x0434D3E6,
	0x01E4C50C, 0x03C8E3D3, 0x023A20CA, 0x05BC8497, 0x05C55D32, 0x01AAEBE7, 0x0102831F, 0x01617DDC,
	0x039412C6, 0x05C6114B, 0x0342F167, 0x0172F917, 0x0183D7B0, 0x01C5AFE8, 0x0247A0D8, 0x055C55A3,
	0x03B7CB5D, 0x005B0314, 0x04B30726, 0x04D9B414, 0x034DAF6C, 0x02520BDB, 0x039C4915, 0x0115DE42,
	0x05A93E61, 0x01D45C5A, 0x04CB9710, 0x01643BD0, 0x033A5A32, 0x0487B00C, 0x03504972, 0x03B3A966,
	0x00CED0CB, 0x023C7409, 0x05F12167, 0x04E9ACD9, 0x01F5974D, 0x01636F52, 0x00E139D6, 0x0470B58B,
	0x01B082C3, 0x03AAB40C, 0x01ED18F9, 0x03401CA3, 0x001830EB, 0x011B8D20, 0x03823E1A, 0x00F63F03,
	0x04389A0A, 0x03ED5CBF, 0x00D904F9, 0x0074E2F6, 0x047765E1, 0x01779A1B, 0x0254C7C5, 0x00D0FCB9,
	0x036B0844, 0x0545566A, 0x00262469, 0x04F85D99, 0x0372CA52, 0x03290ABA, 0x01131892, 0x012EC4F9,
	0x05D81B8B, 0x05B49FBA, 0x010179A3, 0x058C0973, 0x007D344D, 0x05B246DA, 0x00019B6C, 0x0181A683,
	0x04FB9385, 0x049CB8D0, 0x00306ACC, 0x05047A0D, 0x00220A16, 0x05880DC2, 0x01F0C9F5, 0x0518435A,
	0x056382C7, 0x03743977, 0x044D424A, 0x016A3911, 0x053F1F69, 0x0579BD25, 0x03136BDC, 0x0482BF11,
	0x049725A0, 0x04553E94, 0x00ECB1F9, 0x017112C5, 0x048891ED, 0x0012A1D3, 0x017F39C2, 0x05DD4509,
	0x032A2565, 0x05D0DC3D, 0x056B6FAC, 0x03506D91, 0x034A80AE, 0x048060B7, 0x00C27FB6, 0x050E411E,
	0x00047190, 0x00D79EDC, 0x0208040B, 0x040904D0, 0x01D05E66, 0x006F1562, 0x02069D3C, 0x05577709,
	0x050ECA45, 0x017E97D7, 0x02A35509, 0x01C3A360, 0x03C8D354, 0x02398656, 0x032DF3F5, 0x0412F6DA,
	0x005048F4, 0x04A58680, 0x01C3722D, 0x00EE753A, 0x01E9D513, 0x03148C65, 0x03C960B2, 0x0519D92A,
	0x028E4BF2, 0x0576A18F, 0x02C365C6, 0x019C3A97, 0x012A92A3, 0x05AD084E, 0x01579C55, 0x046FFCB1,
	0x04F0707B, 0x05BF225E, 0x05D48911, 0x03E0BD58, 0x02B62D33, 0x04F91274, 0x04E809D8, 0x0524E47E,
	0x05BBEDE9, 0x02568236, 0x00A9F96E, 0x00D27A3B, 0x05766930, 0x01838D38, 0x05070F7A, 0x027E0FEE,
	0x0584434E, 0x047CCCBC, 0x010862B0, 0x0056E929, 0x0288CFF5, 0x01F3C8A3, 0x033C2921, 0x01C8C802,
	0x02848758, 0x046B6170, 0x00BC73D4, 0x00567273, 0x0149C4D5, 0x029BA485, 0x02957071, 0x037408F0,
	0x02EF807F, 0x006E6B51, 0x0522C8EA, 0x00178208, 0x039138DE, 0x01C0BCCC, 0x026A1320, 0x03EEF775,
	0x04B8AF4E, 0x05AE04BC, 0x055678ED, 0x02D70CAE, 0x00F3FDC8, 0x03849E8B, 0x03FD1251, 0x0450FC90,
	0x00BEDAFC, 0x0299BD5F, 0x0589D673, 0x022196B2, 0x03C64F60, 0x041E682A, 0x039E8A61, 0x03271A68,
	0x02D370C4, 0x02523B25, 0x035A9C35, 0x04F2A3C9, 0x04E1C102, 0x057CB589, 0x0035B9CF, 0x036501DD,
	0x011DE8D2, 0x054CE4C2, 0x048CD61C, 0x03281C8E, 0x040346CF, 0x055489B0, 0x0168E9B4, 0x05478604,
	0x00867C71, 0x053A1C2A, 0x059F88E2, 0x00165248, 0x03D47F5F, 0x023FA6D0, 0x0458C007, 0x0556A37F,
	0x02F7DF37, 0x05D4FDC9, 0x019CFF5B, 0x020283AC, 0x042998F5, 0x01F07AA5, 0x00CD8692, 0x040831FE,
	0x005C1630, 0x012CE94C, 0x040AE14C, 0x000C8ED2, 0x02507F73, 0x00790F0A, 0x04F18C24, 0x03CE4CA8,
	0x02E7B298, 0x0428B9C1, 0x043A40B8, 0x05667777, 0x00C2EFF1, 0x0375FA93, 0x02B624FF, 0x0208B441,
	0x042D37CC, 0x013CDF65, 0x00B8959D, 0x05D058C6, 0x0259F7F3, 0x04E912A0, 0x00ECB572, 0x03F1CB94,
	0x01AC66C3, 0x03C39057, 0x0562B664, 0x03693CB9, 0x037CF7FD, 0x05531F8C, 0x0125F9BE, 0x004CB48B,
	0x014629D1, 0x035C5EB2, 0x01D92566, 0x0345CFD0, 0x021BF8F5, 0x01314B6F, 0x008183F9, 0x00CBDC81,
	0x0006C00A, 0x00D39962, 0x02E75756, 0x0473D6C2, 0x057C9CE4, 0x030CBE60, 0x059228F6, 0x03DA331A,
	0x04E2FD4E, 0x0166BFE2, 0x016297A0, 0x055DBB71, 0x027D46DE, 0x043A8925, 0x03C959AA, 0x04DEC125,
	0x016BFAA2, 0x03670668, 0x01F05AB7, 0x02DF4592, 0x01C1DEC6, 0x00A5A949, 0x01EBF9C5, 0x0511B17A,
	0x03197067, 0x01C9E7B1, 0x00FBE385, 0x0057F0F3, 0x0126078B, 0x014614C3, 0x056B1B8D, 0x017FA5BA,
	0x05C8A163, 0x0479A3AC, 0x018C8AE6, 0x05B71564, 0x050D713C, 0x00459310, 0x057A44EC, 0x05E53971,
	0x0540F9B3, 0x0493D16C, 0x01717962, 0x00B2783D, 0x0579CDFB, 0x01B806B0, 0x02AD3EF2, 0x010CDFE8,
	0x01CD7B4C, 0x04DA6021, 0x03AFB9BB, 0x02D19D3E, 0x0014F396, 0x059A06AA, 0x017F2CDA, 0x018A2B04,
	0x052FF060, 0x00ED746C, 0x0110DCA1, 0x02F70E9D, 0x006E18EE, 0x015CFB59, 0x006B0111, 0x005AA749,
	0x04990E24, 0x02562584, 0x00C2E23D, 0x025095FA, 0x0562E264, 0x02CD86D6, 0x056D6D68, 0x02A29AEE,
	0x02D62523, 0x01F95881, 0x01EA81B0, 0x03C91993, 0x013AC3AA, 0x057953DD, 0x04205039, 0x03004A35,
	0x056BDE9C, 0x027FF3B8, 0x058564DA, 0x03F20847, 0x004EDCC5, 0x0394F860, 0x0377FDDC, 0x02EA2191,
	0x00B51DAA, 0x02C87AF9, 0x00584EC4, 0x02909297, 0x043FB49A, 0x03F98562, 0x012A7810, 0x02A52B79,
	0x01179D88, 0x0545C6D8, 0x04B907FC, 0x04420798, 0x03B0957B, 0x026A387A, 0x016FB38C, 0x0531D656,
	0x0244956E, 0x0096E65A, 0x0402FC6C, 0x05DCF6AB, 0x057A265F, 0x049120F3, 0x022A9BD0, 0x034BB732,
	0x0272289A, 0x013B4D4B, 0x02F516A3, 0x016C6225, 0x04A657B9, 0x01E78AF2, 0x04B30F1D, 0x051B7524,
	0x051373B7, 0x03B3B1E0, 0x01408583, 0x010EA3B5, 0x00487F18, 0x03541161, 0x04221310, 0x04DCD228,
	0x0091C308, 0x05EC5539, 0x034426F3, 0x04EF89DA, 0x0167902D, 0x01B3344B, 0x0051E0F1, 0x01190844,
	0x02D0B3EF, 0x02E288C4, 0x05E32688, 0x0279AA6C, 0x040EDD8B, 0x00440B74, 0x03353C7F, 0x00D81778,
	0x05A08249, 0x059BD11D, 0x03C76E38, 0x015FE14F, 0x03430132, 0x00C155AA, 0x005F35AE, 0x01C834E5,
	0x04E11481, 0x0225A598, 0x05E67F2B, 0x0487D452, 0x0327ABEC, 0x01F4F35F, 0x020B086E, 0x04473DAF,
	0x009B15CF, 0x055AA906, 0x05BFA91D, 0x04D77FE0, 0x02CD517C, 0x04CED9E6, 0x005EA41E, 0x04BF0D0B,
	0x04497072, 0x0087B974, 0x0316C981, 0x01FC1D13, 0x05177492, 0x010E7528, 0x01910131, 0x048FC54E,
	0x014C89FE, 0x0380A63E, 0x04601D59, 0x00101CFA, 0x04B8645C, 0x04350B7B, 0x0187D86E, 0x003EC0AF,
	0x0344D803, 0x013F9B1B, 0x007DBF65, 0x008AE84C, 0x0005DC13, 0x015751C8, 0x0430032A, 0x02395EC2,
	0x03C3957A, 0x03B972AF, 0x02091915, 0x0156DD7B, 0x0192A37D, 0x036E7892, 0x01AB8182, 0x043E9F5A,
	0x01C33BC8, 0x037286A7, 0x03582431, 0x04B4A1AF, 0x033D4EE7, 0x01A8F2D8, 0x01497B8E, 0x0370C0AD,
	0x048B7402, 0x01042055, 0x03D170B2, 0x037B5143, 0x03768002, 0x050E4B92, 0x01679224, 0x01EDE320,
	0x0436D089, 0x05D7A866, 0x046B2F2E, 0x034F7B28, 0x00E9004D, 0x01C09E0C, 0x01DA542D, 0x043439A2,
	0x04D15149, 0x0371308E, 0x02BF0869, 0x02DD9931, 0x0312A3DA, 0x0368851B, 0x04BEDA40, 0x006F451D,
	0x05C93894, 0x02003820, 0x04C750AC, 0x0076D015, 0x046C5F98, 0x03987748, 0x034306A9, 0x014EC2BD,
	0x05E3941E, 0x00CA7844, 0x015E39E5, 0x014124D6, 0x042EEA46, 0x01FC8B79, 0x02F55E06, 0x0150CB8E,
	0x0031298B, 0x0506B1ED, 0x04C7E50B, 0x041D10BA, 0x01AC888C, 0x018F3CFD, 0x02960157, 0x03CA76A2,
	0x04B7811B, 0x053E99FD, 0x015F7585, 0x04EC8C15, 0x0048C5A0, 0x03318D68, 0x04B783AB, 0x02037483,
	0x04963F96, 0x04135EE8, 0x011DDDC0, 0x035970A4, 0x006817EB, 0x024893AD, 0x049EB915, 0x01400EB1,
	0x0242F55A, 0x043BC85B, 0x02547E90, 0x0028A1F1, 0x0598835D, 0x01E14380, 0x02C7EE1D, 0x00AEF31B,
	0x0016E6C0, 0x008510DC, 0x05418C8E, 0x04E1968F, 0x032C8259, 0x0113F053, 0x00978868, 0x01B902BB,
	0x0475B5EA, 0x057D4724, 0x05E91406, 0x057D6FB8, 0x012DB575, 0x0349A418, 0x0522821D, 0x04AF8EE3,
	0x024A82DC, 0x05F076B4, 0x016DD036, 0x0317068F, 0x005AEA8D, 0x01530E47, 0x033D7E67, 0x053D1135,
	0x00285112, 0x03C5A6AE, 0x0261CBAE, 0x01114540, 0x008EF320, 0x0135BBE8, 0x00394958, 0x0560F37B,
	0x0389E6DF, 0x03E885F5, 0x0079D74C, 0x05AD7B84, 0x00867766, 0x043CFD41, 0x013D905D, 0x034E2EEA,
	0x02F72ED6, 0x04C10F8E, 0x048D01DB, 0x02FEDB36, 0x04D288D6, 0x016B7AE9, 0x03C76107, 0x036802F5,
	0x01455BE9, 0x01449706, 0x02F6B0D9, 0x056FFEA4, 0x05CF11CC, 0x01BC63DA, 0x002A92DE, 0x05E5F60B,
	0x043A215D, 0x04C24B9E, 0x02E7EF0C, 0x038022A7, 0x0033D700, 0x03348CB6, 0x04E86E74, 0x03A94F90,
	0x005106F6, 0x02513040, 0x01760187, 0x026E1782, 0x051F595E, 0x036B2B29, 0x03B75D14, 0x038F45A4,
	0x03F17D89, 0x028EF642, 0x02FF6251, 0x057D5199, 0x02FCCA7D, 0x021A8159, 0x00C7131A, 0x01A5CB70,
	0x0279BCB4, 0x013FC80C, 0x05041AB0, 0x05EBEA35, 0x03F2964B, 0x0179D5B9, 0x015128DA, 0x05A61626,
	0x04B3C744, 0x02644F8E, 0x017F7380, 0x01E0D2C4, 0x01B47EF5, 0x00E0DFE9, 0x023B64D6, 0x03A77CE7,
	0x02F11DE7, 0x059D72C7, 0x025543AC, 0x0036388B, 0x04533C11, 0x05588F14, 0x0345D5E6, 0x03399BA1,
	0x05938183, 0x00AE51E2, 0x010DEECF, 0x037E7F58, 0x001950B2, 0x048D8545, 0x040B671F, 0x03CAB070,
	0x050824CF, 0x01198762, 0x01DEA1D4, 0x0403FF30, 0x02F83563, 0x03FCE364, 0x05191E27, 0x047A8C63,
	0x0431858A, 0x039D002F, 0x02D1BF7D, 0x04137E22, 0x0511F377, 0x0289DB74, 0x035B33B2, 0x05DFA953,
	0x040E8F71, 0x00D48323, 0x015B794B, 0x0032862E, 0x051293F2, 0x039B864A, 0x03E25252, 0x0073E221,
	0x00C0DE1C, 0x01AA8D30, 0x02F8F6B3, 0x05CEE6FC, 0x01B840DC, 0x00A2911E, 0x0473DFA4, 0x050FFBB5,
	0x0180686F, 0x056BE081, 0x03DEE600, 0x03A3CDCB, 0x0061B187, 0x04A4CC20, 0x03357B7A, 0x03CEF9CD,
	0x04DA4144, 0x00EDC021, 0x0337D0E2, 0x0532B47F, 0x01F4EF9E, 0x05E7E011, 0x00232438, 0x042190AA,
	0x03F94C0A, 0x03134DEA, 0x015F9C3A, 0x01CCD712, 0x04243C71, 0x05153C69, 0x052328EF, 0x052B78B7,
	0x03A8762E, 0x04C305A4, 0x009F7480, 0x03B020FE, 0x009D601B, 0x028DAAB5, 0x05ED387D, 0x02CA3E01,
	0x0116A86B, 0x0058AB4A, 0x04800094, 0x008BCACC, 0x02770EE1, 0x00CFD174, 0x0534B459, 0x046BBDC2,
	0x05406073, 0x02898016, 0x02E38228, 0x00B0B635, 0x03E636C4, 0x0309B1D1, 0x01D8700A, 0x007B099E,
	0x045EA4D9, 0x04EEA766, 0x041F622E, 0x02252138, 0x01381B6B, 0x02BD3C3D, 0x01AA9222, 0x0500CCBE,
	0x05ABEE80, 0x004D6018, 0x0488F4B6, 0x0029E03F, 0x04D25587, 0x05E8BDBA, 0x05C64DE0, 0x0274407F,
	0x0415FF0B, 0x02219FE6, 0x0108B9FA, 0x00C1B646, 0x05A13CEE, 0x005D28C0, 0x00427407, 0x03584BF6,
	0x014A3FDD, 0x03BDD3F3, 0x0266BBF2, 0x005A3FA5, 0x05F16C26, 0x0566A196, 0x01AEF7A7, 0x0182BA7E,
	0x03296A18, 0x00044723, 0x03BA672C, 0x0228BB27, 0x00F55370, 0x057E361E, 0x0036014B, 0x01D8A4CE,
	0x01E11DD9, 0x0159AABE, 0x02843DDF, 0x03C730E8, 0x055C58A6, 0x047F6449, 0x01918904, 0x00BF9A2E,
	0x050B3AEB, 0x0084553D, 0x054E00BA, 0x014C1A34, 0x04F24E73, 0x052E6CD1, 0x004E98C5, 0x0400D758,
	0x05108FEA, 0x05946B0A, 0x0545328A, 0x0573288F, 0x01AB1C62, 0x046F0A83, 0x01951BB9, 0x02EA9B85,
	0x003703D3, 0x04BBBC48, 0x04C0352B, 0x05AAC878, 0x00E5F642, 0x00FD27C1, 0x048B4BFE, 0x03772EC0,
	0x03B86A68, 0x01E13FA4, 0x0000F35F, 0x030FB19D, 0x0262EDA2, 0x023D5570, 0x03EA075B, 0x011CA1EF,
	0x0140514D, 0x007D7EAC, 0x01236366, 0x05322CFB, 0x03B9F45B, 0x0295AFAE, 0x00C8682C, 0x048CF245,
	0x045317BE, 0x03DE492D, 0x01C95340, 0x0024437A, 0x02D56D5C, 0x00256A0C, 0x02A05D2F, 0x0190F0C8,
	0x04B6C1D9, 0x003203D2, 0x01CC06CA, 0x03BD4FB3, 0x02AEEF09, 0x0011BBB9, 0x003A5F9C, 0x04D61B42,
	0x013016FF, 0x05E82DBF, 0x02A222C1, 0x006B213D, 0x015026AA, 0x04A0332A, 0x05F2C62D, 0x05C42130,
	0x002A4D61, 0x01162CC7, 0x00D51E97, 0x0579D0FA, 0x0303714E, 0x02EE44EA, 0x02D1853C, 0x0031D054,
	0x00AF9A10, 0x03F590A0, 0x01BB38F0, 0x059A1D50, 0x051D1528, 0x0319838F, 0x03EE78A6, 0x02BFB792,
	0x05625EB9, 0x025DCF6D, 0x0031F301, 0x04472709, 0x005CD54C, 0x04297081, 0x041BEA9E, 0x04F7ADF5,
	0x00724D49, 0x00D1C63C, 0x052E80A9, 0x0461B2EA, 0x03324211, 0x02E0ABA3, 0x02A47E6A, 0x02BD2F93,
	0x03EC4AF6, 0x05933BF5, 0x01096337, 0x0172FB24, 0x014C0F0C, 0x0463FC99, 0x05A218B2, 0x00CB2B11,
	0x0293FFC5, 0x05496F91, 0x04182D09, 0x0541AE93, 0x032C17C0, 0x03221560, 0x03407A0B, 0x00F6DF86,
	0x00B1E765, 0x00A951C9, 0x024A9051, 0x052486DE, 0x04647E39, 0x016E826D, 0x02B13A07, 0x03444593,
	0x0228A0BA, 0x00630749, 0x001A3900, 0x028FCB6F, 0x0225627F, 0x04236462, 0x00F15CB5, 0x046AE316,
	0x026AF52A, 0x03BF588B, 0x03CC21F9, 0x05435460, 0x037E951F, 0x0561DE05, 0x044CFB44, 0x007B9331,
	0x02E63B75, 0x014FA797, 0x01B51BE4, 0x0477A138, 0x02C88144, 0x05556029, 0x03028304, 0x02BCEE6A,
	0x0585A3D3, 0x00BA9FBD, 0x059414CE, 0x03370CFE, 0x0251AECD, 0x0114A0D9, 0x01EAB0AD, 0x02F41A70,
	0x002ED245, 0x05512D66, 0x030D02B8, 0x0082C1B3, 0x05D35D80, 0x00073C6F, 0x03684E55, 0x020C4E6D,
	0x053127E8, 0x0197E6F6, 0x028F6016, 0x048113F5, 0x02807080, 0x0023063E, 0x00FCC0FD, 0x04CB92C4,
	0x034E36B5, 0x0338CE82, 0x0482AB33, 0x018B8105, 0x05C3C1DF, 0x03DEC271, 0x0110664F, 0x02301299,
	0x03684B34, 0x00600B21, 0x00725E7F, 0x000B881C, 0x027CF62E, 0x051AC8F5, 0x018A9C09, 0x01BD35A4,
	0x05AF0F5C, 0x04E3359C, 0x00441B91, 0x035E791C, 0x045CB079, 0x042CB779, 0x03F41BCF, 0x058A6490,
	0x04A0D78C, 0x0466BA47, 0x03C37C9A, 0x047D8826, 0x01E6C131, 0x05154781, 0x00CE013B, 0x035820CC,
	0x011887D5, 0x01A29032, 0x02964108, 0x0591B4B6, 0x00E64E4D, 0x02A2E090, 0x01B58295, 0x04004D62,
	0x00D28F4F, 0x039074E7, 0x04CC242A, 0x02AE1BAB, 0x011EBFE8, 0x04D2E627, 0x011A0428, 0x02E0C5F5,
	0x001B214D, 0x04311476, 0x056F9739, 0x053DD105, 0x005D8D1B, 0x0358C903, 0x051185D0, 0x05421674,
	0x04FF7BEC, 0x04C375F2, 0x00554BB0, 0x05AE26A6, 0x01D6E629, 0x0288112F, 0x04710097, 0x0165FD66,
	0x050A54B2, 0x0073489A, 0x01E197CF, 0x025D1916, 0x0012774D, 0x014DE8A2, 0x0112F8C4, 0x036CA0AC,
	0x03AA01DE, 0x0204A4B3, 0x04B3DA7D, 0x0179C54A, 0x01228B50, 0x011D890E, 0x0137D66E, 0x02FD4B49,
	0x02B90835, 0x04DFE197, 0x04989310, 0x053F4BD6, 0x05C382A4, 0x05206C89, 0x012DBBF5, 0x04780928,
	0x034B8019, 0x03D5A1A8, 0x042DDC83, 0x005FCB04, 0x032C9729, 0x052AF6EB, 0x04F9828A, 0x048531EF,
	0x0136F051, 0x0539827A, 0x024A2ADF, 0x055FD93C, 0x0365D39F, 0x0091B54D, 0x02922976, 0x046E391C,
	0x039AEE87, 0x003D83FD, 0x0564BAFA, 0x00C6F1C8, 0x02B69942, 0x005C80DC, 0x05BDEA9A, 0x0418AF3A,
	0x0268DA29, 0x058EF21B, 0x02963D63, 0x00F13FC2, 0x014B381B, 0x0190CD51, 0x052025FD, 0x03798BCF,
	0x00C16D60, 0x019D9CA6, 0x010E32D5, 0x035DB988, 0x048FAB23, 0x05DCE855, 0x00D67D37, 0x0234F17D,
	0x044181C1, 0x015ABC53, 0x05E21AC4, 0x03F5DA3A, 0x01505E5D, 0x0227BF1B, 0x02C10695, 0x03189084,
	0x01DA6A87, 0x04E90A1D, 0x00D7CEBF, 0x00CF4722, 0x02BCA6C9, 0x0209B2D1, 0x0318800F, 0x04FBA464,
	0x008B3CDC, 0x004F798E, 0x027378D4, 0x05C5C78B, 0x00BCD6BD, 0x0177660A, 0x01C3EF0B, 0x022E8330,
	0x01494B3D, 0x04D34516, 0x030C66FC, 0x05715A34, 0x03357CC4, 0x058BA5BA, 0x02167DD4, 0x03F33DF8,
	0x00755321, 0x02542C9B, 0x03DCE463, 0x023C767A, 0x0323CFB3, 0x02C55054, 0x02E52B69, 0x02518E9F,
	0x010DCD5E, 0x03AECFCF, 0x03B24D43, 0x006D4E8A, 0x05B93285, 0x0288AB58, 0x027AB912, 0x056D3113,
	0x054C9683, 0x0253D6E6, 0x0347906B, 0x05BEACE4, 0x017D1492, 0x052DAB40, 0x0572B25A, 0x0499A614,
	0x004CCC55, 0x0269E682, 0x038877DA, 0x01EB9266, 0x058BAF8A, 0x0568F34D, 0x03A764A6, 0x01375652,
	0x0054FF33, 0x0298081A, 0x01AF7159, 0x022A8B9B, 0x015F5BB1, 0x05372084, 0x001C598D, 0x047CF381,
	0x03BBF918, 0x046B26E8, 0x05346FFE, 0x03AA30E4, 0x05EF181B, 0x028F8C75, 0x047B0F7E, 0x01C61E4E,
	0x04E4CAA6, 0x0142E99F, 0x01955F8F, 0x01C79DE0, 0x0162D378, 0x03DBC70E, 0x04F66203, 0x008D96A7,
	0x03B27656, 0x0425F04A, 0x023AD659, 0x00BF9CDB, 0x010EA7CF, 0x014ADC80, 0x04DE5DAC, 0x009CCE0A,
	0x012FF48B, 0x0446A04D, 0x04111761, 0x035CFE17, 0x02C8C5BA, 0x008B440A, 0x0226BF3B, 0x027C24DD,
	0x020B36EF, 0x008C85A0, 0x0270BDEE, 0x0419C89E, 0x04817D41, 0x022FA84A, 0x051D2865, 0x01C88B40,
	0x009D8F1E, 0x03E69E88, 0x004AD95E, 0x01C25BF4, 0x04BABAD3, 0x0563B42C, 0x04BCBAE8, 0x055C9E03,
	0x009ED60A, 0x01C3DFF3, 0x02CFE0A3, 0x010C27E4, 0x012D2072, 0x0082E196, 0x02114B1B, 0x047D7C0E,
	0x032FC664, 0x0551970F, 0x02DDEF9C, 0x0221E6E4, 0x020E0134, 0x0171963C, 0x053F66A9, 0x02364694,
	0x03564846, 0x04335E78, 0x01835BB7, 0x0142214F, 0x00F717D4, 0x03623D8E, 0x01CB8552, 0x00FBD222,
	0x02A166D3, 0x04FFE7AD, 0x03CF8913, 0x04DBC4CF, 0x0125E4A6, 0x04F669BE, 0x03FA9378, 0x05165420,
	0x042354A8, 0x01B712DD, 0x000D7462, 0x02C54EB5, 0x02F416A8, 0x00247DCA, 0x01637868, 0x02B45822,
	0x04257DD8, 0x028FC9E9, 0x05A3F57F, 0x02D56586, 0x02A7220C, 0x058E9089, 0x0437304B, 0x021B423E,
	0x024FF14C, 0x055F3796, 0x051C1862, 0x01D3625B, 0x0527838D, 0x0581CE27, 0x002CD3C6, 0x02133B2B,
	0x01D44831, 0x01FB5CA8, 0x05D2A9AA, 0x01E889F3, 0x0401AF26, 0x059C0B7A, 0x050868DD, 0x0271DAF5,
	0x05A472F2, 0x035D6EDA, 0x0268C756, 0x05E1AC0F, 0x05ED67C8, 0x04A9D557, 0x04B74621, 0x0143ECA8,
	0x0334D57F, 0x017AD745, 0x02C1A3DD, 0x00D7AE56, 0x002CD9E5, 0x0136F491, 0x031A8EE8, 0x05712AF4,
	0x050FDC4E, 0x05A77A4D, 0x018BDBC2, 0x04EBC64E, 0x019AEC3B, 0x04921581, 0x022C3DE0, 0x00A5A946,
	0x005D3074, 0x04121C6A, 0x04C7BAC7, 0x003FAA45, 0x04651014, 0x046033F7, 0x03D52A7E, 0x05C8D70E,
	0x05EA9BD1, 0x00FEB1B1, 0x03B30CF9, 0x044D7A34, 0x041A9A82, 0x0189E319, 0x008A4201, 0x04B2ACE9,
	0x054543D5, 0x01DE69BC, 0x059D96B1, 0x03E7FC0C, 0x051379C6, 0x051E7371, 0x02949C89, 0x017CD726,
	0x02434921, 0x028CF598, 0x02946066, 0x03B97435, 0x0305AA79, 0x03D73DFB, 0x03AF6B8A, 0x029B420B,
	0x039E372C, 0x00E480E0, 0x0024189E, 0x0118EEE0, 0x05468BA6, 0x02C189F0, 0x05CAABDB, 0x0331DAE3,
	0x00235AEC, 0x04564352, 0x03484DA0, 0x05E578B9, 0x021998F9, 0x0227C7EC, 0x003D4FF7, 0x045F8362,
	0x054994AC, 0x02C6A122, 0x02AF5833, 0x044C2262, 0x0159530A, 0x059FEA2C, 0x03D47D43, 0x03FBD99E,
	0x024195EE, 0x0570766E, 0x00BCA9C1, 0x01CC5DEC, 0x049C8877, 0x00560DDF, 0x02A1A69A, 0x049501CA,
	0x033E4613, 0x032392B2, 0x02581F4E, 0x01120652, 0x03FB49D8, 0x0150A2C4, 0x01C83FBA, 0x036A2797,
	0x03991934, 0x005B35E4, 0x03377132, 0x03F39109, 0x04BFF9FC, 0x035AAE07, 0x02F7530F, 0x0108E61A,
	0x0123949B, 0x0468456A, 0x01B1C1AE, 0x01FCDD4A, 0x02401689, 0x04FB1607, 0x030414CE, 0x05915060,
	0x04445F79, 0x0392495B, 0x01CEEBE5, 0x05D8D2F0, 0x007A0510, 0x05E507B7, 0x018D9494, 0x00F3FF9D,
	0x00B0C863, 0x039D4190, 0x0412BD40, 0x00DC47A6, 0x040DFB49, 0x04BE28A1, 0x03227DE5, 0x00980926,
	0x0219F589, 0x045C3840, 0x02C6DCBE, 0x00FEC8FB, 0x00B53E14, 0x05D907E8, 0x05E4ABBE, 0x036BF1DB,
	0x0460D97E, 0x01B2D2C1, 0x0182F325, 0x0337C4DE, 0x03F3B195, 0x01CBFB9A, 0x02868170, 0x00CC97F9,
	0x05203B45, 0x05BCBD87, 0x04901A62, 0x029051AA, 0x039A8727, 0x01DEA742, 0x018826E8, 0x037872A9,
	0x04823600, 0x01A22AD0, 0x018D87D1, 0x03AF9741, 0x04C102F2, 0x05D17768, 0x038FA50B, 0x011F64BD,
	0x01081543, 0x03F085EE, 0x0091812E, 0x02047E84, 0x037938B2, 0x03031D89, 0x03E374EA, 0x04C36690,
	0x04FCF50C, 0x01892BD1, 0x055CFD90, 0x05050724, 0x01E4F964, 0x00B1FA9E, 0x05CAC874, 0x0129BA43,
	0x00BF1ED6, 0x04434643, 0x00380D3E, 0x033815C1, 0x038DD7B0, 0x04BFA37E, 0x036BCE2A, 0x031DA9D4,
	0x00A69355, 0x01DCE396, 0x04993640, 0x03EA0370, 0x0373872F, 0x05A3ADCE, 0x00A8CDC7, 0x008E9230,
	0x00B1C3DA, 0x00FC2CD8, 0x05AF9281, 0x0505533C, 0x055065B4, 0x01C5914B, 0x021475F9, 0x020D5CC4,
	0x01AB0294, 0x01A0BFA5, 0x02EAFED2, 0x01A68850, 0x02AA1BF9, 0x03AA36B2, 0x05D0F33F, 0x0556D9E1,
	0x0053142F, 0x027ACF9D, 0x001FB6D1, 0x02FA2D40, 0x03604691, 0x027C662D, 0x0028B11A, 0x0303D860,
	0x0410BA26, 0x01264CF6, 0x045918E0, 0x0273FB7F, 0x00ACEB2B, 0x05A4A9EB, 0x03E823D6, 0x0543C361,
	0x0569DA77, 0x0046D484, 0x00AB0994, 0x00EE30E4, 0x02FF0A30, 0x03265448, 0x05C4232D, 0x0516C531,
	0x00FDE462, 0x03B11B17, 0x054AB4A4, 0x031BE08C, 0x01872A49, 0x01A1ABA6, 0x04CFCB64, 0x05C7B231,
	0x0462F307, 0x00101639, 0x00954C1A, 0x020F4F88, 0x0266BF57, 0x041045DB, 0x01BBCDF9, 0x04424996,
	0x000C7325, 0x05EC569F, 0x0183C14B, 0x00D15954, 0x04DF700C, 0x029B230C, 0x02597F70, 0x01A65B8C,
	0x013BF31D, 0x031D8490, 0x046034F2, 0x0451E9A4, 0x045930AB, 0x02B755E8, 0x018E55C7, 0x03FA3BC8,
	0x00C185FF, 0x00D6FE98, 0x01FF5A00, 0x025D9607, 0x00D66B70, 0x044C060A, 0x01947712, 0x04D314E3,
	0x04022023, 0x026891FF, 0x04A98E0A, 0x02C248F1, 0x00FCFBE9, 0x0238363B, 0x055CB47B, 0x043DFFDA,
	0x02D568A8, 0x01DFC277, 0x05AA96DA, 0x032F7A6E, 0x0351F78A, 0x00D0AE48, 0x013F2474, 0x01BD7BA8,
	0x03B023D1, 0x03D9D796, 0x00D5F5CA, 0x015ABDAE, 0x00DC98B8, 0x054FC604, 0x04DD605A, 0x02CAB9E6,
	0x04373868, 0x037DF6AD, 0x03AAB1B4, 0x00938193, 0x058D2460, 0x02C375D2, 0x007F78D0, 0x00BBDEA6,
	0x05197598, 0x056C779E, 0x011E52F7, 0x01B262C4, 0x00FBC7E7, 0x00198443, 0x04BF2500, 0x000CC314,
	0x01A58A12, 0x04AD0C12, 0x038FCDB8, 0x04063124, 0x03A186BB, 0x041F7DB7, 0x030E4FC9, 0x03F11BDA,
	0x033CFBC6, 0x025D7FD2, 0x0208415C, 0x05DF77E4, 0x02B48B57, 0x049174FB, 0x05642FBB, 0x031B5257,
	0x04AB6947, 0x00A27BF9, 0x01EFB6B9, 0x020938D9, 0x01055EB9, 0x01D5FFFC, 0x0365955D, 0x01C4C28B,
	0x05E4D72A, 0x03FAD49E, 0x049BFE78, 0x0251D04D, 0x010D303E, 0x017735FE, 0x057524BB, 0x04190A83,
	0x037B9D91, 0x056BDCA1, 0x026586F8, 0x01052FC2, 0x02DC938C, 0x01824193, 0x033C4927, 0x057C43E1,
	0x0367F21F, 0x0270D56D, 0x0101BFA2, 0x0450DAB3, 0x04404FEE, 0x05938846, 0x004ACCEC, 0x023ACAB1,
	0x033CE4B1, 0x05A17FC2, 0x00A81331, 0x045F4EEA, 0x05CD90B0, 0x03FE9BA9, 0x052F50E7, 0x0061190A,
	0x05987573, 0x05E843CB, 0x02D72579, 0x05DCAE5E, 0x00DB093E, 0x01FD38CA, 0x02D472D4, 0x00A669B7,
	0x0178A084, 0x00B0841D, 0x04B97EA1, 0x0337D45C, 0x044E371C, 0x0479F268, 0x03818A08, 0x02DA81D4,
	0x00F4AD9A, 0x030958E9, 0x057C6824, 0x0446DB9A, 0x039C0515, 0x00E42D61, 0x0279D93A, 0x02A3AB26,
	0x041F7167, 0x05EB4F4E, 0x03AE9F4B, 0x0299E095, 0x039DA6F4, 0x03CA6391, 0x028AE2F9, 0x051EBBAE,
	0x038C8588, 0x04B1047E, 0x0154A20A, 0x05566979, 0x01F313D4, 0x043C97D2, 0x00F9C6DD, 0x04B0F9F8,
	0x03603269, 0x057FA11B, 0x0598DC6A, 0x0525E1C2, 0x041F2BED, 0x035EA44D, 0x036171F7, 0x020B93B4,
	0x03D2BA64, 0x04301E21, 0x01067602, 0x0267F476, 0x021F698F, 0x05082BE6, 0x01F2EDC3, 0x0215E015,
	0x05EC47B6, 0x02D30C8B, 0x022C44FF, 0x001CF592, 0x026E81D4, 0x023C6ADC, 0x011BB00C, 0x0076CE15,
	0x019EBC9F, 0x04394585, 0x001B8465, 0x0446A131, 0x0355C7B5, 0x0130F6DC, 0x02653289, 0x01614C52,
	0x05185C18, 0x015BA9D8, 0x028E8F6E, 0x025FB8A3, 0x0331F36A, 0x051D36CE, 0x0585EDB3, 0x0515C8C3,
	0x04F1AC7C, 0x01D73E1A, 0x01195E51, 0x012B9C23, 0x05309852, 0x02EE06F6, 0x00478900, 0x049E62F3,
	0x057FE987, 0x025B4FF1, 0x0076F3EB, 0x00CDCA73, 0x016C43C5, 0x0564E670, 0x033B014E, 0x03AEBECB,
	0x058054F9, 0x00B00434, 0x05789128, 0x000426D1, 0x00DE156B, 0x0303C36E, 0x0426317C, 0x056EB7BB,
	0x03839632, 0x052E7BFD, 0x015CCAD5, 0x0038AA3D, 0x03307F20, 0x0429D203, 0x02103D32, 0x021CFA52,
	0x05229B5B, 0x020DDC05, 0x0168CF5F, 0x05C690CC, 0x0488821D, 0x05C8C21A, 0x017F12FF, 0x01901C35,
	0x0325DCD1, 0x054099C3, 0x00677089, 0x0091DBDA, 0x02D239FD, 0x031440AA, 0x05B94732, 0x023451D2,
	0x0139368F, 0x02A1F240, 0x02BDF920, 0x00A53D42, 0x0472E762, 0x056D7953, 0x02932975, 0x03EF0747,
	0x02981F9D, 0x0145D477, 0x05D24FE1, 0x03332E02, 0x01B0EFFE, 0x02F50583, 0x00EAE84D, 0x004AB7CF,
	0x0037EAD3, 0x04B99A8B, 0x006D9637, 0x03E7F578, 0x0268AC16, 0x01FEA733, 0x00A659BE, 0x044F479D,
	0x00FB6365, 0x05EF80DB, 0x05E33E2D, 0x0356360C, 0x0316C865, 0x024BE1F1, 0x04825368, 0x03B28E4B,
	0x01393946, 0x04A03841, 0x03CCAA82, 0x01E545C0, 0x0481C7CD, 0x016F2FA6, 0x0082C3D5, 0x01FA5678,
	0x01130552, 0x016F7D04, 0x044F4759, 0x055E3598, 0x01E2FEB0, 0x030E6569, 0x01A9411E, 0x03572AB5,
	0x035DCAE6, 0x00C8F01F, 0x05CA65E2, 0x04AEA212, 0x0025B15F, 0x012C87A3, 0x04FA1817, 0x044647B7,
	0x050183A9, 0x02BDE456, 0x0264A658, 0x0009ADB6, 0x02EB1C0D, 0x04FA545F, 0x053AFF39, 0x027B62EC,
	0x00DF1D8F, 0x04CF9A85, 0x041350D5, 0x020FF1DC, 0x0529CB70, 0x00B32155, 0x007D7FEE, 0x0310F398,
	0x00C17931, 0x03ECC59A, 0x02A0CE97, 0x0529ECA8, 0x003EE123, 0x05B2B5BE, 0x05B98F1B, 0x00C794C0,
	0x034F61DD, 0x0006086D, 0x00E90310, 0x0204F1F4, 0x05159D57, 0x0106321B, 0x0248C1EF, 0x03EB51CA,
	0x03046CD4, 0x0574B5B9, 0x03B0176D, 0x03FE8169, 0x01132B70, 0x00F538D1, 0x038579CA, 0x0443FACB,
	0x01C9F1B0, 0x0170FABC, 0x01A633D0, 0x01C268FE, 0x034018FE, 0x0447A810, 0x00BAB299, 0x0228A6C7,
	0x01CB28F0, 0x00CF3D5E, 0x00C0F870, 0x03EBC826, 0x040000E1, 0x05770A33, 0x008F77D3, 0x02DB9FCF,
	0x05829C9D, 0x013436E2, 0x035ADE00, 0x04EF8F86, 0x0192D0DD, 0x04F5DA58, 0x00938229, 0x00B17D03,
	0x05D20948, 0x055404D1, 0x01B1B635, 0x03723C98, 0x01071C9E, 0x051D50E8, 0x004DA006, 0x00000000,
};
// -- Initialize built-in game offsets databases

// Black Ops 4 SP
std::array<DBGameInfo, 1> GameBlackOps4::SinglePlayerOffsets =
{{
	{ 0x8933B30, 0x0, 0x75B9E90, 0x0 }
}};

// -- Finished with databases

// -- Begin XModelStream structures

struct GfxStreamVertex
{
	uint8_t Color[4];

	uint16_t UVUPosition;
	uint16_t UVVPosition;

	int32_t VertexNormal;
	int32_t VertexTangent;
};

struct GfxStreamWeight
{
	uint8_t WeightVal1;
	uint8_t WeightVal2;
	uint8_t WeightVal3;
	uint8_t WeightVal4;

	uint16_t WeightID1;
	uint16_t WeightID2;
	uint16_t WeightID3;
	uint16_t WeightID4;
};

struct GfxStreamFace
{
	uint16_t Index1;
	uint16_t Index2;
	uint16_t Index3;
};

// -- End XModelStream structures

// -- Black Ops 4 Pool Data Structure

struct BO4XAssetPoolData
{
	// The beginning of the pool
	uint64_t PoolPtr;

	// The size of the asset header
	uint32_t AssetSize;
	// The maximum pool size
	uint32_t PoolSize;

	// Padding
	uint32_t Padding;

	// The amount of assets in the pool
	uint32_t AssetsLoaded;

	// A pointer to the closest free header
	uint64_t PoolFreeHeadPtr;
};

// Verify that our pool data is exactly 0x20
static_assert(sizeof(BO4XAssetPoolData) == 0x20, "Invalid Pool Data Size (Expected 0x20)");

bool GameBlackOps4::LoadOffsets()
{
	// ----------------------------------------------------
	//	Black Ops 4 pools and sizes, XAssetPoolData is an array of pool info for each asset pool in the game
	//	The index of the assets we use are as follows: xanim (3), xmodel (4), ximage (0x9)
	//	Index * sizeof(BO4XAssetPoolData) = the offset of the asset info in this array of data, we can verify it using the xmodel pool and checking for the model hash (0x04647533e968c910)
	//  Notice: Black Ops 4 doesn't store a freePoolHandle at the beginning, so we just read on.
	//	On Black Ops 4, (0x04647533e968c910) will be the first xmodel
	//	Black Ops 4 stringtable, check entries, results may vary
	//	Reading is: (StringIndex * 16) + StringTablePtr + 16
	// ----------------------------------------------------

	// Attempt to load the game offsets
	if (CoDAssets::GameInstance != nullptr)
	{
		// We need the base address of the BO4 Module for ASLR + Heuristics
		auto BaseAddress = CoDAssets::GameInstance->GetMainModuleAddress();

		// Check built-in offsets via game exe mode (SP)
		for (auto& GameOffsets : SinglePlayerOffsets)
		{
			// Read required offsets (XANIM, XMODEL, XIMAGE, RAWFILE RELATED...)
			auto AnimPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(BaseAddress + GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 3));
			auto ModelPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(BaseAddress + GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 4));
			auto ImagePoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(BaseAddress + GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 0x9));

			// Apply game offset info
			CoDAssets::GameOffsetInfos.emplace_back(AnimPoolData.PoolPtr);
			CoDAssets::GameOffsetInfos.emplace_back(ModelPoolData.PoolPtr);
			CoDAssets::GameOffsetInfos.emplace_back(ImagePoolData.PoolPtr);

			// Verify via first xmodel asset, right now, we're using a hash
			auto FirstXModelHash = CoDAssets::GameInstance->Read<uint64_t>(CoDAssets::GameOffsetInfos[1]);
			// Check
			if (FirstXModelHash == 0x04647533e968c910)
			{
				// Validate sizes
				if (
					AnimPoolData.AssetSize == sizeof(BO4XAnim) &&
					ModelPoolData.AssetSize == sizeof(BO4XModel) &&
					ImagePoolData.AssetSize == sizeof(BO4GfxImage))
				{
					// Verify string table, otherwise we are all set
					CoDAssets::GameOffsetInfos.emplace_back(BaseAddress + GameOffsets.StringTable);
					// Read and apply sizes
					CoDAssets::GamePoolSizes.emplace_back(AnimPoolData.PoolSize);
					CoDAssets::GamePoolSizes.emplace_back(ModelPoolData.PoolSize);
					CoDAssets::GamePoolSizes.emplace_back(ImagePoolData.PoolSize);
					// Return success
					return true;
				}
			}
			// Reset
			CoDAssets::GameOffsetInfos.clear();
		}

		// In debug, print the info for easy additions later!
		#if _DEBUG
		// Attempt to locate via heuristic searching
		auto DBAssetsScan = CoDAssets::GameInstance->Scan("48 89 5C 24 ?? 57 48 83 EC ?? 0F B6 F9 48 8D 05 ?? ?? ?? ??");
		auto StringTableScan = CoDAssets::GameInstance->Scan("48 8B 53 ?? 48 85 D2 74 ?? 48 8B 03 48 89 02");

		// Load info and verify
		auto GameOffsets = DBGameInfo(
			// Resolve pool info from LEA
			CoDAssets::GameInstance->Read<uint32_t>(DBAssetsScan + 0x10) + (DBAssetsScan + 0x14),
			// We don't use size offsets
			0,
			// Resolve strings from LEA
			CoDAssets::GameInstance->Read<uint32_t>(StringTableScan + 0x12) + (StringTableScan + 0x16),
			// We don't use package offsets
			0
		);
		
		// Format the output
		printf("Heuristic: { 0x%X, 0x0, 0x%X, 0x0 }\n", (GameOffsets.DBAssetPools - BaseAddress), (GameOffsets.StringTable - BaseAddress));
		#endif

		// All Bo4 Updates require a tool update

//		// Check that we had hits
//		if (DBAssetsScan > 0 && StringTableScan > 0)
//		{
//			// Load info and verify
//			auto GameOffsets = DBGameInfo(
//				// Resolve pool info from LEA
//				CoDAssets::GameInstance->Read<uint32_t>(DBAssetsScan + 0x10) + (DBAssetsScan + 0x14),
//				// We don't use size offsets
//				0,
//				// Resolve strings from LEA
//				CoDAssets::GameInstance->Read<uint32_t>(StringTableScan + 0x12) + (StringTableScan + 0x16),
//				// We don't use package offsets
//				0
//			);
//
//			// In debug, print the info for easy additions later!
//#if _DEBUG
//			// Format the output
//			printf("Heuristic: { 0x%X, 0x0, 0x%X, 0x0 }\n", (GameOffsets.DBAssetPools - BaseAddress), (GameOffsets.StringTable - BaseAddress));
//#endif
//
//
//			// Read required offsets (XANIM, XMODEL, XIMAGE)
//			auto AnimPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 3));
//			auto ModelPoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 4));
//			auto ImagePoolData = CoDAssets::GameInstance->Read<BO4XAssetPoolData>(GameOffsets.DBAssetPools + (sizeof(BO4XAssetPoolData) * 0x9));
//
//			// Apply game offset info
//			CoDAssets::GameOffsetInfos.emplace_back(AnimPoolData.PoolPtr);
//			CoDAssets::GameOffsetInfos.emplace_back(ModelPoolData.PoolPtr);
//			CoDAssets::GameOffsetInfos.emplace_back(ImagePoolData.PoolPtr);
//
//			// Verify via first xmodel asset, right now, we're using a hash
//			auto FirstXModelHash = CoDAssets::GameInstance->Read<uint64_t>(CoDAssets::GameOffsetInfos[1]);
//
//			// Check
//			if (FirstXModelHash == 0x04647533e968c910)
//			{
//				// Validate sizes
//				if (
//					AnimPoolData.AssetSize  == sizeof(BO4XAnim) && 
//					ModelPoolData.AssetSize == sizeof(BO4XModel) && 
//					ImagePoolData.AssetSize == sizeof(BO4GfxImage))
//				{
//					// Verify string table, otherwise we are all set
//					CoDAssets::GameOffsetInfos.emplace_back(GameOffsets.StringTable);
//
//					// Read and apply sizes
//					CoDAssets::GamePoolSizes.emplace_back(AnimPoolData.PoolSize);
//					CoDAssets::GamePoolSizes.emplace_back(ModelPoolData.PoolSize);
//					CoDAssets::GamePoolSizes.emplace_back(ImagePoolData.PoolSize);
//
//					// Return success
//					return true;
//				}
//			}
//		}
	}

	// Failed
	return false;
}

bool GameBlackOps4::LoadAssets()
{
	// Prepare to load game assets, into the AssetPool
	bool NeedsAnims = (SettingsManager::GetSetting("showxanim", "true") == "true");
	bool NeedsModels = (SettingsManager::GetSetting("showxmodel", "true") == "true");
	bool NeedsImages = (SettingsManager::GetSetting("showximage", "false") == "true");
	bool NeedsRawFiles = (SettingsManager::GetSetting("showxrawfiles", "false") == "true");

	/*
		This was implemented as a fix for a specific user who requested it, as the search box is capped at 32767 by Windows
		and this is a workaround, if you're interested in using it, any hashes in this filters file will be ignored on load,
		essentially acting as an excluder, consider it a hidden feature with no support as it was made for a specific use
		case. If you cannot get it to work, do not ask me.
	*/
	auto Filters = WraithNameIndex();
	Filters.LoadIndex("package_index\\bo4_filters.wni");

	// Check if we need assets
	if (NeedsAnims)
	{
		// Parse the XAnim pool
		CoDXPoolParser<uint64_t, BO4XAnim>((CoDAssets::GameOffsetInfos[0]), CoDAssets::GamePoolSizes[0], [Filters](BO4XAnim& Asset, uint64_t& AssetOffset)
		{
			// Mask the name as hashes are 60Bit
			Asset.NamePtr &= 0xFFFFFFFFFFFFFFF;

			// Check for filters
			if (Filters.NameDatabase.size() > 0)
			{
				// Check for this asset in DB
				if (Filters.NameDatabase.find(Asset.NamePtr) != Filters.NameDatabase.end())
				{
					// Skip this asset
					return;
				}
			}

			// Validate and load if need be
			auto AnimName = Strings::Format("xanim_%llx", Asset.NamePtr);

			// Check for an override in the name DB
			if (AssetNameCache.NameDatabase.find(Asset.NamePtr) != AssetNameCache.NameDatabase.end())
				AnimName = AssetNameCache.NameDatabase[Asset.NamePtr];

			// Make and add
			auto LoadedAnim = new CoDAnim_t();
			// Set
			LoadedAnim->AssetName = AnimName;
			LoadedAnim->AssetPointer = AssetOffset;
			LoadedAnim->Framerate = Asset.Framerate;
			LoadedAnim->FrameCount = Asset.NumFrames;
			LoadedAnim->AssetStatus = WraithAssetStatus::Loaded;
			// Add
			CoDAssets::GameAssets->LoadedAssets.push_back(LoadedAnim);
		});
	}

	if (NeedsModels)
	{
		// Parse the XModel pool
		CoDXPoolParser<uint64_t, BO4XModel>((CoDAssets::GameOffsetInfos[1]), CoDAssets::GamePoolSizes[1], [Filters](BO4XModel& Asset, uint64_t& AssetOffset)
		{
			// Mask the name as hashes are 60Bit
			Asset.NamePtr &= 0xFFFFFFFFFFFFFFF;

			// Check for filters
			if (Filters.NameDatabase.size() > 0)
			{
				// Check for this asset in DB
				if (Filters.NameDatabase.find(Asset.NamePtr) != Filters.NameDatabase.end())
				{
					// Skip this asset
					return;
				}
			}

			// Validate and load if need be
			auto ModelName = Strings::Format("xmodel_%llx", Asset.NamePtr);

			// Check for an override in the name DB
			if (AssetNameCache.NameDatabase.find(Asset.NamePtr) != AssetNameCache.NameDatabase.end())
				ModelName = AssetNameCache.NameDatabase[Asset.NamePtr];

			// Make and add
			auto LoadedModel = new CoDModel_t();
			// Set
			LoadedModel->AssetName = ModelName;
			LoadedModel->AssetPointer = AssetOffset;
			LoadedModel->BoneCount = (Asset.NumBones + Asset.NumCosmeticBones);
			LoadedModel->LodCount = Asset.NumLods;
			LoadedModel->AssetStatus = WraithAssetStatus::Loaded;
			// Add
			CoDAssets::GameAssets->LoadedAssets.push_back(LoadedModel);
		});
	}

	if (NeedsImages)
	{
		// Parse the XModel pool
		CoDXPoolParser<uint64_t, BO4GfxImage>((CoDAssets::GameOffsetInfos[2]), CoDAssets::GamePoolSizes[2], [Filters](BO4GfxImage& Asset, uint64_t& AssetOffset)
		{
			// Mask the name as hashes are 60Bit
			Asset.NamePtr &= 0xFFFFFFFFFFFFFFF;

			// Check for filters
			if (Filters.NameDatabase.size() > 0)
			{
				// Check for this asset in DB
				if (Filters.NameDatabase.find(Asset.NamePtr) != Filters.NameDatabase.end())
				{
					// Skip this asset
					return;
				}
			}

			// Validate and load if need be
			auto ImageName = Strings::Format("ximage_%llx", Asset.NamePtr);

			// Check for an override in the name DB
			if (AssetNameCache.NameDatabase.find(Asset.NamePtr) != AssetNameCache.NameDatabase.end())
				ImageName = AssetNameCache.NameDatabase[Asset.NamePtr];

			// Check for loaded images
			// if (Asset.GfxMipsPtr != 0)
			{
				// Make and add
				auto LoadedImage = new CoDImage_t();
				// Set
				LoadedImage->AssetName = ImageName;
				LoadedImage->AssetPointer = AssetOffset;
				LoadedImage->Width = (uint16_t)Asset.LoadedMipWidth;
				LoadedImage->Height = (uint16_t)Asset.LoadedMipHeight;
				LoadedImage->Format = (uint16_t)Asset.ImageFormat;
				LoadedImage->AssetStatus = WraithAssetStatus::Loaded;
				// Add
				CoDAssets::GameAssets->LoadedAssets.push_back(LoadedImage);
			}
		});
	}

	// Success, error only on specific load
	return true;
}

std::unique_ptr<XAnim_t> GameBlackOps4::ReadXAnim(const CoDAnim_t* Animation)
{
	// Verify that the program is running
	if (CoDAssets::GameInstance->IsRunning())
	{
		// Prepare to read the xanim
		auto Anim = std::make_unique<XAnim_t>();

		// Read the XAnim structure
		auto AnimData = CoDAssets::GameInstance->Read<BO4XAnim>(Animation->AssetPointer);

		// Copy over default properties
		Anim->AnimationName = Animation->AssetName;
		// Frames and Rate
		Anim->FrameCount = AnimData.NumFrames;
		Anim->FrameRate = AnimData.Framerate;

		// Check for viewmodel animations
		if ((_strnicmp(Animation->AssetName.c_str(), "viewmodel_", 10) == 0) || (_strnicmp(Animation->AssetName.c_str(), "vm_", 3) == 0))
		{
			// This is a viewmodel animation
			Anim->ViewModelAnimation = true;
		}
		////// Check for additive animations
		////if (AnimData.AssetType == 0x6)
		////{
		////	// This is a additive animation
		////	Anim->AdditiveAnimation = true;
		////}
		////// Check for looping
		////Anim->LoopingAnimation = (AnimData.LoopingFlag > 0);

		// Read the delta data
		auto AnimDeltaData = CoDAssets::GameInstance->Read<BO4XAnimDeltaParts>(AnimData.DeltaPartsPtr);

		// Copy over pointers
		Anim->BoneIDsPtr = AnimData.BoneIDsPtr;
		Anim->DataBytesPtr = AnimData.DataBytePtr;
		Anim->DataShortsPtr = AnimData.DataShortPtr;
		Anim->DataIntsPtr = AnimData.DataIntPtr;
		Anim->RandomDataBytesPtr = AnimData.RandomDataBytePtr;
		Anim->RandomDataShortsPtr = AnimData.RandomDataShortPtr;
		Anim->NotificationsPtr = AnimData.NotificationsPtr;

		// Bone ID index size
		Anim->BoneIndexSize = 4;

		// Copy over counts
		Anim->NoneRotatedBoneCount = AnimData.NoneRotatedBoneCount;
		Anim->TwoDRotatedBoneCount = AnimData.TwoDRotatedBoneCount;
		Anim->NormalRotatedBoneCount = AnimData.NormalRotatedBoneCount;
		Anim->TwoDStaticRotatedBoneCount = AnimData.TwoDStaticRotatedBoneCount;
		Anim->NormalStaticRotatedBoneCount = AnimData.NormalStaticRotatedBoneCount;
		Anim->NormalTranslatedBoneCount = AnimData.NormalTranslatedBoneCount;
		Anim->PreciseTranslatedBoneCount = AnimData.PreciseTranslatedBoneCount;
		Anim->StaticTranslatedBoneCount = AnimData.StaticTranslatedBoneCount;
		Anim->NoneTranslatedBoneCount = AnimData.NoneTranslatedBoneCount;
		Anim->TotalBoneCount = AnimData.TotalBoneCount;
		Anim->NotificationCount = AnimData.NotificationCount;

		// Copy delta
		Anim->DeltaTranslationPtr = AnimDeltaData.DeltaTranslationsPtr;
		Anim->Delta2DRotationsPtr = AnimDeltaData.Delta2DRotationsPtr;
		Anim->Delta3DRotationsPtr = AnimDeltaData.Delta3DRotationsPtr;

		// Set types, we use quata for BO4
		Anim->RotationType = AnimationKeyTypes::QuatPackingA;
		Anim->TranslationType = AnimationKeyTypes::MinSizeTable;

		// Black Ops 4 doesn't support inline indicies
		Anim->SupportsInlineIndicies = false;

		// Return it
		return Anim;
	}
	// Not running
	return nullptr;
}

std::unique_ptr<XModel_t> GameBlackOps4::ReadXModel(const CoDModel_t* Model)
{
	// Verify that the program is running
	if (CoDAssets::GameInstance->IsRunning())
	{
		// Read the XModel structure
		auto ModelData = CoDAssets::GameInstance->Read<BO4XModel>(Model->AssetPointer);

		// Prepare to read the xmodel (Reserving space for lods)
		auto ModelAsset = std::make_unique<XModel_t>(ModelData.NumLods);

		// Copy over default properties
		ModelAsset->ModelName = Model->AssetName;
		// Bone counts
		ModelAsset->BoneCount = ModelData.NumBones;
		ModelAsset->RootBoneCount = ModelData.NumRootBones;
		ModelAsset->CosmeticBoneCount = ModelData.NumCosmeticBones;

		// Bone data type
		ModelAsset->BoneRotationData = BoneDataTypes::QuatPackingA;

		// We are streamed
		ModelAsset->IsModelStreamed = true;

		// Bone id info
		ModelAsset->BoneIDsPtr = ModelData.BoneIDsPtr;
		ModelAsset->BoneIndexSize = 4;

		// Bone parent info
		ModelAsset->BoneParentsPtr = ModelData.ParentListPtr;
		ModelAsset->BoneParentSize = 1;

		// Local bone pointers
		ModelAsset->RotationsPtr = ModelData.RotationsPtr;
		ModelAsset->TranslationsPtr = ModelData.TranslationsPtr;

		// Global matricies
		ModelAsset->BaseMatriciesPtr = ModelData.BaseMatriciesPtr;

		// Prepare to parse lods
		for (uint32_t i = 0; i < ModelData.NumLods; i++)
		{
			// Read the lod
			auto LODInfo = CoDAssets::GameInstance->Read<BO4XModelLod>(ModelData.ModelLodPtrs[i]);
			// Create the lod and grab reference
			ModelAsset->ModelLods.emplace_back(LODInfo.NumSurfs);
			// Grab reference
			auto& LodReference = ModelAsset->ModelLods[i];

			// Set distance
			LodReference.LodDistance = LODInfo.LodDistance;

			// Set stream key and info ptr
			LodReference.LODStreamKey = LODInfo.LODStreamKey;
			LodReference.LODStreamInfoPtr = LODInfo.XModelMeshPtr;

			// Grab pointer from the lod itself
			auto XSurfacePtr = LODInfo.XSurfacePtr;

			// Skip 8 bytes in materials
			ModelData.MaterialHandlesPtr += 8;
			// Read material handles ptr
			auto MaterialHandlesPtr = CoDAssets::GameInstance->Read<uint64_t>(ModelData.MaterialHandlesPtr);
			// Advance 8 and skip 16 bytes
			ModelData.MaterialHandlesPtr += 0x10;

			// Load surfaces
			for (uint32_t s = 0; s < LODInfo.NumSurfs; s++)
			{
				// Create the surface and grab reference
				LodReference.Submeshes.emplace_back();
				// Grab reference
				auto& SubmeshReference = LodReference.Submeshes[s];

				// Read the surface data
				auto SurfaceInfo = CoDAssets::GameInstance->Read<BO4XModelSurface>(XSurfacePtr);
				// Apply surface info
				SubmeshReference.VertexCount = SurfaceInfo.VertexCount;
				SubmeshReference.FaceCount = SurfaceInfo.FacesCount;
				SubmeshReference.VertexPtr = SurfaceInfo.VerticiesIndex;
				SubmeshReference.FacesPtr = SurfaceInfo.FacesIndex;

				// Assign weight info to the count slots, to save memory
				SubmeshReference.WeightCounts[0] = SurfaceInfo.Flag1;
				SubmeshReference.WeightCounts[1] = SurfaceInfo.Flag2;
				SubmeshReference.WeightCounts[2] = SurfaceInfo.Flag3;
				SubmeshReference.WeightCounts[3] = SurfaceInfo.Flag4;

				// Read this submesh's material handle
				auto MaterialHandle = CoDAssets::GameInstance->Read<uint64_t>(MaterialHandlesPtr);
				// Create the material and add it
				LodReference.Materials.emplace_back(ReadXMaterial(MaterialHandle));

				// Advance
				XSurfacePtr += sizeof(BO4XModelSurface);
				MaterialHandlesPtr += sizeof(uint64_t);
			}
		}

		// Return it
		return ModelAsset;
	}
	// Not running
	return nullptr;
}

std::unique_ptr<XImageDDS> GameBlackOps4::ReadXImage(const CoDImage_t* Image)
{
	// Proxy off
	return LoadXImage(XImage_t(ImageUsageType::DiffuseMap, 0, Image->AssetPointer, Image->AssetName));
}

const XMaterial_t GameBlackOps4::ReadXMaterial(uint64_t MaterialPointer)
{
	// Prepare to parse the material
	auto MaterialData = CoDAssets::GameInstance->Read<BO4XMaterial>(MaterialPointer);

	// Mask the name (some bits are used for other stuffs)
	MaterialData.Hash &= 0xFFFFFFFFFFFFFFF;
	// Allocate a new material with the given image count
	XMaterial_t Result(MaterialData.ImageCount);
	// Clean the name, then apply it
	Result.MaterialName = Strings::Format("xmaterial_%llx", MaterialData.Hash);

	// Check for an override in the name DB
	if (AssetNameCache.NameDatabase.find(MaterialData.Hash) != AssetNameCache.NameDatabase.end())
		Result.MaterialName = AssetNameCache.NameDatabase[MaterialData.Hash];

	// Iterate over material images, assign proper references if available
	for (uint32_t m = 0; m < MaterialData.ImageCount; m++)
	{
		// Read the image info
		auto ImageInfo = CoDAssets::GameInstance->Read<BO4XMaterialImage>(MaterialData.ImageTablePtr);

		// Get Hash and mask it (some bits are used for other stuffs)
		auto ImageHash = CoDAssets::GameInstance->Read<uint64_t>(ImageInfo.ImagePtr + 0x20) & 0xFFFFFFFFFFFFFFF;

		// Get the image name
		auto ImageName = Strings::Format("ximage_%llx", ImageHash);

		// Check for an override in the name DB
		if (AssetNameCache.NameDatabase.find(ImageHash) != AssetNameCache.NameDatabase.end())
			ImageName = AssetNameCache.NameDatabase[ImageHash];

		// Default type
		auto DefaultUsage = ImageUsageType::Unknown;
		// Check 
		switch (ImageInfo.SemanticHash)
		{
		case 0xA0AB1041:
			DefaultUsage = ImageUsageType::DiffuseMap;
			break;
		case 0x59D30D0F:
			DefaultUsage = ImageUsageType::NormalMap;
			break;
		case 0xEC443804:
			DefaultUsage = ImageUsageType::SpecularMap;
			break;
		}

		// Assign the new image
		Result.Images.emplace_back(DefaultUsage, ImageInfo.SemanticHash, ImageInfo.ImagePtr, ImageName);

		// Advance
		MaterialData.ImageTablePtr += sizeof(BO4XMaterialImage);
	}

	// Return it
	return Result;
}

std::unique_ptr<XImageDDS> GameBlackOps4::LoadXImage(const XImage_t& Image)
{
	// Prepare to load an image, we need to rip loaded and streamed ones
	uint32_t ResultSize = 0;

	// We must read the image data
	auto ImageInfo = CoDAssets::GameInstance->Read<BO4GfxImage>(Image.ImagePtr);

	// Calculate the largest image mip
	uint32_t LargestMip = 0;
	uint32_t LargestWidth = 0;
	uint32_t LargestHeight = 0;
	uint64_t LargestHash = 0;

	// Loop and calculate
	for (uint32_t i = 0; i < ImageInfo.GfxMipMaps; i++)
	{
		// Load Mip Map
		auto MipMap = CoDAssets::GameInstance->Read<BO4GfxMip>(ImageInfo.GfxMipsPtr);
		// Compare widths
		if (MipMap.Width > LargestWidth)
		{
			LargestMip = i;
			LargestWidth = MipMap.Width;
			LargestHeight = MipMap.Height;
			LargestHash = MipMap.HashID;
		}
		// Advance Mip Map Pointer
		ImageInfo.GfxMipsPtr += sizeof(BO4GfxMip);
	}

	// Calculate proper image format (Convert signed to unsigned)
	switch (ImageInfo.ImageFormat)
	{
		// Fix invalid BC1_SRGB images, swap to BC1_UNORM
	case 72: ImageInfo.ImageFormat = 71; break;
		// Fix invalid BC2_SRGB images, swap to BC2_UNORM
	case 75: ImageInfo.ImageFormat = 74; break;
		// Fix invalid BC3_SRGB images, swap to BC3_UNORM
	case 78: ImageInfo.ImageFormat = 77; break;
		// Fix invalid BC7_SRGB images, swap to BC7_UNORM
	case 99: ImageInfo.ImageFormat = 98; break;
	}

	// Buffer
	std::unique_ptr<uint8_t[]> ImageData = nullptr;

	// Check if we're missing a hash / size
	if (LargestWidth == 0 || LargestHash == 0)
	{
		// Set sizes
		LargestWidth = ImageInfo.LoadedMipWidth;
		LargestHeight = ImageInfo.LoadedMipHeight;

		// Temporary size
		uintptr_t ImageMemoryResult = 0;
		// We have a loaded image, prepare to dump from memory
		auto ImageMemoryBuffer = CoDAssets::GameInstance->Read(ImageInfo.LoadedMipPtr, ImageInfo.LoadedMipSize, ImageMemoryResult);

		// Make sure we got it
		if (ImageMemoryBuffer != nullptr)
		{
			// Allocate a safe block
			ImageData = std::make_unique<uint8_t[]>((uint32_t)ImageMemoryResult);
			// Copy data over
			std::memcpy(ImageData.get(), ImageMemoryBuffer, ImageMemoryResult);

			// Set size
			ResultSize = (uint32_t)ImageMemoryResult;

			// Clean up
			delete[] ImageMemoryBuffer;
		}
	}
	else
	{
		// We have a streamed image, prepare to extract
		ImageData = CoDAssets::GamePackageCache->ExtractPackageObject(LargestHash, ResultSize);
	}

	// Prepare if we have it
	if (ImageData != nullptr)
	{
		// Prepare to create a MemoryDDS file
		auto Result = CoDRawImageTranslator::TranslateBC(ImageData, ResultSize, LargestWidth, LargestHeight, ImageInfo.ImageFormat);

		// Check for, and apply patch if required, if we got a raw result
		if (Result != nullptr && Image.ImageUsage == ImageUsageType::NormalMap && (SettingsManager::GetSetting("patchnormals", "true") == "true"))
		{
			// Set normal map patch
			Result->ImagePatchType = ImagePatch::Normal_Expand;
		}

		// Return it
		return Result;
	}

	// Failed to load the image
	return nullptr;
}

void GameBlackOps4::LoadXModel(const XModelLod_t& ModelLOD, const std::unique_ptr<WraithModel>& ResultModel)
{
	// Check if we want Vertex Colors
	bool ExportColors = (SettingsManager::GetSetting("exportvtxcolor", "true") == "true");
	// Read the mesh information
	auto MeshInfo = CoDAssets::GameInstance->Read<BO4XModelMeshInfo>(ModelLOD.LODStreamInfoPtr);

	// A buffer for the mesh data
	std::unique_ptr<uint8_t[]> MeshDataBuffer = nullptr;
	// Resulting size
	uint64_t MeshDataBufferSize = 0;

	// Vertex has extended vertex information
	bool HasExtendedVertexInfo = (MeshInfo.StatusFlag & 64) != 0;

	// Determine if we need to load the mesh or not (Seems flag == 8 is loaded)
	if ((MeshInfo.StatusFlag & 0x3F) == 8)
	{
		// Result size
		uintptr_t ResultSize = 0;
		// The mesh is already loaded, just read it
		auto TemporaryBuffer = CoDAssets::GameInstance->Read(MeshInfo.XModelMeshBufferPtr, MeshInfo.XModelMeshBufferSize, ResultSize);

		// Copy and clean up
		if (TemporaryBuffer != nullptr)
		{
			// Allocate safe
			MeshDataBuffer = std::make_unique<uint8_t[]>(MeshInfo.XModelMeshBufferSize);
			// Copy over
			std::memcpy(MeshDataBuffer.get(), TemporaryBuffer, (size_t)ResultSize);
			// Set size
			MeshDataBufferSize = ResultSize;

			// Clean up
			delete[] TemporaryBuffer;
		}
	}
	else
	{
		// Result size
		uint32_t ResultSize = 0;
		// We must read from the cache
		MeshDataBuffer = CoDAssets::GamePackageCache->ExtractPackageObject(ModelLOD.LODStreamKey, ResultSize);
		// Set size
		MeshDataBufferSize = ResultSize;
	}

	// Continue on success
	if (MeshDataBuffer != nullptr)
	{
		// Make a reader to begin reading the mesh (Don't close)
		auto MeshReader = MemoryReader((int8_t*)MeshDataBuffer.get(), MeshDataBufferSize, true);

		// The total weighted verticies
		uint32_t TotalReadWeights = 0;
		// The maximum weight index
		uint32_t MaximumWeightIndex = ResultModel->BoneCount() - 1;

		// Prepare it for submeshes
		ResultModel->PrepareSubmeshes((uint32_t)ModelLOD.Submeshes.size());

		// Iterate over submeshes
		for (auto& Submesh : ModelLOD.Submeshes)
		{
			// Create and grab a new submesh
			auto& Mesh = ResultModel->AddSubmesh();

			// Set the material (COD has 1 per submesh)
			Mesh.AddMaterial(Submesh.MaterialIndex);

			// Prepare the mesh for the data
			Mesh.PrepareMesh(Submesh.VertexCount, Submesh.FaceCount);

			// Jump to vertex position data, advance to this submeshes verticies
			MeshReader.SetPosition(MeshInfo.VertexOffset + (Submesh.VertexPtr * 12));

			// Iterate over verticies
			for (uint32_t i = 0; i < Submesh.VertexCount; i++)
			{
				// Make a new vertex
				auto& Vertex = Mesh.AddVertex();

				// Read and assign position
				Vertex.Position = MeshReader.Read<Vector3>();
			}

			// Jump to vertex info data, advance to this submeshes info, seek further for extended vertex info
			MeshReader.SetPosition(MeshInfo.UVOffset + (Submesh.VertexPtr * (HasExtendedVertexInfo ? 24 : 16)));

			// Iterate over verticies
			for (uint32_t i = 0; i < Submesh.VertexCount; i++)
			{
				// Grab the reference
				auto& Vertex = Mesh.Verticies[i];

				// Read vertex data
				auto VertexData = MeshReader.Read<GfxStreamVertex>();

				// Add UV layer
				Vertex.AddUVLayer(HalfFloats::ToFloat(VertexData.UVUPosition), HalfFloats::ToFloat(VertexData.UVVPosition));

				// Unpack normal
				int32_t PackedX = (((VertexData.VertexNormal >> 0) & ((1 << 10) - 1)) - 512);
				int32_t PackedY = (((VertexData.VertexNormal >> 10) & ((1 << 10) - 1)) - 512);
				int32_t PackedZ = (((VertexData.VertexNormal >> 20) & ((1 << 10) - 1)) - 512);
				// Calculate
				Vertex.Normal.X = ((float)PackedX / 511.0f);
				Vertex.Normal.Y = ((float)PackedY / 511.0f);
				Vertex.Normal.Z = ((float)PackedZ / 511.0f);

				// Add Colors if we want them
				if (ExportColors)
				{
					Vertex.Color[0] = VertexData.Color[0];
					Vertex.Color[1] = VertexData.Color[1];
					Vertex.Color[2] = VertexData.Color[2];
					Vertex.Color[3] = VertexData.Color[3];
				}
				else
				{
					Vertex.Color[0] = 0xFF;
					Vertex.Color[1] = 0xFF;
					Vertex.Color[2] = 0xFF;
					Vertex.Color[3] = 0xFF;
				}

				// Skip extended vertex information (first 4 bytes seems to be UV, possibly for better camo UV Mapping)
				if (HasExtendedVertexInfo)
					MeshReader.Advance(8);
			}

			// Jump to vertex weight data, advance to this submeshes info
			MeshReader.SetPosition(MeshInfo.WeightsOffset + (Submesh.VertexPtr * 12));

			// Iterate over verticies
			for (uint32_t i = 0; i < Submesh.VertexCount; i++)
			{
				// Grab the reference
				auto& Vertex = Mesh.Verticies[i];
				
				// Check if we're a complex weight, up to four weights
				if (((uint8_t)Submesh.WeightCounts[0] & 2) > 0)
				{
					// Read weight data
					auto VertexWeight = MeshReader.Read<GfxStreamWeight>();

					// Add if need be
					Vertex.AddVertexWeight(VertexWeight.WeightID1, (VertexWeight.WeightVal1 / 255.0f));
					// Calculate max
					MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID1, MaximumWeightIndex);

					// Check for value 2
					if (VertexWeight.WeightVal2 > 0)
					{
						Vertex.AddVertexWeight(VertexWeight.WeightID2, (VertexWeight.WeightVal2 / 255.0f));
						// Calculate max
						MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID2, MaximumWeightIndex);
					}

					// Check for value 3
					if (VertexWeight.WeightVal3 > 0)
					{
						Vertex.AddVertexWeight(VertexWeight.WeightID3, (VertexWeight.WeightVal3 / 255.0f));
						// Calculate max
						MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID3, MaximumWeightIndex);
					}

					// Check for value 4
					if (VertexWeight.WeightVal4 > 0)
					{
						Vertex.AddVertexWeight(VertexWeight.WeightID4, (VertexWeight.WeightVal4 / 255.0f));
						// Calculate max
						MaximumWeightIndex = std::max<uint32_t>(VertexWeight.WeightID4, MaximumWeightIndex);
					}

					// Increase
					TotalReadWeights++;
				}
				else
				{
					// Simple weight
					Vertex.AddVertexWeight(0, 1.0);
				}

			}

			// Jump to face data, advance to this submeshes faces
			MeshReader.SetPosition(MeshInfo.FacesOffset + (Submesh.FacesPtr * 2));

			// Iterate over faces
			for (uint32_t i = 0; i < Submesh.FaceCount; i++)
			{
				// Read data
				auto Face = MeshReader.Read<GfxStreamFace>();

				// Add the face
				Mesh.AddFace(Face.Index1, Face.Index2, Face.Index3);
			}
		}

		// Prepare to generate stream bones if we had a conflict
		if (MaximumWeightIndex > (ResultModel->BoneCount() - 1))
		{
			// Generate stream bones
			auto CurrentBoneCount = ResultModel->BoneCount();
			auto WantedBoneCount = (MaximumWeightIndex + 1);

			// Loop and create
			for (uint32_t i = 0; i < (WantedBoneCount - CurrentBoneCount); i++)
			{
				auto& StreamBone = ResultModel->AddBone();

				// Set name and parent
				StreamBone.TagName = Strings::Format("smod_bone%d", i);
				StreamBone.BoneParent = 0;
			}

			// Ensure root is tag_origin
			ResultModel->Bones[0].TagName = "tag_origin";
		}
	}
}

std::string GameBlackOps4::DecryptString(uint8_t* InputBuffer, uint8_t InputLength, uint8_t EncryptionID, uint64_t StringHash)
{
	switch ((uint8_t)(EncryptionID + 128))
	{
	case 0:
	{
		// Start values
		uint32_t k = 426065975;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[k % 0x82 + 277 * (i % 0x11)];
			// Edit key
			j = 55 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 1:
	{
		// Start values
		uint32_t k = 426057779;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[277 * (i & 0xF) + k % 0xE7];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 51;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 5:
	{
		// Start values
		uint32_t k = -2112351967;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[k % 0xB2 + 277 * (i % 3)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 33;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 7:
	{
		// Start values
		uint32_t k = 1197605427;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 51;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 8:
	{
		// Start values
		uint32_t k = -107;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Edit key
			j = k * -107;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 9:
	{
		// Start values
		uint32_t k = -1992011439;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[277 * (i & 3) + k % 0xE7];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 81 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 10:
	{
		// Start values
		uint32_t k = 1750074421;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[k % 0x44 + 277i64 * (i % 0xFu)];
			// Edit key
			j = k + 53;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 11:
	{
		// Start values
		uint32_t k = 573994535;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[277 * (k & 7) + i % 0xA6u];
			// Edit key
			j = k + 39;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 12:
	{
		// Start values
		uint32_t k = 881074273;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 97 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 13:
	{
		// Start values
		uint32_t k = 1493452164;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = -124 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 14:
	{
		// Start values
		uint32_t k = -2046258028;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = -108 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 15:
	{
		// Start values
		uint32_t k = 89;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k *= i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 89;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 17:
	{
		// Start values
		uint32_t k = 1381459319;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[(277 * (k & 7)) + (i % 0x45)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 119;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 18:
	{
		// Start values
		uint32_t k = 1130631208;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[i % 0x2Fu + 277 * (k % 0xF)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k ^ 0x28;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 19:
	{
		// Start values
		uint32_t k = 1988706825;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[i % 0x28u + 277 * (k % 9)];
			// Edit key
			j = k + 9;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 20:
	{
		// Start values
		uint32_t k = -2088221869;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 83;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 21:
	{
		// Start values
		uint32_t k = 419780676;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[k % 0x62 + 277 * (i % 5)];
			// Edit key
			j = k ^ 68;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 22:
	{
		// Start values
		uint32_t k = 1147442947;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[277 * (k & 1) + i % 9u];
			// Edit key
			j = 3 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 23:
	{
		// Start values
		uint32_t k = 1750673236;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[277 * (k & 0xF) + i % 0x13u];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 84 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 25:
	{
		// Start values
		uint32_t k = 572622680;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k += i;
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 88 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 26:
	{
		// Start values
		uint32_t k = 34;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k -= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 34 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 28:
	{
		// Start values
		uint32_t k = 1502623813;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[k % 0xE8];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 69 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 29:
	{
		// Start values
		uint32_t k = 639927351;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[k % 0x61];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 55 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 30:
	{
		// Start values
		uint32_t k = 50;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= i;
			// Edit key
			j = 50 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 31:
	{
		// Start values
		uint32_t k = -1722731177;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= i;
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 87 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 34:
	{
		// Start values
		uint32_t k = 1143998276;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[k % 0x10E + 277 * (i % 0x12u)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 68;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 35:
	{
		// Start values
		uint32_t k = 1903191878;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[i % 9 + 277 * (k % 6)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k + 70;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 39:
	{
		// Start values
		uint32_t k = 1210479654;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[(k & 1) + 277 * (i & 1)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k + 38;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 40:
	{
		// Start values
		uint32_t k = 1094271525;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[i % 0xD3 + 277 * (k % 0x11)];
			// Edit key
			j = 37 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 41:
	{
		// Start values
		uint32_t k = 1502638120;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[i % 0x82 + 277 * (k % 9)];
			// Edit key
			j = 40 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 43:
	{
		// Start values
		uint32_t k = -121;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= i;
			// Edit key
			j = -121 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 44:
	{
		// Start values
		uint32_t k = 872494406;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k *= DecryptionTable[277i64 * (k & 3) + i % 0xBAu];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], (uint8_t)k);
			// Edit key
			j = 70 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 45:
	{
		// Start values
		uint32_t k = 1767998324;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[k % 0xF9];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], (uint8_t)k);
			// Edit key
			j = 116 * k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 47:
	{
		// Start values
		uint32_t k = 931541879;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[k % 0xF2 + 277 * (i % 0xE)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k ^ 119;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 50:
	{
		// Start values
		uint32_t k = 352661522;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[i % 0x15 + 277 * (k % 3)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 18;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 51:
	{
		// Start values
		uint32_t k = -2080037626;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[(277 * (i & 3)) + (k % 0x7A)];
			// Edit key
			j = k ^ 6;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 53:
	{
		// Start values
		uint32_t k = 1447467410;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k ^= DecryptionTable[k % 0x9A + 277 * (i % 0x11)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k ^ 146;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 55:
	{
		// Start values
		uint32_t k = 1175000594;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[k % 0x7D + 277 * (i % 0xDu)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = k + 18;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 59:
	{
		// Start values
		uint32_t k = -2110167464;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[i % 0xB + 277 * (k % 0xC)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 88 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 60:
	{
		// Start values
		uint32_t k = -2106496765;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[k % 0x27 + 277 * (i % 0xAu)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = k * 3;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 61:
	{
		// Start values
		uint32_t k = 646398289;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k -= DecryptionTable[k % 0x78 + 277 * (i % 0xBu)];
			// Rotate it
			InputBuffer[i] = RotateLeft8(InputBuffer[i], k);
			// Edit key
			j = 81 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 62:
	{
		// Start values
		uint32_t k = 1732875124;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Read from the internal int32 array
			k += DecryptionTable[i % 0x62 + 277 * (k % 3)];
			// Rotate it
			InputBuffer[i] = RotateRight8(InputBuffer[i], k);
			// Edit key
			j = 116 - k;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	case 63:
	{
		// Start values
		uint32_t k = 71;
		uint8_t j = 0;
		// Loop through bytes
		for (uint8_t i = 0; i < InputLength - 1; i++)
		{
			// Edit values
			k ^= i;
			// Edit key
			j = k ^ 0x47;
			// Decrypt it if the key and input differ
			InputBuffer[i] = InputBuffer[i] != j ? InputBuffer[i] ^ j : InputBuffer[i];
		}
		// Done
		break;
	}
	default:
		break;
	}
#if _DEBUG
	// Validate strings in debug to check for encryption changes
	uint64_t Hash = 0xCBF29CE484222325;
	// Loop through string
	for (uint8_t i = 0; i < InputLength; i++)
		Hash = 0x100000001B3 * (InputBuffer[i] ^ Hash);
	// Check it against input
	if (Hash != StringHash)
		printf("Hash check failed: ID %i - Input Hash 0x%llX - Hash Result 0x%llX - %s - Size %i\n", (uint8_t)(EncryptionID + 128), StringHash, Hash, InputBuffer, InputLength);
#endif
	// Done
	return std::string(reinterpret_cast<char const*>(InputBuffer), InputLength - 1);
}

std::string GameBlackOps4::LoadStringEntry(uint64_t Index)
{
	// Calculate Offset to String (Offsets[3] = StringTable)
	auto Offset = CoDAssets::GameOffsetInfos[3] + (Index * 20);
	// Read Result
	uint64_t BytesRead = 0;
	// Read Info
	auto StringHash      = CoDAssets::GameInstance->Read<uint64_t>(Offset + 8);
	auto EncryptionID    = CoDAssets::GameInstance->Read<uint8_t>(Offset + 16);
	auto StringSize      = CoDAssets::GameInstance->Read<uint8_t>(Offset + 17);
	// Check 0 length
	if (StringSize == 0)
		return "";
	auto EncryptedString = (uint8_t*)CoDAssets::GameInstance->Read(Offset + 18, StringSize, BytesRead);
	// Pass to decryptor
	auto Result = DecryptString(EncryptedString, StringSize, EncryptionID, StringHash);
	// Clean up
	delete[] EncryptedString;
	// Done
	return Result;
}
void GameBlackOps4::PerformInitialSetup()
{
	// Load Caches
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_xanim.wni"));
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_ximage.wni"));
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_xmaterial.wni"));
	AssetNameCache.LoadIndex(FileSystems::CombinePath(FileSystems::GetApplicationPath(), "package_index\\bo4_xmodel.wni"));

	// Prepare to copy the oodle dll
	auto OurPath = FileSystems::CombinePath(FileSystems::GetApplicationPath(), "oo2core_6_win64.dll");

	// Copy if not exists
	if (!FileSystems::FileExists(OurPath))
		FileSystems::CopyFile(FileSystems::CombinePath(FileSystems::GetDirectoryName(CoDAssets::GameInstance->GetProcessPath()), "oo2core_6_win64.dll"), OurPath);
}